{"/home/travis/build/npmtest/node-npmtest-monitor-dashboard/test.js":"/* istanbul instrument in package npmtest_monitor_dashboard */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-monitor-dashboard/lib.npmtest_monitor_dashboard.js":"/* istanbul instrument in package npmtest_monitor_dashboard */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_monitor_dashboard = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_monitor_dashboard = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-monitor-dashboard/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-monitor-dashboard && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_monitor_dashboard */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_monitor_dashboard\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_monitor_dashboard.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_monitor_dashboard.rollup.js'] =\n            local.assetsDict['/assets.npmtest_monitor_dashboard.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_monitor_dashboard.__dirname + '/lib.npmtest_monitor_dashboard.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-monitor-dashboard/node_modules/monitor-dashboard/monitor.js":"// monitor.js (c) 2010-2014 Loren West and other contributors\n// May be freely distributed under the MIT license.\n// For further details and documentation:\n// http://github.com/lorenwest/monitor-dashboard\n(function(root){\n\n  // Load dependencies\n  var Monitor = require('./lib/index'),\n      Server = Monitor.Server,\n      UI = Monitor.UI,\n      UIServer = UI.Server,\n      OS = require('os');\n\n  /**\n  * Entry point into the monitor UI server application\n  *\n  * This is the module loaded and run by Node.js on program start.\n  * It bootstraps the node.js dashboard server.\n  */\n\n  // Display the logo\n  console.log(\"\");\n  console.log(\"             _________                                  __________\");\n  console.log(\"___________________  /____      _______ ___________________(_)_  /______________\");\n  console.log(\"__  __ \\\\  __ \\\\  __  /_  _ \\\\     __  __ `__ \\\\  __ \\\\_  __ \\\\_  /_  __/  __ \\\\_  ___/\");\n  console.log(\"_  / / / /_/ / /_/ / /  __/     _  / / / / / /_/ /  / / /  / / /_ / /_/ /  /\");\n  console.log(\"/_/ /_/\\\\____/\\\\__,_/  \\\\___/      /_/ /_/ /_/\\\\____//_/ /_//_/  \\\\__/ \\\\____//_/\");\n  console.log(\"\");\n\n  // Output an application template\n  if (process.argv.length > 3 && process.argv[2] === '--app') {\n    require('./lib/js/AppTemplate');\n    process.exit(0);\n  }\n\n  // Boot the UI server.\n  // This accepts http and websocket connections on the configured port.\n  var uiServer = new UIServer();\n  uiServer.start(function() {\n    // If the host can connect from any IP address (INADDR_ANY), display the DNS hostname\n    var connectTo = Monitor.Config.Dashboard.allowExternalConnections ? OS.hostname() : 'localhost';\n    console.log(\"Now showing at http://\" + connectTo + \":\" + uiServer.get('port') + \"/\");\n\n    // Output security concerns\n    if (!Monitor.Config.Dashboard.allowExternalConnections) {\n      console.log(\"\");\n      console.log(\"External connections disabled.\");\n      console.log(\"See \" + process.cwd() + \"/config/external.js for more information.\");\n    }\n  });\n\n  // Boot another Monitor server for accepting websocket connections\n  // on the standard Monitor port range.\n  var server = new Server();\n  server.start();\n\n  // Process uncaught exceptions.\n  process.on('uncaughtException', function(err){\n\n    // On laptop sleep/startup the DNS servers aren't immediately available,\n    // resulting in a flood of these for socket.io until DNS services are back up.\n    if (err.message === 'ECONNREFUSED, Could not contact DNS servers') {\n      return;\n    }\n\n    // Don't allow the process to continue in an unknown state.\n    console.error(\"Uncaught Exception: \" + err.message);\n    console.error(err.stack);\n    uiServer.stop(function(){\n      process.exit(1);\n    });\n\n    // Don't wait around if the server is hung.\n    setTimeout(function(){process.exit(1);}, 2000);\n  });\n\n}(this));\n","/home/travis/build/npmtest/node-npmtest-monitor-dashboard/node_modules/monitor-dashboard/lib/index.js":"// index.js (c) 2010-2014 Loren West and other contributors\n// May be freely distributed under the MIT license.\n// For further details and documentation:\n// http://github.com/lorenwest/monitor-dashboard\n(function(root){\n\n  /*\n  * Entry point for commonJS style loading\n  *\n  * This file coordinates the loading of modules in a consistent order\n  * in a commonJS environment.\n  */\n\n  var commonJS = (typeof exports !== 'undefined');\n  if (commonJS) {\n\n    // Grunt.js contains the module definition files\n    var MODULE_DEF = require('../grunt.js').MODULE_DEF;\n\n    // Load external commonJS modules\n    var Monitor = module.exports = require('monitor');\n\n    // Attach backbone callbacks\n    require('backbone-callbacks').attach(Monitor.Backbone);\n\n    // Load all files so they have a consistent loading order\n    var allFiles = MODULE_DEF.shared_js.concat(MODULE_DEF.server_js);\n    allFiles.forEach(function(file) {\n      require('../' + file);\n    });\n  }\n\n}(this));\n","/home/travis/build/npmtest/node-npmtest-monitor-dashboard/node_modules/monitor-dashboard/grunt.js":"// grunt.js (c) 2010-2014 Loren West and other contributors\n// May be freely distributed under the MIT license.\n// For all details and documentation:\n// http://github.com/lorenwest/monitor-dashboard\n\nvar exec = require('child_process').exec;\n\n// This is used in the build automation tasks, and on the server\n// when running in dev mode to serve individual files for debugging.\nvar MODULE_DEF = {\n  shared_js: [\n    \"lib/js/UI.js\",\n    \"lib/js/Template.js\",\n    \"lib/js/Site.js\",\n    \"lib/js/Component.js\",\n    \"lib/js/Page.js\",\n    \"lib/js/Tree.js\",\n    \"lib/js/Tour.js\"\n  ],\n  server_js: [\n    \"lib/js/NetworkMap.js\",\n    \"lib/js/Server.js\",\n    \"lib/js/TreeProbe.js\",\n    \"lib/js/PagesProbe.js\",\n    \"lib/js/ToursProbe.js\"\n  ],\n  client_js: [\n    \"lib/js/IconChooser.js\",\n    \"lib/js/DropDownMenu.js\",\n    \"lib/js/JsonView.js\",\n    \"lib/js/TreeView.js\",\n    \"lib/js/MonitorPicker.js\",\n    \"lib/js/SettingsView.js\",\n    \"lib/js/NewComponentView.js\",\n    \"lib/js/ComponentSettingsView.js\",\n    \"lib/js/ComponentView.js\",\n    \"lib/js/PageSettingsView.js\",\n    \"lib/js/PageView.js\",\n    \"lib/js/Sidebar.js\",\n    \"lib/js/SidebarView.js\",\n    \"lib/js/TourView.js\",\n    \"lib/js/TourSettingsView.js\"\n  ],\n  templates: [\n    \"lib/template/UI.html\",\n    \"lib/template/PageView.html\",\n    \"lib/template/PageSettings.html\",\n    \"lib/template/PageCopy.html\",\n    \"lib/template/SidebarView.html\",\n    \"lib/template/TourView.html\",\n    \"lib/template/TourSettings.html\",\n    \"lib/template/ComponentView.html\",\n    \"lib/template/ComponentSettings.html\",\n    \"lib/template/NewComponentView.html\",\n    \"lib/template/NewPage.html\",\n    \"lib/template/NewTourPage.html\",\n    \"lib/template/ComponentIcon.html\"\n  ],\n  client_css: [\n    \"lib/css/default/bootstrap.min.css\",\n    \"lib/css/default/font-awesome.css\",\n    \"lib/css/default/UI.css\",\n    \"lib/css/default/MonitorPicker.css\",\n    \"lib/css/default/ComponentView.css\",\n    \"lib/css/default/ComponentSettings.css\",\n    \"lib/css/default/NewComponentView.css\",\n    \"lib/css/default/DropDownMenu.css\",\n    \"lib/css/default/PageView.css\",\n    \"lib/css/default/PageSettings.css\",\n    \"lib/css/default/SidebarView.css\",\n    \"lib/css/default/TourView.css\",\n    \"lib/css/default/TourSettings.css\",\n    \"lib/css/default/JsonView.css\",\n    \"lib/css/default/TreeView.css\",\n    \"lib/ext/jquery.miniColors.css\"\n  ],\n  client_ext: [\n    \"lib/ext/jquery-1.8.2.min.js\",\n    \"lib/ext/monitor-all.js\",\n    \"lib/ext/Backbone.ModelBinder.min.js\",\n    \"lib/ext/bootstrap.min.js\",\n    \"lib/ext/bootstrap-tooltip.js\",\n    \"lib/ext/bootstrap-dropdown.js\",\n    \"lib/ext/bootstrap-modal.js\",\n    \"lib/ext/bootstrap-alert.js\",\n    \"lib/ext/mustache-0.7.0-dev.js\",\n    \"lib/ext/numeral.min.js\",\n    \"lib/ext/jquery.miniColors.min.js\"\n  ]\n};\n\n// Build automation tasks\nmodule.exports = function(grunt) {\n\n  // Project configuration.\n  grunt.initConfig({\n    pkg: '<json:package.json>',\n    module: MODULE_DEF,\n    lint: {\n      files: ['grunt.js', '<config:module.server_js>', '<config:module.client_js>', 'test/**/*.js']\n    },\n    test: {\n      files: ['test/**/*.js']\n    },\n    watch: {\n      files: ['grunt.js', '<config:module.server_js>', '<config:module.client_js>', 'test/**/*.js'],\n      tasks: 'default'\n    },\n    min: {\n      ui: {\n        src: ['<config:monitor.lib>', '<config.monitor.ui>'],\n        dest: '/tmp/monitor-base-min.js'\n      },\n      css: {\n        src: ['ui/client/css/all.css'],\n        dest: 'ui/client/css/all.min.css'\n      }\n    },\n    concat: {\n      ui: {\n        src: ['<config:monitor.ext>', '/tmp/monitor-base-min.js'],\n        dest: 'ui/client/src/monitor-min.js'\n      },\n      css: {\n        src: ['<config:monitor.css>'],\n        dest: 'ui/client/css/all.css'\n      }\n    },\n    jshint: {\n      options: {\n        strict: false,\n        curly: true,\n        eqeqeq: true,\n        immed: true,\n        latedef: true,\n        newcap: true,\n        noarg: true,\n        sub: true,\n        undef: true,\n        boss: true,\n        eqnull: true,\n        node: true\n      },\n      globals: {\n        exports: true\n      }\n    }\n  });\n\n  grunt.registerTask('doc', 'Generate documentation files', function() {\n    var t = this, done = t.async(), child;\n    child = exec('yuidoc -c ./yuidoc.json', function (error, stdout, stderr) {\n      console.log(stderr);\n      console.log(stdout);\n      done();\n    });\n  });\n\n  // Default task.\n  grunt.registerTask('default', 'doc lint test');\n  grunt.registerTask('dist', 'min:ui concat:ui concat:css');\n\n};\n\n// Expose externally\nmodule.exports.MODULE_DEF = MODULE_DEF;\n","/home/travis/build/npmtest/node-npmtest-monitor-dashboard/node_modules/monitor-dashboard/lib/js/UI.js":"/*global window document $ localStorage alert*/\n\n// UI.js (c) 2010-2014 Loren West and other contributors\n// May be freely distributed under the MIT license.\n// For further details and documentation:\n// http://github.com/lorenwest/monitor-dashboard\n(function(root){\n\n  // Module loading\n  var Monitor = root.Monitor || require('monitor'),\n      OS = Monitor.commonJS ? require('os') : null,\n      Backbone = Monitor.Backbone,\n      _ = Monitor._,\n      templates = {};  // Cache key=app-name, value=Template object\n\n  // Constants\n  var KEY_ESC = 27;\n\n  /**\n  * Node Monitor Namespace\n  *\n  * This class is here to provide a global namespace to attach all UI classes\n  * and UI utility functions.\n  *\n  * @static\n  * @class UI\n  * @constructor\n  */\n  var UI = Monitor.UI = function(){};\n  var Mustache = UI.Mustache = Monitor.commonJS ? require('../ext/mustache-0.7.0-dev.js') : root.Mustache;\n\n  /**\n  * Load the specified template\n  *\n  * This loads the template from cache, from the DOM (if present), or from the\n  * server if it's not in DOM.\n  *\n  * It can be run on the client side only\n  *\n  * @static\n  * @method loadTemplate\n  * @param app {String} Application name\n  * @param name {String} Template name\n  * @param callback {Function(error, template)} Called when the template is loaded or on error.\n  *     @param callback.error {Object} Object containing the error or null if no error\n  *     @param callback.template {Template} The Template object\n  */\n  UI.loadTemplate = function(app, name, callback) {\n\n    // See if the template is in cache\n    var cacheKey = app ? app + '-' + name : name;\n    if (templates[cacheKey]) {\n      return callback(null, templates[cacheKey]);\n    }\n\n    // See if the template is in DOM\n    var domId = '#nm-template-' + cacheKey;\n    if ($(domId).length) {\n      return callback(null, templates[cacheKey] = new UI.Template({\n        text: $(domId).html()\n      }));\n    }\n\n    // Get the template from the server\n    var url = (app ? '/app/' + app : '/static') + '/template/' + name + '.html';\n    $.get(url, function(data){\n      // If we have a <doctype>, then we've gotten a 404\n      if (data.indexOf('<!DOCTYPE html>') === 0) {\n        return callback({code:'ENOENT', msg:'No template found at ' + url});\n      }\n      templates[cacheKey] = new UI.Template({text:data});\n      return callback(null, templates[cacheKey]);\n    }, 'html').error(callback);\n  };\n\n  /**\n  * Static Configurations\n  *\n  * These can be set onto the UI class after it's loaded, or via the\n  * node.js config package if running server-side.\n  *\n  * @static\n  * @property Config\n  * @type &lt;Object&gt;</code>\n  * <ul>\n  * </ul>\n  */\n  var defaultConfig = {\n    port: 4200,\n    allowExternalConnections: false,\n    siteDbPath: './site_db'\n  };\n  if (Monitor.commonJS) {\n    Monitor.Config.setModuleDefaults('Dashboard', defaultConfig);\n  } else {\n    _.extend(Monitor.Config, {Monitor: defaultConfig});\n  }\n  UI.Config = Monitor.Config.Monitor;\n\n  // Create the app namespace\n  var app = UI.app = {};\n\n  // Expose jquery if on the client.  No longer needed on the server.\n  var $ = UI.$ = root.$ || {fn:{}};\n\n  /* jQuery no longer needed on the server\n  // Set up server-side jQuery\n  $.support.cors = true;\n  if (Monitor.commonJS) {\n    var XHR = require('xmlhttprequest').XMLHttpRequest;\n    $.ajaxSetup({xhr: function(){return new XHR();}});\n  }\n  */\n\n  // A generic mask to use for modals.  Can be stacked for modal within modal\n  // (example: dropdown within a dialog).\n  UI.ModalMask = Backbone.View.extend({\n    initialize: function(options){\n      var t = this;\n\n      // Render on new\n      t.$el.addClass('nm-mask').appendTo('body');\n\n      // Attaching keydown to the document vs. the view\n      t.keydown = t.onKeyDown.bind(t);\n      $(document).on('keydown', t.keydown);\n\n    },\n    events: {\n      'click'   : 'close'\n    },\n    onKeyDown: function(e) {\n      var t = this;\n      if (e.keyCode === KEY_ESC) {\n        return t.close(e);\n      }\n    },\n    close: function(e) {\n      var t = this;\n      t.trigger('close');\n      t.$el.remove();\n      $(document).off('keydown', t.keydown);\n      e.stopPropagation();\n      e.preventDefault();\n      return false;\n    }\n  });\n\n  // Common dialog box move logic\n  UI.modalDragStart = function(e) {\n    var dialog = $(e.currentTarget).parent(),\n        zoomRatio = window.innerWidth / window.outerWidth,\n        newPosition = {\n          top: parseInt(dialog.css('top'), 10) * zoomRatio,\n          left: parseInt(dialog.css('left'), 10) * zoomRatio\n        },\n        offset = {\n          top: e.pageY - newPosition.top,\n          left: e.pageX - newPosition.left\n        };\n\n    function drag(e) {\n      newPosition.top = Math.max(e.pageY - offset.top, 0);\n      newPosition.left = Math.max(e.pageX - offset.left, 0);\n      dialog.css(newPosition);\n    }\n    function drop(e) {\n      dialog.addClass('fade');\n      $(document).unbind(\"mousemove\", drag).unbind(\"mouseup\", drop);\n    }\n    $(document).bind(\"mousemove\", drag).bind(\"mouseup\", drop);\n    dialog.removeClass('fade');\n    drag(e);\n    e.preventDefault();\n  };\n\n  /**\n  * Merge changes from another array or collection\n  *\n  * This adds a ```set()``` method to Backbone.Collection, which merges the\n  * specified array or collection into the existing collection.\n  *\n  * It is useful for streaming updates into existing collections without\n  * disrupting any event listeners attached to existing models.\n  *\n  * If an item already exists, it merges changes into it.  If an item\n  * doesn't exist it adds it, and it removes any item in the collection that\n  * isn't in the array or collection passed in to the method.\n  *\n  * Example:\n  *\n  *     var stream = JSON.stringify(myCollection);\n  *     var myArray = JSON.parse(stream);\n  *     myArray[0].lastUpdated = new Date();\n  *     myCollection.set(myArray);\n  *\n  * @method Backbone.Collection.set\n  * @param items {Array or Backbone.Collection} The items to set into the collection\n  * @param options {Object} Set options to pass to individual model create/set\n  */\n  Backbone.Collection.prototype.set = function(items, options) {\n\n    var t = this,\n        prevModels = t.models,\n        newIds = items.pluck ? items.pluck('id') : _.pluck(items, 'id'),\n        i, len, id, cid, prevModel, newItem, removeIds = [], newIdHash = {};\n\n    // Merge or add items to this collection\n    for (i = 0, len = newIds.length; i < len; i++) {\n      id = newIds[i];\n      newItem = items[i];\n      newIdHash[id] = true;\n      prevModel = t.get(id);\n      if (prevModel) {\n        prevModel.set(newItem instanceof Backbone.Model ? newItem.attributes : newItem, options);\n      } else {\n        t.add(newItem, options);\n      }\n    }\n\n    // Remove any item not in new items\n    t.each(function(model) {\n      id = model.get('id');\n      if (!newIdHash[id]) {\n        removeIds.push(id);\n      }\n    });\n    t.remove(removeIds);\n  };\n\n  /**\n  * Set up a contained model or contained collection relationship\n  *\n  * This is called during initialize of a parent backbone model that contains\n  * another backbone model or collection.  It:\n  *\n  *     * Creates the correct model if setting from a non-model object\n  *     * Merges changes on set vs. overwriting the existing contained object\n  *     * Merges collection items vs. replacing (if it's a collection)\n  *     * Alters toJSON to return the contained object toJSON vs. the object reference\n  *\n  * Example:\n  *\n  *     UI.containedModel(this, 'author', Author);\n  *\n  * @method containedModel\n  * @param model {Backbone.Model} The parent model object\n  * @param attrName {String} Name of the attribute that contains the model or collection\n  * @param Ctor {Function} The constructor function of the contained model or collection\n  */\n  UI.containedModel = function(model, attrName, Ctor) {\n\n    // Build the function for setting model data\n    function setAttr(setModel, newValue, setOptions) {\n      var oldValue = model._containedModels[attrName];\n\n      // Pass through if removing\n      if (newValue === undefined || newValue === null) {\n        model._containedModels[attrName] = newValue;\n        return;\n      }\n\n      // Is the new value the correct type?\n      if (newValue instanceof Ctor) {\n\n        // Directly set if no old value\n        if (!oldValue instanceof Ctor) {\n          model._containedModels[attrName] = newValue;\n          return;\n        }\n\n        // They're both models.  Disregard if they're the same.\n        var oldJSON = oldValue.toJSON({deep:true});\n        var newJSON = newValue.toJSON({deep:true});\n        if (_.isEqual(oldJSON, newJSON)) {\n          return;\n        }\n\n        // Merge the raw JSON if they're both models\n        newValue = newJSON;\n      }\n\n      // Keep the previous model and merge new data into it\n      // For collections this relies on the Collection.set() method\n      if (oldValue instanceof Ctor) {\n        model.attributes[attrName] = oldValue;\n        model._currentAttributes[attrName] = oldValue;\n        model.changed[attrName] = oldValue;\n        oldValue.set(newValue, setOptions);\n        return;\n      }\n\n      // Create a new model or collection, passing the value\n      newValue =\n        model._containedModels[attrName] =\n        model.attributes[attrName] =\n        model._currentAttributes[attrName] =\n        new Ctor(newValue, setOptions);\n\n      // Watch for changes to the underlying model or collection\n      // (collection add/remove), forwarding changes to this model\n      newValue.on('change add remove reset', UI.onSubModelChange, {\n        parent:model,\n        attrName: attrName\n      });\n    }\n\n    // Remember the contained models before they're overridden by set\n    if (!model._containedModels) {\n      model._containedModels = {};\n    }\n\n    // Watch for changes to the underlying model or collection\n    // (collection add/remove), forwarding changes to this model\n    var subModel = model.get(attrName);\n    if (subModel instanceof Backbone.Model || subModel instanceof Backbone.Collection) {\n      subModel.on('change add remove reset', UI.onSubModelChange, {\n        parent:model,\n        attrName: attrName\n      });\n    }\n\n    // Set the initial model data\n    setAttr(model, model.get(attrName));\n\n    // Watch for subsequent changes\n    model.on('change:' + attrName, setAttr, model);\n  };\n\n  /**\n  * Change listener attached to contained models - for bubbling change\n  * events to the containing model.\n  *\n  * @method onSubModelChange\n  * @param model {Model} Backbone model changed\n  * @param [collection] {Backbone collection} if a collection add/remove\n  * @param options {Object} Event options\n  * @param this {Object} 'this' is a custom object containing:\n  *     @param this.parent {Backbone.Model} Parent container for this object\n  *     @param this.attrName {String} Parents attribute name for this model\n  */\n  UI.onSubModelChange = function(model) {\n    var t = this,\n        parent = t.parent,\n        attrName = t.attrName,\n        // Options is arg[2] for add/remove and arg[1] for change\n        chgOptions = arguments[2] || arguments[1] || {};\n\n    // If the parent isn't currently changing, the source of the change\n    // came from the contained model.  Trigger changes to the parent model.\n    if (!chgOptions.silent && !parent._changing) {\n\n      // Use setTimeout to bundle up all changes into a single change event\n      // for each attribute and the parent class.\n      parent._pendingChanges = parent._pendingChanges || {};\n      parent._pendingChanges[attrName] = true;\n      if (!parent._subModelTimer) {\n\n        // Create one timer for all changes to the parent\n        parent._subModelTimer = setTimeout(function(){\n          var changes = {};\n          for (var chgAttrName in parent._pendingChanges) {\n\n            // Get the changed attribute for the set\n            changes[chgAttrName] = parent.attributes[chgAttrName];\n\n            // Make sure a change is detected\n            parent.attributes[chgAttrName] = '';\n            parent._currentAttributes[chgAttrName] = '';\n            parent._previousAttributes[chgAttrName] = '';\n          }\n\n          // Set all sub-model changes into the parent\n          parent.set(changes);\n\n          // Remove our internal members\n          delete parent._pendingChanges;\n          delete parent._subModelTimer;\n        },0);\n      }\n    } else {\n\n      // Inform the parent that this attribute has pending changes.\n      // This is necessary for the parent to fire it's own change event.\n      parent._pending[attrName] = true;\n    }\n  };\n\n  /**\n  * Additional options for the Backbone.js toJSON method\n  *\n  * If the options hash contains {deep:true}, then call the toJSON() method of\n  * any contained objects that have a toJSON method.\n  *\n  * If the options hash contains {trim:true}, then only output values that\n  * differ from the default value.  This produces a less chatty JSON string,\n  * useful for for streaming models across the wire.\n  *\n  * @method toJSON\n  * @return {Object} A raw JS copy of the data model\n  */\n  Backbone.Model.prototype.toJSON = function(options) {\n    var t = this,\n        result = {},\n        defaults = _.isFunction(t.defaults) ? t.defaults() : t.defaults,\n        attrs = t.attributes,\n        attr, value;\n\n    options = options || {};\n\n    for (attr in attrs) {\n      value = attrs[attr];\n      if (options.deep && value && _.isFunction(value.toJSON)) {\n        value = value.toJSON(options);\n      }\n      if (options.trim && defaults) {\n        if (!_.isEqual(value, defaults[attr])) {\n          result[attr] = value;\n        }\n      } else {\n        result[attr] = value;\n      }\n    }\n    return result;\n  };\n\n  /**\n  * Attach a common tooltip to the specified selector\n  *\n  * This attaches a bootstrap.js tooltip onto the elements specified with\n  * the jQuery selector.  It adds classes to the tooltip elements, allowing them\n  * to be individually styled.\n  *\n  * @method tooltip\n  * @param selector {jQuery Selector} Selector of items to add tooltips onto\n  * @param options {Object} Tool tip options\n  */\n  UI.tooltip = function(selector, options) {\n    selector.addClass('nm-pv-tt').tooltip(_.extend({\n      placement: 'left',\n      template: '<div class=\"tooltip nm-pv-tooltip\"><div class=\"tooltip-arrow\"></div><div class=\"tooltip-inner\"></div></div>',\n      delay: {show: 500, hide:10}\n    }, options));\n  };\n\n  /**\n  * Hide all tooltips and cancel awaiting timers\n  *\n  * @method hideToolTips\n  */\n  UI.hideToolTips = function() {\n    $('.nm-pv-tt').each(function() {\n      var $el = $(this),\n          tooltip = $el.data('tooltip');\n      if (tooltip) {\n        clearTimeout($el.data('tooltip').timeout);\n      }\n      $el.tooltip('hide');\n    });\n  };\n\n  /**\n  * Pause the tour if running\n  */\n  UI.pauseTour = function() {\n    if (UI.pageView.tourView) {\n      UI.pageView.tourView.pause();\n    }\n  };\n\n  /**\n  * jQuery add-on for inserting CSS into the DOM\n  *\n  * This method can accept a CSS style sheet in a string, an array of strings,\n  * or an object with keys representing selectors and values representing styles.\n  *\n  * String example:\n  *\n  *     $.styleSheet(\"body: {background:white;}\");\n  *\n  * Array example:\n  *\n  *     $.styleSheet([\n  *       \"body: {background:white;}\",\n  *       \"#canvas: background: #e0e0e0; max-width: 400px;\"\n  *     ]);\n  *\n  * Object example:\n  *\n  *     $.styleSheet({\n  *       \"body\"    : \"background: white;\",\n  *       \"#canvas\" : \"background: #e0e0e0; max-width: 400px;\"\n  *     });\n  *\n  * Deep object example:\n  *\n  *     $.styleSheet({\n  *       \"body\": {\n  *         \"background\": \"white\",\n  *       },\n  *       \"#canvas\":\n  *         \"background\": \"#e0e0e0\",\n  *         \"max-width\": \"400px\";\"\n  *     });\n  *\n  * @static\n  * method $.styleSheet\n  * @param styles {String, Array, or Object} Styles to apply to the page\n  * @param id {String} ID of the style element.  This places an ID attribute onto the style tag, and replaces any prior style element with the specified ID.\n  */\n  $.styleSheet = function(styles, id) {\n\n    // Build the style string based on the input type\n    var styleStr = '', idAttr = '';\n    if (typeof styles === 'string') {\n      styleStr = styles;\n    }\n    else if (Array.isArray(styles)) {\n      styleStr = styles.join('\\n');\n    }\n    else if (typeof styles === 'object') {\n      for (var selector in styles) {\n        var value = styles[selector], valueStr = '';\n        if (typeof value === 'string') {\n          valueStr = value;\n        }\n        else if (typeof value === 'object') {\n          for (var cssAttr in value) {\n            valueStr += cssAttr + ':' + value[cssAttr] + \"; \";\n          }\n        }\n        styleStr += selector + \"{\" + valueStr + \"} \";\n      }\n    }\n\n    // Remove any prior style with the specified ID\n    if (id) {\n      $('#' + id).remove();\n      idAttr = 'id=\"' + id + '\" ';\n    }\n\n    // Insert into DOM\n    if (styleStr) {\n      $('<style ' + idAttr + 'type=\"text/css\">' + styleStr + '</style>').appendTo('head');\n    }\n  };\n\n  /**\n  * jQuery utility for centering a div on the screen\n  *\n  * @static\n  * @method $.centerBox\n  */\n  $.fn.centerBox = function () {\n    var t = this;\n    t.css(\"top\", Math.max(0, (($(window).height() - this.outerHeight()) / 2) + $(window).scrollTop()) + \"px\");\n    t.css(\"left\", Math.max(0, (($(window).width() - this.outerWidth()) / 2) + $(window).scrollLeft()) + \"px\");\n    return t;\n  };\n\n  /**\n  * jQuery utility for converting a style string into an object\n  *\n  * This converts a string like this:\n  *\n  *     var style = \"top:15px; left:200px; background-color:#202020\";\n  *\n  * Into an object like this:\n  *\n  *     {\n  *       \"top\": \"15px\",\n  *       \"left\": \"200px\",\n  *       \"background-color\": \"#202020\"\n  *     }\n  *\n  * @static\n  * method $.parseStyleString\n  * @param styleString {String} CSS Style string\n  * @return {Object} The parsed styles, as an object\n  */\n  $.parseStyleString = function(styleString) {\n    var parsed = {}, parts = styleString.split(';');\n    for (var i = 0, l = parts.length; i < l; i++) {\n      var nameVal = parts[i].split(':');\n      if (nameVal.length === 2) {\n        parsed[nameVal[0].trim()] = nameVal[1].trim();\n      }\n    }\n    return parsed;\n  };\n\n  /**\n  * jQuery utility for converting a CSS object into a style string\n  *\n  * This converts an object like this:\n  *\n  *     var css = {\n  *       \"top\": \"15px\",\n  *       \"left\": \"200px\",\n  *       \"background-color\": \"#202020\"\n  *     }\n  *\n  * Into a string like this:\n  *\n  *     \"top:15px; left:200px; background-color:#202020;\"\n  *\n  * @static\n  * method $.makeStyleString\n  * @param css {Object} The CSS object\n  * @return {String} The style string\n  */\n  $.makeStyleString = function(css) {\n    var styles = '', separator = '';\n    for (var elemName in css) {\n      styles += separator + elemName + \":\" + css[elemName] + ';';\n      separator = ' ';\n    }\n    return styles;\n  };\n\n  /**\n  * jQuery utility for making a string Title Case\n  *\n  * @static\n  * method $.titleCase\n  * @param titleString {String} A title string\n  * @param preserveCase {String} Don't lowercase the string first\n  * @return {String} The titleString Title Cased\n  */\n  $.titleCase = function(titleString, preserveCase) {\n    var newTitle = preserveCase ? titleString : titleString.toLowerCase();\n    newTitle = newTitle.split(' ');\n    for (var i = 0, l = newTitle.length; i < l; i++) {\n      newTitle[i] = newTitle[i].substr(0,1).toUpperCase() + newTitle[i].substr(1);\n    }\n    return newTitle.join(' ');\n  };\n\n  // Add Function.bind to browsers that don't support it yet (mobile safari & ie).\n  // Thanks to https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/bind\n  if (!Function.prototype.bind) {\n    Function.prototype.bind = function (oThis) {\n      if (typeof this !== \"function\") {\n        // closest thing possible to the ECMAScript 5 internal IsCallable function\n        throw new TypeError(\"Function.prototype.bind - what is trying to be bound is not callable\");\n      }\n      var aArgs = Array.prototype.slice.call(arguments, 1),\n        fToBind = this,\n        FNOP = function () {},\n        fBound = function () {\n          return fToBind.apply(this instanceof FNOP ? this : oThis, aArgs.concat(Array.prototype.slice.call(arguments)));\n        };\n      FNOP.prototype = this.prototype;\n      fBound.prototype = new FNOP();\n      return fBound;\n    };\n  }\n\n}(this));\n","/home/travis/build/npmtest/node-npmtest-monitor-dashboard/node_modules/monitor-dashboard/lib/ext/mustache-0.7.0-dev.js":"/*!\n * mustache.js - Logic-less {{mustache}} templates with JavaScript\n * http://github.com/janl/mustache.js\n */\n\n/*global define: false*/\n\nvar Mustache;\n\n(function (exports) {\n  if (typeof module !== \"undefined\" && module.exports) {\n    module.exports = exports; // CommonJS\n  } else if (typeof define === \"function\") {\n    define(exports); // AMD\n  } else {\n    Mustache = exports; // <script>\n  }\n}((function () {\n\n  var exports = {};\n\n  exports.name = \"mustache.js\";\n  exports.version = \"0.7.0\";\n  exports.tags = [\"{{\", \"}}\"];\n\n  exports.Scanner = Scanner;\n  exports.Context = Context;\n  exports.Writer = Writer;\n\n  var whiteRe = /\\s*/;\n  var spaceRe = /\\s+/;\n  var nonSpaceRe = /\\S/;\n  var eqRe = /\\s*=/;\n  var curlyRe = /\\s*\\}/;\n  var tagRe = /#|\\^|\\/|>|\\{|&|=|!/;\n\n  // Workaround for https://issues.apache.org/jira/browse/COUCHDB-577\n  // See https://github.com/janl/mustache.js/issues/189\n  function testRe(re, string) {\n    return RegExp.prototype.test.call(re, string);\n  }\n\n  function isWhitespace(string) {\n    return !testRe(nonSpaceRe, string);\n  }\n\n  var isArray = Array.isArray || function (obj) {\n    return Object.prototype.toString.call(obj) === \"[object Array]\";\n  };\n\n  function escapeRe(string) {\n    return string.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, \"\\\\$&\");\n  }\n\n  var entityMap = {\n    \"&\": \"&amp;\",\n    \"<\": \"&lt;\",\n    \">\": \"&gt;\",\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    \"/\": '&#x2F;'\n  };\n\n  function escapeHtml(string) {\n    return String(string).replace(/[&<>\"'\\/]/g, function (s) {\n      return entityMap[s];\n    });\n  }\n\n  // Export the escaping function so that the user may override it.\n  // See https://github.com/janl/mustache.js/issues/244\n  exports.escape = escapeHtml;\n\n  function Scanner(string) {\n    this.string = string;\n    this.tail = string;\n    this.pos = 0;\n  }\n\n  /**\n   * Returns `true` if the tail is empty (end of string).\n   */\n  Scanner.prototype.eos = function () {\n    return this.tail === \"\";\n  };\n\n  /**\n   * Tries to match the given regular expression at the current position.\n   * Returns the matched text if it can match, the empty string otherwise.\n   */\n  Scanner.prototype.scan = function (re) {\n    var match = this.tail.match(re);\n\n    if (match && match.index === 0) {\n      this.tail = this.tail.substring(match[0].length);\n      this.pos += match[0].length;\n      return match[0];\n    }\n\n    return \"\";\n  };\n\n  /**\n   * Skips all text until the given regular expression can be matched. Returns\n   * the skipped string, which is the entire tail if no match can be made.\n   */\n  Scanner.prototype.scanUntil = function (re) {\n    var match, pos = this.tail.search(re);\n\n    switch (pos) {\n    case -1:\n      match = this.tail;\n      this.pos += this.tail.length;\n      this.tail = \"\";\n      break;\n    case 0:\n      match = \"\";\n      break;\n    default:\n      match = this.tail.substring(0, pos);\n      this.tail = this.tail.substring(pos);\n      this.pos += pos;\n    }\n\n    return match;\n  };\n\n  function Context(view, parent) {\n    this.view = view;\n    this.parent = parent;\n    this.clearCache();\n  }\n\n  Context.make = function (view) {\n    return (view instanceof Context) ? view : new Context(view);\n  };\n\n  Context.prototype.clearCache = function () {\n    this._cache = {};\n  };\n\n  Context.prototype.push = function (view) {\n    return new Context(view, this);\n  };\n\n  Context.prototype.lookup = function (name) {\n    var value = this._cache[name];\n\n    if (!value) {\n      if (name === \".\") {\n        value = this.view;\n      } else {\n        var context = this;\n\n        while (context) {\n          if (name.indexOf(\".\") > 0) {\n            var names = name.split(\".\"), i = 0;\n\n            value = context.view;\n\n            while (value && i < names.length) {\n              value = value[names[i++]];\n            }\n          } else {\n            value = context.view[name];\n          }\n\n          if (value != null) {\n            break;\n          }\n\n          context = context.parent;\n        }\n      }\n\n      this._cache[name] = value;\n    }\n\n    if (typeof value === \"function\") {\n      value = value.call(this.view);\n    }\n\n    return value;\n  };\n\n  function Writer() {\n    this.clearCache();\n  }\n\n  Writer.prototype.clearCache = function () {\n    this._cache = {};\n    this._partialCache = {};\n  };\n\n  Writer.prototype.compile = function (template, tags) {\n    var fn = this._cache[template];\n\n    if (!fn) {\n      var tokens = exports.parse(template, tags);\n      fn = this._cache[template] = this.compileTokens(tokens, template);\n    }\n\n    return fn;\n  };\n\n  Writer.prototype.compilePartial = function (name, template, tags) {\n    var fn = this.compile(template, tags);\n    this._partialCache[name] = fn;\n    return fn;\n  };\n\n  Writer.prototype.compileTokens = function (tokens, template) {\n    var fn = compileTokens(tokens);\n    var self = this;\n\n    return function (view, partials) {\n      if (partials) {\n        if (typeof partials === \"function\") {\n          self._loadPartial = partials;\n        } else {\n          for (var name in partials) {\n            self.compilePartial(name, partials[name]);\n          }\n        }\n      }\n\n      return fn(self, Context.make(view), template);\n    };\n  };\n\n  Writer.prototype.render = function (template, view, partials) {\n    return this.compile(template)(view, partials);\n  };\n\n  Writer.prototype._section = function (name, context, text, callback) {\n    var value = context.lookup(name);\n\n    switch (typeof value) {\n    case \"object\":\n      if (isArray(value)) {\n        var buffer = \"\";\n\n        for (var i = 0, len = value.length; i < len; ++i) {\n          buffer += callback(this, context.push(value[i]));\n        }\n\n        return buffer;\n      }\n\n      return value ? callback(this, context.push(value)) : \"\";\n    case \"function\":\n      var self = this;\n      var scopedRender = function (template) {\n        return self.render(template, context);\n      };\n\n      return value.call(context.view, text, scopedRender) || \"\";\n    default:\n      if (value) {\n        return callback(this, context);\n      }\n    }\n\n    return \"\";\n  };\n\n  Writer.prototype._inverted = function (name, context, callback) {\n    var value = context.lookup(name);\n\n    // Use JavaScript's definition of falsy. Include empty arrays.\n    // See https://github.com/janl/mustache.js/issues/186\n    if (!value || (isArray(value) && value.length === 0)) {\n      return callback(this, context);\n    }\n\n    return \"\";\n  };\n\n  Writer.prototype._partial = function (name, context) {\n    if (!(name in this._partialCache) && this._loadPartial) {\n      this.compilePartial(name, this._loadPartial(name));\n    }\n\n    var fn = this._partialCache[name];\n\n    return fn ? fn(context) : \"\";\n  };\n\n  Writer.prototype._name = function (name, context) {\n    var value = context.lookup(name);\n\n    if (typeof value === \"function\") {\n      value = value.call(context.view);\n    }\n\n    return (value == null) ? \"\" : String(value);\n  };\n\n  Writer.prototype._escaped = function (name, context) {\n    return exports.escape(this._name(name, context));\n  };\n\n  /**\n   * Calculates the bounds of the section represented by the given `token` in\n   * the original template by drilling down into nested sections to find the\n   * last token that is part of that section. Returns an array of [start, end].\n   */\n  function sectionBounds(token) {\n    var start = token[3];\n    var end = start;\n\n    var tokens;\n    while ((tokens = token[4]) && tokens.length) {\n      token = tokens[tokens.length - 1];\n      end = token[3];\n    }\n\n    return [start, end];\n  }\n\n  /**\n   * Low-level function that compiles the given `tokens` into a function\n   * that accepts three arguments: a Writer, a Context, and the template.\n   */\n  function compileTokens(tokens) {\n    var subRenders = {};\n\n    function subRender(i, tokens, template) {\n      if (!subRenders[i]) {\n        var fn = compileTokens(tokens);\n        subRenders[i] = function (writer, context) {\n          return fn(writer, context, template);\n        };\n      }\n\n      return subRenders[i];\n    }\n\n    return function (writer, context, template) {\n      var buffer = \"\";\n      var token, sectionText;\n\n      for (var i = 0, len = tokens.length; i < len; ++i) {\n        token = tokens[i];\n\n        switch (token[0]) {\n        case \"#\":\n          sectionText = template.slice.apply(template, sectionBounds(token));\n          buffer += writer._section(token[1], context, sectionText, subRender(i, token[4], template));\n          break;\n        case \"^\":\n          buffer += writer._inverted(token[1], context, subRender(i, token[4], template));\n          break;\n        case \">\":\n          buffer += writer._partial(token[1], context);\n          break;\n        case \"&\":\n          buffer += writer._name(token[1], context);\n          break;\n        case \"name\":\n          buffer += writer._escaped(token[1], context);\n          break;\n        case \"text\":\n          buffer += token[1];\n          break;\n        }\n      }\n\n      return buffer;\n    };\n  }\n\n  /**\n   * Forms the given array of `tokens` into a nested tree structure where\n   * tokens that represent a section have a fifth item: an array that contains\n   * all tokens in that section.\n   */\n  function nestTokens(tokens) {\n    var tree = [];\n    var collector = tree;\n    var sections = [];\n    var token, section;\n\n    for (var i = 0; i < tokens.length; ++i) {\n      token = tokens[i];\n\n      switch (token[0]) {\n      case \"#\":\n      case \"^\":\n        token[4] = [];\n        sections.push(token);\n        collector.push(token);\n        collector = token[4];\n        break;\n      case \"/\":\n        if (sections.length === 0) {\n          throw new Error(\"Unopened section: \" + token[1]);\n        }\n\n        section = sections.pop();\n\n        if (section[1] !== token[1]) {\n          throw new Error(\"Unclosed section: \" + section[1]);\n        }\n\n        if (sections.length > 0) {\n          collector = sections[sections.length - 1][4];\n        } else {\n          collector = tree;\n        }\n        break;\n      default:\n        collector.push(token);\n      }\n    }\n\n    // Make sure there were no open sections when we're done.\n    section = sections.pop();\n\n    if (section) {\n      throw new Error(\"Unclosed section: \" + section[1]);\n    }\n\n    return tree;\n  }\n\n  /**\n   * Combines the values of consecutive text tokens in the given `tokens` array\n   * to a single token.\n   */\n  function squashTokens(tokens) {\n    var token, lastToken;\n\n    for (var i = 0; i < tokens.length; ++i) {\n      token = tokens[i];\n\n      if (lastToken && lastToken[0] === \"text\" && token[0] === \"text\") {\n        lastToken[1] += token[1];\n        lastToken[3] = token[3];\n        tokens.splice(i--, 1); // Remove this token from the array.\n      } else {\n        lastToken = token;\n      }\n    }\n  }\n\n  function escapeTags(tags) {\n    if (tags.length !== 2) {\n      throw new Error(\"Invalid tags: \" + tags.join(\" \"));\n    }\n\n    return [\n      new RegExp(escapeRe(tags[0]) + \"\\\\s*\"),\n      new RegExp(\"\\\\s*\" + escapeRe(tags[1]))\n    ];\n  }\n\n  /**\n   * Breaks up the given `template` string into a tree of token objects. If\n   * `tags` is given here it must be an array with two string values: the\n   * opening and closing tags used in the template (e.g. [\"<%\", \"%>\"]). Of\n   * course, the default is to use mustaches (i.e. Mustache.tags).\n   */\n  exports.parse = function (template, tags) {\n    tags = tags || exports.tags;\n\n    var tagRes = escapeTags(tags);\n    var scanner = new Scanner(template);\n\n    var tokens = [],      // Buffer to hold the tokens\n        spaces = [],      // Indices of whitespace tokens on the current line\n        hasTag = false,   // Is there a {{tag}} on the current line?\n        nonSpace = false; // Is there a non-space char on the current line?\n\n    // Strips all whitespace tokens array for the current line\n    // if there was a {{#tag}} on it and otherwise only space.\n    function stripSpace() {\n      if (hasTag && !nonSpace) {\n        while (spaces.length) {\n          tokens.splice(spaces.pop(), 1);\n        }\n      } else {\n        spaces = [];\n      }\n\n      hasTag = false;\n      nonSpace = false;\n    }\n\n    var start, type, value, chr;\n\n    while (!scanner.eos()) {\n      start = scanner.pos;\n      value = scanner.scanUntil(tagRes[0]);\n\n      if (value) {\n        for (var i = 0, len = value.length; i < len; ++i) {\n          chr = value.charAt(i);\n\n          if (isWhitespace(chr)) {\n            spaces.push(tokens.length);\n          } else {\n            nonSpace = true;\n          }\n\n          tokens.push([\"text\", chr, start, start + 1]);\n          start += 1;\n\n          if (chr === \"\\n\") {\n            stripSpace(); // Check for whitespace on the current line.\n          }\n        }\n      }\n\n      start = scanner.pos;\n\n      // Match the opening tag.\n      if (!scanner.scan(tagRes[0])) {\n        break;\n      }\n\n      hasTag = true;\n      type = scanner.scan(tagRe) || \"name\";\n\n      // Skip any whitespace between tag and value.\n      scanner.scan(whiteRe);\n\n      // Extract the tag value.\n      if (type === \"=\") {\n        value = scanner.scanUntil(eqRe);\n        scanner.scan(eqRe);\n        scanner.scanUntil(tagRes[1]);\n      } else if (type === \"{\") {\n        var closeRe = new RegExp(\"\\\\s*\" + escapeRe(\"}\" + tags[1]));\n        value = scanner.scanUntil(closeRe);\n        scanner.scan(curlyRe);\n        scanner.scanUntil(tagRes[1]);\n        type = \"&\";\n      } else {\n        value = scanner.scanUntil(tagRes[1]);\n      }\n\n      // Match the closing tag.\n      if (!scanner.scan(tagRes[1])) {\n        throw new Error(\"Unclosed tag at \" + scanner.pos);\n      }\n\n      tokens.push([type, value, start, scanner.pos]);\n\n      if (type === \"name\" || type === \"{\" || type === \"&\") {\n        nonSpace = true;\n      }\n\n      // Set the tags for the next time around.\n      if (type === \"=\") {\n        tags = value.split(spaceRe);\n        tagRes = escapeTags(tags);\n      }\n    }\n\n    squashTokens(tokens);\n\n    return nestTokens(tokens);\n  };\n\n  // The high-level clearCache, compile, compilePartial, and render functions\n  // use this default writer.\n  var _writer = new Writer();\n\n  /**\n   * Clears all cached templates and partials in the default writer.\n   */\n  exports.clearCache = function () {\n    return _writer.clearCache();\n  };\n\n  /**\n   * Compiles the given `template` to a reusable function using the default\n   * writer.\n   */\n  exports.compile = function (template, tags) {\n    return _writer.compile(template, tags);\n  };\n\n  /**\n   * Compiles the partial with the given `name` and `template` to a reusable\n   * function using the default writer.\n   */\n  exports.compilePartial = function (name, template, tags) {\n    return _writer.compilePartial(name, template, tags);\n  };\n\n  /**\n   * Compiles the given array of tokens (the output of a parse) to a reusable\n   * function using the default writer.\n   */\n  exports.compileTokens = function (tokens, template) {\n    return _writer.compileTokens(tokens, template);\n  };\n\n  /**\n   * Renders the `template` with the given `view` and `partials` using the\n   * default writer.\n   */\n  exports.render = function (template, view, partials) {\n    return _writer.render(template, view, partials);\n  };\n\n  // This is here for backwards compatibility with 0.4.x.\n  exports.to_html = function (template, view, partials, send) {\n    var result = exports.render(template, view, partials);\n\n    if (typeof send === \"function\") {\n      send(result);\n    } else {\n      return result;\n    }\n  };\n\n  return exports;\n\n}())));","/home/travis/build/npmtest/node-npmtest-monitor-dashboard/node_modules/monitor-dashboard/lib/js/Template.js":"// Template.js (c) 2010-2014 Loren West and other contributors\n// May be freely distributed under the MIT license.\n// For further details and documentation:\n// http://github.com/lorenwest/monitor-dashboard\n(function(root){\n\n  // Module loading\n  var Monitor = root.Monitor || require('monitor'),\n      UI = Monitor.UI,\n      Mustache = UI.Mustache,\n      Backbone = Monitor.Backbone,\n      _ = Monitor._,\n      FileProbe = Monitor.FileProbe,\n      FS = Monitor.commonJS ? require('fs') : null;\n\n  /**\n  * Template management\n  *\n  * This class provides template lifecycle and execution management.\n  *\n  * Templates are text strings in Mustache format.  A JavaScript object or\n  * Backbone.Model object may be applied to the template using the ```apply()```\n  * method.  This returns a text string with parameters replaced by the data\n  * model values.\n  *\n  *     var templateText = 'Hello {{what}}';\n  *     var myTemplate = new UI.Template({text: templateText});\n  *     var myModel = {what: 'World'};\n  *     console.log(myTemplate.apply(myModel));\n  *\n  * Mustache man page: <a href=\"http://mustache.github.com/mustache.5.html\">http://mustache.github.com/mustache.5.html</a>\n  *\n  * If the template is constructed with raw text, or if the text element is set\n  * after construction, the template function will reflect the text element.\n  *\n  * If the template is constructed on the server using a filename, that file\n  * is watched for changes and automatically reloaded if the file changes.\n  *\n  * To provide consistent calling behavior, the first file load is synchronous\n  * and subsequent file loads (due to changes) are asynchronous.  This assures\n  * consistent calling semantics regardless of the template source.\n  *\n  * Since synchronous file loading is only appropriate during process startup,\n  * if instances are needed after process start, the asyncLoad parameter can\n  * be passed to the constructor, and the 'change:text' event can be monitored\n  * as notification that the template is ready.\n  *\n  * @class Template\n  * @extends Backbone.Model\n  * @constructor\n  * @param model - Initial data model.  Can be a JS object or another Model\n  *   @param [model.id] {String} A unique identifier for this template\n  *   @param [model.text] {String} The raw template text\n  *   @param [model.path] {String} The full path to a template file (server side only)\n  *   @param [model.asyncLoad=false] {Boolean} Should the initial file load be asynchronous?\n  *   @param [model.watchFile=true] {Boolean} Should the file specified by path be watched for changes?\n  *   @param [model.compiled] {Function} The compiled template function\n  */\n  var Template = UI.Template = Backbone.Model.extend({\n\n    defaults:  {\n      id: null, path:null, asyncLoad:false, text:null, watchFile: true, compiled:null\n    },\n\n    // Initialize the template\n    initialize: function(params, options) {\n      var t = this;\n\n      // If raw text was sent to the template, compile and return\n      if (t.get('text')) {\n        t.compile();\n        return;\n      }\n\n      // Watch for changes in the text element\n      t.on('change:text', t.compile, t);\n\n      // Process a file template\n      var path = t.get('path');\n      if (path) {\n        // Load the file\n        if (t.asyncLoad) {\n          FS.readFile(path, function(err, text) {\n            if (err) {\n              return console.error('Error reading file: ' + path, err);\n            }\n            t.set({text: text.toString()});\n          });\n        } else {\n          t.set({text: FS.readFileSync(path).toString()});\n        }\n\n        // Watch the file for changes\n        if (t.get('watchFile')) {\n          t._watchFile();\n        }\n      }\n    },\n\n    /**\n    * Watch the file for changes\n    *\n    * This sets up a watcher for the file specified in the ```path``` element.\n    * It is called by the constructor if the ```watchFile``` data element is true.\n    *\n    * @private\n    * @method _watchFile\n    */\n    _watchFile: function() {\n      var t = this, path = t.get('path');\n      t.watcher = FileProbe.watchLoad(path, {persistent: true}, function(error, content) {\n        if (!error) {\n          t.set('text', content);\n        }\n      });\n    },\n\n    /**\n    * Stop watching for file changes\n    *\n    * @method unWatchFile\n    */\n    unWatchFile: function() {\n      var t = this;\n      if (t.watcher) {\n        t.watcher.close();\n        t.watcher = null;\n      }\n    },\n\n    /**\n    * Apply the parameters to the template\n    *\n    * This accepts an object and returns the template with the parameters\n    * applied.\n    *\n    * @method apply\n    * @param params {Object or Backbone.Model} Parameters to apply to the template\n    * @return {String} The template text with parameters applied\n    */\n    apply: function(params) {\n      var t = this, text = t.get('text'), compiled = t.get('compiled');\n\n      // Convert parameters to JS object if they're a backbone model\n      if (params instanceof Backbone.Model) {\n        params = params.toJSON();\n      }\n\n      // Compile the template if necessary\n      if (!compiled) {\n        compiled = t.compile();\n      }\n\n      // Apply the template\n      return compiled(params);\n    },\n\n    /**\n    * Compile the text element into the compiled element\n    *\n    * @protected\n    * @method compile\n    * @return {Function} Compiled function ready to call\n    */\n    compile: function() {\n      var t = this, text = t.get('text');\n      var compiled = Mustache.compile(text);\n      t.set({compiled: compiled});\n      return compiled;\n    }\n\n  });\n\n  /**\n  * Build a new Template object from the contents of DOM\n  *\n  * This builds a new Template object, and sets the text element\n  * to the contents of the specified DOM HTML.\n  *\n  * It can only be run on the client.\n  *\n  * @static\n  * @method fromDOM\n  * @param selector {String} DOM selector\n  * @return {Template} The new template object\n  */\n  Template.fromDOM = function(selector) {\n    return new Template({text: $(selector).html()});\n  };\n\n  /**\n  * Indent (or un-indent) text by a specified number of characters\n  *\n  * If the numChars parameter is negative, un-indent.\n  *\n  * @static\n  * @method indent\n  * @param text {String} Text string\n  * @param numChars {Integer} Number of characters to indent or un-indent\n  * @return {String} The indented text\n  */\n  Template.indent = function(text, numChars) {\n    for (var i = 0, indent = ''; i < Math.abs(numChars); i++) {indent += ' ';}\n    if (numChars <= 0) {\n      // Un-indent\n      var re = new RegExp('^' + indent, 'mg');\n      return text.replace(re, '');\n    } else {\n      // Indent\n      var blankLastLine = new RegExp('\\n' + indent + '$');\n      return text.replace(/^/mg, indent).replace(blankLastLine, '\\n');\n    }\n  };\n\n  /**\n  * Constructor for a list of Template objects\n  *\n  *     var myList = new Template.List(initialElements);\n  *\n  * @static\n  * @method List\n  * @param [items] {Array} Initial list items.  These can be raw JS objects or Template data model objects.\n  * @return {Backbone.Collection} Collection of Template data model objects\n  */\n  Template.List = Backbone.Collection.extend({model: Template});\n\n}(this));\n","/home/travis/build/npmtest/node-npmtest-monitor-dashboard/node_modules/monitor-dashboard/lib/js/Site.js":"// Site.js (c) 2010-2014 Loren West and other contributors\n// May be freely distributed under the MIT license.\n// For further details and documentation:\n// http://github.com/lorenwest/monitor-dashboard\n(function(root){\n\n  // Module loading\n  var Monitor = root.Monitor || require('monitor'),\n      UI = Monitor.UI,\n      Backbone = Monitor.Backbone, _ = Monitor._;\n\n  /**\n  * This represents the Node.js Monitor web site\n  *\n  * @class Site\n  * @extends Backbone.Model\n  * @constructor\n  * @param model - Initial data model.  Can be a JS object or another Model.\n  *     @param [model.name] {String} The site name\n  *     @param [model.logo] {String} URL to the site logo\n  *     @param [model.favicon] {String} URL to the favicon\n  *     @param [model.css] {String} CSS overrides to apply to all pages\n  *     @param [model.tours] {Tour.List} All tours registered on the site (less the pages)\n  */\n  var Site = UI.Site = Backbone.Model.extend({\n\n    defaults: {\n      id: 'default',\n      name:'Node Monitor',\n      logo:'/static/css/default/images/monitor.jpg',\n      favicon: '/static/css/default/images/favicon.ico',\n      css: '',\n      tours: []\n    },\n    sync: new Monitor.Sync('Site')\n\n  });\n\n}(this));\n","/home/travis/build/npmtest/node-npmtest-monitor-dashboard/node_modules/monitor-dashboard/lib/js/Component.js":"/*global window document $ localStorage alert*/\n\n// Component.js (c) 2010-2014 Loren West and other contributors\n// May be freely distributed under the MIT license.\n// For further details and documentation:\n// http://github.com/lorenwest/monitor-dashboard\n(function(root){\n\n  // Module loading\n  var Monitor = root.Monitor || require('monitor'),\n      UI = Monitor.UI,\n      Backbone = Monitor.Backbone,\n      _ = Monitor._;\n\n  /**\n  * An element on the page canvas\n  *\n  * Components represent the visual elements on a page.  They contain the data\n  * necessary to instantiate a Java view, and a single monitor to provide data\n  * to the view.\n  *\n  * A component contains and persists information required to instantiate, position,\n  * and connect a Backbone View with a Monitor (as the data model for the view).\n  *\n  * @class Component\n  * @extends Backbone.Model\n  * @constructor\n  * @param model - Initial data model.  Can be a JS object or another Model.\n  *     @param model.id {String} - Name of the component within the form\n  *     @param model.viewClass {String} - Class name of the view (must be exposed on the Monitor.UI class)\n  *     @param model.viewOptions {Backbone.Model} - Options passed on to the view constructor\n  *         @param model.viewOptions.title {String} - Component title to display\n  *         @param model.viewOptions.background {boolean} - Display the component background?\n  *     @param model.monitor {Monitor} - The monitor attached to the component (always there)\n  *     @param model.css {Object} - Map of CSS selector to CSS styles to apply to the component\n  *     @param model.notes {String} - Notes associated with the view\n  *     @param model.onInit {String} - JavaScript to run when the view and monitor model have been initialized and rendered.\n  *       The JS has access to the local variables:\n  *         view - The rendered view object\n  *         monitor - The Monitor object\n  *         pageView - The PageView object representing the web page\n  *       ```this``` is the ComponentView object.\n  */\n  var Component = UI.Component = Backbone.Model.extend({\n\n    defaults: {\n      id:'',\n      viewClass:'',\n      viewOptions:{},\n      monitor: {},\n      css:{},\n      notes:'',\n      onInit: ''\n    },\n\n    initialize: function(params, options) {\n      var t = this;\n\n      // Attach sub-model containment\n      UI.containedModel(t, 'viewOptions', Backbone.Model);\n      UI.containedModel(t, 'monitor', Monitor);\n    },\n\n    /**\n    * Set the default component size\n    *\n    * This will add CSS to set the component size if it hasn't already been set.\n    *\n    * @method setDefaultSize\n    * @param size {Object}\n    *     @param size.height {Integer} Default height\n    *     @param size.width {Integer} Default width\n    */\n    setDefaultSize: function(size) {\n      var t = this,\n          css = _.clone(t.get('css')),\n          parsedCss = $.parseStyleString(css['.nm-cv-viewport'] || '');\n      if (!parsedCss.height && !parsedCss.width) {\n        parsedCss.height = size.height + 'px';\n        parsedCss.width = size.width + 'px';\n        css['.nm-cv-viewport'] = $.makeStyleString(parsedCss);\n        t.set({css: css});\n      }\n    },\n\n    // Overridden to produce only the persistent portion of the page\n    toJSON: function(options) {\n      var t = this,\n          opts = _.extend({trim:true, deep:true, monitorOnly:true}, options),\n          raw = Backbone.Model.prototype.toJSON.call(t, opts);\n\n      // Keep only the monitor portion (strip the probe portion)?\n      if (opts.monitorOnly) {\n        raw.monitor = t.get('monitor').toMonitorJSON(opts);\n      }\n      return raw;\n    }\n\n\n  });\n\n  /**\n  * Constructor for a list of Component objects\n  *\n  *     var myList = new Component.List(initialElements);\n  *\n  * @static\n  * @method List\n  * @param [items] {Array} Initial list items.  These can be raw JS objects or Component data model objects.\n  * @return {Backbone.Collection} Collection of Component data model objects\n  */\n  Component.List = Backbone.Collection.extend({model: Component});\n\n}(this));\n","/home/travis/build/npmtest/node-npmtest-monitor-dashboard/node_modules/monitor-dashboard/lib/js/Page.js":"// Page.js (c) 2010-2014 Loren West and other contributors\n// May be freely distributed under the MIT license.\n// For further details and documentation:\n// http://github.com/lorenwest/monitor-dashboard\n(function(root){\n\n  // Module loading\n  var Monitor = root.Monitor || require('monitor'),\n      UI = Monitor.UI,\n      Component = UI.Component,\n      Backbone = Monitor.Backbone, _ = Monitor._;\n\n  /**\n  * A page on the node_monitor site\n  *\n  * All pages on the node_monitor site are dynamically defined, and represented\n  * by an instance of this class.\n  *\n  * @class Page\n  * @extends Backbone.Model\n  * @constructor\n  * @param model - Initial data model.  Can be a JS object or another Model.\n  *     @param model.id {String} The page url within the site\n  *     @param [model.title] {String} The page title\n  *     @param [model.description] {String} Description of the page\n  *     @param [model.notes] {String} Page notes\n  *     @param model.onInit {String} - JavaScript to run when the Page model and PageView have been initialized and rendered.\n  *       The JS has access to two local variables: pageModel and pageView.\n  *     @param [model.css] {Object} - Key/value map of CSS selector to CSS overrides to apply to the entire page\n  *     @param [model.components] {Component.List} - List of components on the page\n  */\n  var Page = UI.Page = Backbone.Model.extend({\n\n    defaults: {\n      id:'',\n      title:'',\n      description:'',\n      notes:'',\n      onInit:'',\n      css:{},\n      components:[]\n    },\n    sync: new Monitor.Sync('Page'),\n\n    initialize: function(params, options) {\n      var t = this;\n      UI.containedModel(t, 'components', Component.List);\n    },\n\n    /**\n    * Add a new component to the Page model by component class\n    *\n    * This uses the default component attributes\n    *\n    * @method addComponent\n    * @param viewClass - Class name for the main view in the component\n    * @return component - The newly instantiated component\n    */\n    addComponent: function(viewClass) {\n      var t = this,\n          newIdNum = 1,\n          components = t.get('components'),\n          classParts = viewClass.split('.'),\n          appName = classParts[0],\n          appView = classParts[1];\n\n      // Instantiate and add the component\n      var component = new Component({\n        id: Monitor.generateUniqueCollectionId(components, 'c'),\n        viewClass: viewClass,\n        viewOptions: UI.app[appName][appView].prototype.defaultOptions,\n        css: {\n          '.nm-cv': 'top:10px;'\n        }\n      });\n      components.add(component);\n      return component;\n    },\n\n    // Overridden to override some options\n    toJSON: function(options) {\n      var t = this,\n          opts = _.extend({trim:true, deep:true}, options),\n          raw = Backbone.Model.prototype.toJSON.call(t, opts);\n      return raw;\n    }\n\n  });\n\n  /**\n  * Constructor for a list of Page objects\n  *\n  *     var myList = new Page.List(initialElements);\n  *\n  * @static\n  * @method List\n  * @param [items] {Array} Initial list items.  These can be raw JS objects or Page data model objects.\n  * @return {Backbone.Collection} Collection of Page data model objects\n  */\n  Page.List = Backbone.Collection.extend({model: Page});\n\n}(this));\n","/home/travis/build/npmtest/node-npmtest-monitor-dashboard/node_modules/monitor-dashboard/lib/js/Tree.js":"// Tree.js (c) 2010-2014 Loren West and other contributors\n// May be freely distributed under the MIT license.\n// For further details and documentation:\n// http://github.com/lorenwest/monitor-dashboard\n(function(root){\n\n  // Module loading\n  var Monitor = root.Monitor || require('monitor'),\n      UI = Monitor.UI,\n      Backbone = Monitor.Backbone,\n      _ = Monitor._;\n\n  /**\n  * A data tree\n  *\n  * A tree is a hierarchical representation of objects.  Each node in the\n  * tree contains a list of objects representing leaves, and a list of other\n  * tree objects representing branches.\n  *\n  * This model is designed for interactive use in a view.  It contains elements\n  * representing visual state such as open/closed.\n  *\n  * @class Tree\n  * @extends Backbone.Model\n  * @constructor\n  * @param model - Initial data model.  Can be a JS object or another Model.\n  *     @param model.id {String} - The identifier for this node (relative to parent).  Required.\n  *     @param [model.label=''] {String} - The display label (if different from the ID)\n  *     @param [model.description=''] {String} - The node extended description\n  *     @param model.branches {Tree.List} - Ordered list of branches.\n  *     @param model.leaves {Backbone.Collection} - Ordered list of objects at this level.\n  *     @param [model.isOpen=false] {boolean} - Is this currently visually opened?\n  */\n  var Tree = UI.Tree = Backbone.Model.extend({\n\n    defaults: {\n      id:'',\n      label: '',\n      description: ''\n      // Don't default these because sub-tree branches aren't set in monitors\n      // and defaulting them would clear out existing values.\n      // branches: [],\n      // leaves: [],\n      // isOpen: false\n    },\n\n    initialize: function(params, options) {\n      var t = this;\n\n      // Connect sub-models if present\n      if (t.has('leaves')) {\n        UI.containedModel(t, 'leaves', Backbone.Collection);\n      }\n      if (t.has('branches')) {\n        UI.containedModel(t, 'branches', Tree.List);\n      }\n    },\n\n    /*\n    * Get a tree node by path\n    *\n    * @method getByPath\n    * @param path {String | Array} Path to the node (Path parts, or a string with '/' separators)\n    * @return {Backbone.Model} The node at the specified path (or null if it doesn't exist)\n    */\n    getByPath: function(path) {\n      var t = this;\n\n      // Get the parts\n      var parts = Array.isArray(path) ? path : path.split('/').filter(function(item){return item;});\n\n      // Return the item at this level\n      if (parts.length === 1) {\n        return t.get('leaves').get(parts[0]);\n      }\n\n      // Return the item from the tree below\n      var sub = t.get('branches').get(parts[0]);\n      if (sub) {\n        return sub.getByPath(parts.slice(1));\n      }\n\n      // Branch not found\n      return null;\n    },\n\n    /*\n    * Attach a TreeNode monitor to this node in the tree\n    *\n    * This watches for changes in the monitor, calling the\n    * onMonitorChange method when it detects a change in the monitor.\n    *\n    * @method attachMonitor\n    * @param monitor {Monitor} A Monitor to watch for changes on.\n    */\n    attachMonitor: function(monitor) {\n      var t = this;\n\n      // Detach any prior monitor\n      if (t.monitor) {\n        t.detachMonitor();\n      }\n\n      // Watch for changes\n      t.monitor = monitor;\n      t.monitor.on('change', t.onMonitorChange, t);\n    },\n\n    /*\n    * Is there a monitor attached to this node?\n    *\n    * @method hasMonitor\n    * @return monitored {boolean} True if there is a monitor on this node\n    */\n    hasMonitor: function() {\n      var t = this;\n      return t.monitor ? true : false;\n    },\n\n    /*\n    * Merge monitor changes into this node.\n    *\n    * This can be called to synchronize the monitor contents with\n    * this tree node.\n    *\n    * @method onMonitorChange\n    */\n    onMonitorChange: function() {\n      var t = this,\n          monitor = t.monitor;\n\n      // Default leaves & branches when the monitor comes back\n      if (!t.has('leaves')) {\n        t.set('leaves',[]);\n        UI.containedModel(t, 'leaves', Backbone.Collection);\n      }\n      if (!t.has('branches')) {\n        t.set('branches',[]);\n        UI.containedModel(t, 'branches', Tree.List);\n      }\n\n      // Update leaves and branches using the Backbone\n      // collection update command.  This performs add/delete\n      // as necessary.\n      if (monitor.has('leaves')) {\n        t.get('leaves').update(monitor.get('leaves'));\n      }\n      if (monitor.has('branches')) {\n        // Use the UI.Collection.set() vs. Collection.update() to keep\n        // deep event listeners in place.\n        t.get('branches').set(monitor.get('branches'));\n      }\n\n    },\n\n    /*\n    * Detach the TreeNode monitor from this node in the tree\n    *\n    * This detaches the currently attached monitor from this tree node.\n    *\n    * @method detachMonitor\n    */\n    detachMonitor: function() {\n      var t = this;\n\n      // Detach any prior monitor\n      if (t.monitor) {\n        t.monitor.off('change', t.onMonitorChange, t);\n        delete t.monitor;\n      }\n    }\n\n  });\n\n  /**\n  * Constructor for a list of Tree objects\n  *\n  *     var myList = new Tree.List(initialElements);\n  *\n  * @static\n  * @method List\n  * @param [items] {Array} Initial list items.  These can be raw JS objects or Tree data model objects.\n  * @return {Backbone.Collection} Collection of Tree data model objects\n  */\n  Tree.List = Backbone.Collection.extend({model: Tree});\n\n}(this));\n","/home/travis/build/npmtest/node-npmtest-monitor-dashboard/node_modules/monitor-dashboard/lib/js/Tour.js":"// Tour.js (c) 2010-2014 Loren West and other contributors\n// May be freely distributed under the MIT license.\n// For further details and documentation:\n// http://github.com/lorenwest/monitor-dashboard\n(function(root){\n\n  // Module loading\n  var Monitor = root.Monitor || require('monitor'),\n      UI = Monitor.UI,\n      Component = UI.Component,\n      Backbone = Monitor.Backbone, _ = Monitor._;\n\n  /**\n  * A site tour on the node_monitor site\n  *\n  * Tours are an ordered sequence of pages on the site.  They can be used\n  * to explore features, or for hands-off paging through dashboards.\n  *\n  * @class Tour\n  * @extends Backbone.Model\n  * @constructor\n  * @param model - Initial data model.  Can be a JS object or another Model.\n  *     @param model.id {String} The unique tour key\n  *     @param [model.title] {String} The display name for the tour\n  *     @param [model.description] {String} Description of the tour\n  *     @param model.pages [Array] - Array of pages in the tour\n  *         @param model.pages.title - Page title\n  *         @param model.pages.url - Page URL\n  *     @param [model.autoNextSec=0] {Number} - Number of seconds to stay on a page\n  *         before navigating to the next page.  0=no autoNext.\n  */\n  var Tour = UI.Tour = Backbone.Model.extend({\n\n    defaults: {\n      id:'',\n      title:'',\n      description:'',\n      autoNextSec: 10,\n      pages:[]\n    },\n    sync: new Monitor.Sync('Tour'),\n\n    initialize: function(params, options) {\n      var t = this;\n    }\n\n  });\n\n  /**\n  * Constructor for a list of Tour objects\n  *\n  *     var myList = new Tour.List(initialElements);\n  *\n  * @static\n  * @method List\n  * @param [items] {Array} Initial list items.  These can be raw JS objects or Tour data model objects.\n  * @return {Backbone.Collection} Collection of Tour data model objects\n  */\n  Tour.List = Backbone.Collection.extend({model: Tour});\n\n}(this));\n","/home/travis/build/npmtest/node-npmtest-monitor-dashboard/node_modules/monitor-dashboard/lib/js/NetworkMap.js":"// NetworkMap.js (c) 2010-2014 Loren West and other contributors\n// May be freely distributed under the MIT license.\n// For further details and documentation:\n// http://github.com/lorenwest/monitor-dashboard\n(function(root){\n\n  // Module loading - this runs server-side only\n  var Monitor = root.Monitor || require('monitor'),\n      _ = Monitor._,\n      log = Monitor.getLogger('NetworkMap'),\n      Probe = Monitor.Probe;\n\n  /**\n  * Probe for exposing and managing the map of servers known to this network.\n  * This is designed to support client-side discovery for connecting a probe.\n  *\n  * The map looks like this:\n  *\n  *     hostName1: {\n  *       appName1: {\n  *         instances: [array, of, instance, ids],\n  *         probeClasses: ['array','of','available','probe','classes']\n  *       },\n  *       appName2: {...}\n  *     },\n  *     hostName2: {...}\n  *\n  * The 'localhost' server in the map represents this server process.\n  *\n  * @class NetworkMap\n  * @extends Probe\n  * @constructor\n  * @param [model] - Probe data model.\n  *     @param model.map {Object} Site map (see above for definition)\n  *\n  */\n  var NetworkMap = Monitor.NetworkMap = Probe.extend({\n\n    probeClass: 'NetworkMap',\n    defaults: {\n      map: {}\n    },\n\n    initialize: function(attributes, options){\n      var t = this,\n          router = Monitor.getRouter();\n\n      // Build the initial site map, updating as connections come and go\n      t.updateSequence = 0,\n      t.buildNetworkMap();\n      router.on('connection:add connection:remove', t.buildNetworkMap, t);\n    },\n\n    /**\n    * Attempt to add a server to the site map.\n    *\n    * This probe control is called to ping a montor server with the specified\n    * host name.  If a monitor server is available on the specified host, it\n    * will be added to the site map, causing the probe to be updated with the\n    * server information.\n    *\n    * @method pingServer_control\n    * @param hostName {String} Server host name\n    * @param callback {Function(error)}\n    *     @param callback.error {Mixed} Set if this couldn't connect with any\n    *            monitor processes on the specified server.\n    */\n    pingServer_control: function(hostName, callback) {\n\n      //\n      // Monitor.getRouter().addHostConnections(hostName, function(error) {\n      //   if (error) {callback(error);}\n    },\n\n    // This builds a new site map, and sets it into the map property\n    // if it is different from the current map.\n    buildNetworkMap: function() {\n      var t = this,\n          map = {},\n          router = Monitor.getRouter(),\n          hostName = Monitor.getRouter().getHostName(),\n          appName = Monitor.Config.Monitor.appName,\n          appInstance = process.env.NODE_APP_INSTANCE;\n\n      // Add this process to the map\n      map[hostName] = {};\n      map[hostName][appName] = {\n        instances: [appInstance],\n        probeClasses: _.keys(Probe.classes)\n      };\n\n      // Process all known connections\n      var connections = router.findConnections();\n      connections.forEach(function(connection) {\n        hostName = connection.get('hostName') || connection.get('remoteHostName');\n        appName = connection.get('remoteAppName') || '';\n        appInstance = connection.get('remoteAppInstance') || '';\n\n        // Don't add to the map not yet connected\n        if (connection.connecting || !connection.connected) {\n          return;\n        }\n\n        // Add the hostname to the map\n        var host = map[hostName];\n        if (!host) {\n          host = map[hostName] = {};\n        }\n\n        // Add the app to the map\n        var app = host[appName];\n        if (!app) {\n          app = host[appName] = {\n            instances: [appInstance],\n            probeClasses: connection.get('remoteProbeClasses')\n          };\n        } else {\n          app.instances.push(appInstance);\n        }\n      });\n      log.info('buildMap', map);\n\n      // Set the map if it's changed.  This method is called whenever\n      // connections come and go - including firewalled connections which\n      // aren't visible in the map.  Only update if the map has changed.\n      if (!_.isEqual(map, t.get('map'))) {\n        log.info('mapChanged');\n        t.set({\n          map: map,\n          updateSequence: t.updateSequence++\n        });\n      } else {\n        log.info('mapNotChanged');\n      }\n    },\n\n    // Remove event handlers on probe release\n    release: function() {\n      var t = this,\n          router = Monitor.getRouter();\n      router.off('connection:add connection:remove', t.buildNetworkMap, t);\n    }\n\n  });\n\n}(this));\n","/home/travis/build/npmtest/node-npmtest-monitor-dashboard/node_modules/monitor-dashboard/lib/js/Server.js":"/*global window document $ localStorage alert*/\n\n// Server.js (c) 2010-2014 Loren West and other contributors\n// May be freely distributed under the MIT license.\n// For further details and documentation:\n// http://github.com/lorenwest/monitor-dashboard\n(function(root){\n\n  // Module loading\n  var Monitor = require('monitor'),\n      UI = Monitor.UI,\n      $ = UI.$,\n      Backbone = Monitor.Backbone,\n      _ = Monitor._,\n      SyncProbe = Monitor.SyncProbe,\n      Mustache = Monitor.commonJS ? require('../ext/mustache-0.7.0-dev.js') : root.Mustache;\n      Page = UI.Page,\n      pageCache = new Page.List(),\n      Site = UI.Site,\n      Connect = require('connect'),\n      Config = require('config'),\n      GruntConfig = require('../../grunt'),\n      FS = require('fs'),\n      OS = require('os'),\n      Path = require('path'),\n      URL = require('url'),\n      log = Monitor.getLogger('Server'),\n      Template = UI.Template;\n\n  // Constants\n  var PAGE_PARAMS = {},\n      CSS_TEMPLATE   = Mustache.compile('\\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"{{{cssFile}}}\">'),\n      JS_TEMPLATE    = Mustache.compile('\\n    <script type=\"text/javascript\" src=\"{{{scriptFile}}}\"></script>'),\n      TMPL_TEMPLATE  = Mustache.compile('\\n      <div id=\"nm-template-{{id}}\">\\n{{{text}}}      </div>'),\n      PACKAGE_JSON   = JSON.parse(FS.readFileSync(__dirname + '/../../package.json'));\n\n  /**\n  * Server side support for the monitor UI.\n  *\n  * @module Server\n  */\n\n  /**\n  * Monitor user interface Server\n  *\n  * Instances of this class build a UI server listening on a port.  The server\n  * is created and set up during object initialization.\n  *\n  * @class Server\n  * @extends Backbone.Model\n  * @constructor\n  * @param model - Initial data model.  Can be a JS object or another Model\n  *   @param [model.port=4200] {Number} The server listens on this port\n  *   @param [model.allowExtrnalConnections=false] {boolean} Allow connections\n  *     from host processes outside this machine?\n  *   @param [model.server] {ConnectServer} A custom connect or express server\n  *   @param [model.templates] {Template.List} List of templates available to the server\n  */\n  var Server = UI.Server = Backbone.Model.extend({\n\n    defaults: _.extend({\n      port:4200,\n      allowExternalConnections: false,\n      siteDbPath: './site_db',\n      server:null,\n      templates:new Template.List()\n    }, Config.Monitor),\n\n    // Initialize the server\n    initialize: function(params, options) {\n      var t = this,\n          port = t.get('port'),\n          server = t.get('server'),\n          templates = t.get('templates'),\n          siteDbPath = t.get('siteDbPath'),\n          parentPath = siteDbPath.indexOf('.') === 0 ? process.cwd() : '';\n\n      // Distribute the site path to probes that need it\n      t.set('siteDbPath', Path.join(parentPath, siteDbPath));\n\n      // Initialize probes\n      SyncProbe.Config.defaultProbe = 'FileSyncProbe';\n      SyncProbe.FileSyncProbe.setRootPath(siteDbPath);\n\n      // Expose the current instance so probes running\n      // in this process can communicate with the server\n      UI.Server.currentServer = t;\n\n      // Internal (non-model) attributes\n      t.apps = {};  // Hash appName -> app data\n      t.site = null;   // Site model associated with the server\n\n      // Create a connect server if no custom server was specified\n      if (!server) {\n        server = new Connect();\n        t.set({server: server});\n      }\n\n      // Attach server components\n      server.use(t.siteRoute.bind(t));\n      server.use(Connect['static'](Path.join(__dirname, '/../..')));\n\n      // Create a static server to the monitor distribution\n      var monitorDistDir = require.resolve('monitor').replace(/lib[\\\\\\/]index.js/, 'dist');\n      t.monitorDist = Connect['static'](monitorDistDir);\n\n      // Initialize the template library\n      var gruntModules = GruntConfig.MODULE_DEF;\n      gruntModules.templates.sort().forEach(function(template){\n        var path = Path.normalize(__dirname + '/../../' + template);\n        var id = Path.basename(path, '.html');\n        templates.add({id:id, path:path});\n      });\n\n      // Build the page parameters from the config file\n      var styles = \"\", scripts=\"\";\n      gruntModules.client_css.forEach(function(cssFile) {\n        styles += CSS_TEMPLATE({cssFile: cssFile.replace('lib/','/static/')});\n      });\n      var clientScripts = gruntModules.client_ext.concat(gruntModules.shared_js.concat(gruntModules.client_js));\n      clientScripts.forEach(function(file) {\n        scripts += JS_TEMPLATE({scriptFile: file.replace('lib/','/static/')});\n      });\n      _.extend(PAGE_PARAMS, {\n        styles: styles, scripts: scripts, version: PACKAGE_JSON.version\n      });\n    },\n\n    /**\n    * Internal route for all non-static site endpoints\n    *\n    * @method siteRoute\n    * @param request {Connect.Request} The http request object\n    * @param response {Connect.Response} The http response object\n    * @param next {Function()} Function to pass control if this doesn't handle the url.\n    */\n    siteRoute: function(request, response, next) {\n      var t = this;\n\n      // URL rewrites\n      var url = URL.resolve('', request.url);\n      if (url === '/favicon.ico') {\n        var faviconUrl = t.site.get('favicon');\n        url = request.url = faviconUrl || request.url;\n      }\n\n      // Remove the leading slash for page manipulation\n      url = url.substr(1);\n\n      // Rewrite the url and forward if it points to static content\n      var urlParts = url.split('/');\n      if (urlParts[0] === 'static') {\n\n        // Replace static with lib, and put the leading slash back in\n        request.url = url.replace('static/', '/lib/');\n\n        // Forward to the monitor distribution\n        if (request.url.indexOf('monitor-all.js') > 0) {\n          request.url = '/monitor-all.js';\n          return t.monitorDist(request, response, next);\n        }\n\n        // Next is the static server\n        return next();\n      }\n\n      // If it's an URL to an app, route to the app\n      if (urlParts[0] === 'app') {\n        var appName = urlParts[1],\n            app = t.apps[appName];\n\n        // Route to a monitor page if the app doesn't handle the request\n        var appNext = function() {\n          t._monitorPageRoute(request, response, next);\n        };\n\n        // Continue if the app isn't defined\n        if (!app) {\n          return appNext();\n        }\n\n        // Make the app request relative to the app\n        var appUrl = '/' + url.split('/').slice(2).join('/'),\n            appRequest = _.extend({}, request, {url: appUrl});\n\n        // Forward the request to the app server\n        var server = typeof app.server === 'function' ? app.server : app.staticServer;\n        return server(appRequest, response, appNext);\n      }\n\n      // Forward to a monitor page\n      t._monitorPageRoute(request, response, next);\n    },\n\n    /**\n    * Route to a monitor page.\n    *\n    * @protected\n    * @method _monitorPageRoute\n    * @param request {Connect.Request} The http request object\n    * @param response {Connect.Response} The http response object\n    * @param next {Function()} Function to pass control if this doesn't handle the url.\n    */\n    _monitorPageRoute: function(request, response, next) {\n      var t = this,\n          url = request.url,\n          searchStart = url.indexOf('?'),\n          templates = t.get('templates');\n\n      // Remove any URL params\n      if (searchStart > 0) {\n        url = url.substr(0, searchStart);\n      }\n\n      // Get the page model\n      t._getPage(url, function(error, pageModel) {\n\n        if (error) {\n          return response.end('page error: ' + JSON.stringify(error));\n        }\n\n        // Build the object to put into the page template\n        var page = _.extend({templates:''}, PAGE_PARAMS, t.site.toJSON(), pageModel.toJSON());\n        page.pageParams = Template.indent(JSON.stringify(pageModel.toJSON({deep:true,trim:true}), null, 2), 8);\n\n        // Add all watched templates except the main page\n        templates.each(function(template) {\n          if (template.id !== 'UI') {\n            page.templates += TMPL_TEMPLATE({\n              id:template.id,\n              text:Template.indent(template.get('text'),8)\n            });\n          }\n        });\n\n        // Output the page\n        response.writeHead(200, {'Content-Type': 'text/html'});\n        var pageTemplate = templates.get('UI');\n        return response.end(pageTemplate.apply(page));\n      });\n    },\n\n    /**\n    * Get the specified page from cache\n    *\n    * This retrieves the page from cache, or puts it there.\n    *\n    * @method _getPage\n    * @param url {url} URL to the page\n    * @param callback {function(error, pageModel)} Called when complete\n    */\n    _getPage: function(url, callback) {\n      var t = this,\n          originalUrl = url,\n          page = null;\n\n      // Change urls that end in / to /index\n      if (url.substr(-1) === '/') {\n        url = url + 'index';\n      }\n\n      // Return if it's in cache\n      page = pageCache.get(url);\n      if (page) {\n        return callback(null, page);\n      }\n\n      // Read from storage\n      page = new Page({id: url});\n      page.fetch({liveSync: true, silenceErrors: true}, function(error) {\n\n        // Process a 404.  This returns a transient page copied from\n        // the default 404 page, with the id replaced by the specified url.\n        if (error && error.code === 'NOTFOUND' && url !== '/app/core/404') {\n\n          // Default the home page if notfound\n          if (originalUrl === '/') {\n            return t._getPage('/app/core/index', callback);\n          }\n\n          // Default the 404 page if notfound\n          if (originalUrl === '/404') {\n            return t._getPage('/app/core/404', callback);\n          }\n\n          // Otherwise it's a new page.  Create it.\n          t._getPage('/404', function(error, page404) {\n            if (error) {\n              console.error(\"Error loading the 404 page\", error);\n              return callback('404 page load error');\n            }\n\n            // Copy the 404 page into a new page\n            var newPage = new Page(JSON.parse(JSON.stringify(page404)));\n\n            // Build a sane starting title.  TitleCase the last url element, separate words, replace underscores\n            var title = $.titleCase(url.split('/').pop(), true).replace(/([A-Z])/g,\" $1\").replace(/^ /,'').replace(/_/g,' ');\n            var title = url.split('/').pop().replace(/([A-Z])/g,\" $1\").replace(/^ /,'').replace(/_/g,' ');\n            newPage.set({id:url, title:title, is404page:true});\n            callback(null, newPage);\n          });\n          return;\n        }\n\n        // Process other errors\n        if (error) {\n          return callback(error);\n        }\n\n        // Assure the page model ID is correct on disk\n        if (url !== page.get('id')) {\n          page.set('id', url);\n        }\n\n        // Put the page into cache and return it\n        pageCache.add(page);\n        return callback(null, page);\n      });\n    },\n\n    /**\n    * Start the UI server\n    *\n    * This method starts listening for incoming UI requests.\n    *\n    * @method start\n    * @param [callback] {Function(error)} - Called when the server has started\n    */\n    /**\n    * The server has started\n    *\n    * This event is fired when the server has begun listening for incoming\n    * web requests.\n    *\n    * @event start\n    */\n    /**\n    * A client error has been detected\n    *\n    * This event is fired if an error has been detected in the underlying\n    * transport.  It may indicate message loss.\n    *\n    * @event error\n    */\n    start: function(callback) {\n      callback = callback || function(){};\n      var t = this,\n          server = t.get('server'),\n          port = t.get('port'),\n          allowExternalConnections = t.get('allowExternalConnections');\n\n      // Allow connections from INADDR_ANY or LOCALHOST only\n      var host = allowExternalConnections ? '0.0.0.0' : '127.0.0.1';\n\n      // Start listening\n      server.listen(port, host, function(){\n\n        // Allow the UI server to be a Monitor gateway server\n        t.monitorServer = new Monitor.Server({server:server, gateway: true});\n        t.monitorServer.start(function(){\n\n          // Called after the site object is loaded\n          var onSiteLoad = function(error) {\n            if (error) {\n              return callback(error);\n            }\n\n            // Discover and initialize application modules\n            t.loadApps();\n\n            // Bind server events\n            t._bindEvents(callback);\n          };\n\n          // Load and keep the web site object updated\n          t.site = new Site();\n          t.site.fetch({liveSync: true, silenceErrors:true}, function(error) {\n\n            // Initialize the site if it's not found\n            if (error && error.code === 'NOTFOUND') {\n              t.site = new Site();\n              t.site.id = null;  // This causes a create vs. update on save\n              return t.site.save({}, {liveSync: true}, onSiteLoad);\n            } else if (error) {\n              return onSiteLoad(error);\n            }\n\n            // Bind server events once connected\n            onSiteLoad();\n          });\n        });\n      });\n    },\n\n    /**\n    * Bind incoming socket events to the server\n    *\n    * @protected\n    * @method _bindEvents\n    * @param callback {Function(error)} - Called when all events are bound\n    */\n    _bindEvents: function(callback) {\n\n      // Detect server errors\n      var t = this, server = t.get('server');\n      server.on('clientError', function(err){\n        console.error('Client error detected on server', err);\n        t.trigger('error', err);\n      });\n      server.on('close', function(err){\n        server.hasEmittedClose = true;\n        t.stop();\n      });\n\n      // Notify that we've started\n      t.isListening = true;\n      if (callback) {\n        callback(null);\n      }\n      t.trigger('start');\n    },\n\n    /**\n    * Discover and load all node_monitor application modules\n    *\n    * This is designed to run during server initialization, and is synchronous.\n    *\n    * @method loadApps\n    */\n    loadApps: function() {\n      var t = this;\n\n      // Test an app directory to see if it's a monitor app\n      var testAppDir = function(dir) {\n\n        // Load the package.json if it exists (and remove relative refs)\n        var pkg;\n        dir = Path.resolve(dir);\n        try {\n          pkg = JSON.parse(FS.readFileSync(dir + '/package.json', 'utf-8'));\n        } catch (e) {\n          // Report an error if the package.json has a parse problem.  This is\n          // good during app development to show why we didn't discover the app.\n          if (e.code !== \"ENOENT\") {\n             console.error(\"Problem parsing \" + dir + \"/package.json\");\n          }\n          return false;\n        }\n\n        // Is this a monitor-dashboard app?\n        var isMonitorApp = pkg.dependencies && _.find(_.keys(pkg.dependencies), function(keyword){ return keyword === 'monitor-dashboard'; });\n        if (!isMonitorApp) {\n          return false;\n        }\n\n        // This is a monitor-dashboard app.\n        return t.loadApp(dir, pkg);\n      };\n\n      // Process all apps under a node_modules directory\n      var loadNodeModulesDir = function(dir) {\n\n        // Return if the node_modules directory doesn't exist.\n        try {\n          FS.statSync(dir);\n        } catch (e) {return;}\n\n        // Check each direcory for a monitor-dashboard app\n        FS.readdirSync(dir).forEach(function(moduleName) {\n\n          // See if this is a monitor app, and load if it is\n          // then load sub-modules\n          var moduleDir = dir + '/' + moduleName;\n          if (testAppDir(moduleDir) || moduleName === 'monitor') {\n\n            // If it is a monitor-app, process any sub node_modules\n            loadNodeModulesDir(moduleDir + '/node_modules');\n          }\n        });\n      };\n\n      // Test this app as a monitor app\n      t.thisAppName = testAppDir('.');\n\n      // Process all possible node_module directories in the require path.\n      process.mainModule.paths.forEach(loadNodeModulesDir);\n\n    },\n\n    /**\n    * Load the specified app\n    *\n    * This is designed to run during server initialization, and is synchronous.\n    *\n    * @method loadApp\n    * @param moduleDir {String} The module directory that contains package.json\n    * @param packageJson {Object} The contents of the package.json file\n    */\n    loadApp: function(moduleDir, packageJson) {\n      var t = this,\n          resolved = null,\n          templates = t.get('templates');\n\n      // Remove the -monitor portion of the app\n      var appName = packageJson.name.replace(/-monitor$/,'');\n\n      // Don't overwrite a more \"locally\" defined app\n      if (t.apps[appName]) {\n        return false;\n      }\n\n      // The app module must be found\n      try {\n        resolved = require.resolve(moduleDir);\n      } catch (e) {\n        console.error(\"Problem loading plug-in: \" + moduleDir, e);\n        return false;\n      }\n\n      // Clear module cache for reloads\n      log.info('Loading app ' + appName + ' from ' + moduleDir);\n      delete require.cache[resolved];\n\n      // Load the module\n      var server;\n      try {\n        server = require(resolved);\n      } catch (e) {\n        console.error('Problem loading the \"' + appName + '\" module: ', e.stack);\n        return false;\n      }\n\n      var views = {}, // key: view name, value: {icon:'iconfile'}\n          css = [],\n          images = {}, // key: basename, value: filename\n          appPath = '/app/' + appName + '/';\n\n      // Add extensions\n      try {\n        FS.readdirSync(moduleDir + '/lib/ext').sort().forEach(function(filename) {\n          var ext = Path.extname(filename).toLowerCase();\n          var base = Path.basename(filename, ext);\n          if (ext === '.js') {\n            PAGE_PARAMS.scripts += JS_TEMPLATE({scriptFile: appPath + 'ext/' + filename});\n          }\n        });\n      } catch (e) {\n        if (e.code !== 'ENOENT') {\n          console.error('Error reading ' + moduleDir + '/lib/ext', e);\n        }\n      }\n\n      // Gather views to expose on the page\n      try {\n        FS.readdirSync(moduleDir + '/lib/view').sort().forEach(function(filename) {\n          var ext = Path.extname(filename).toLowerCase();\n          var base = Path.basename(filename, ext);\n          if (ext === '.js') {\n            views[base] = '';\n            PAGE_PARAMS.scripts += JS_TEMPLATE({scriptFile: appPath + 'view/' + filename});\n          }\n        });\n      } catch (e) {\n        if (e.code !== 'ENOENT') {\n          console.error('Error reading ' + moduleDir + '/lib/view', e);\n        }\n      }\n\n      // Gather CSS to expose on the page\n      try {\n        FS.readdirSync(moduleDir + '/lib/css').sort().forEach(function(filename) {\n          var ext = Path.extname(filename).toLowerCase();\n          var base = Path.basename(filename, ext);\n          if (ext === '.css') {\n            css.push(filename);\n            PAGE_PARAMS.styles += CSS_TEMPLATE({cssFile: appPath + 'css/' + filename});\n          }\n        });\n      } catch (e) {\n        if (e.code !== 'ENOENT') {\n          console.error('Error reading ' + moduleDir + '/lib/css', e);\n        }\n      }\n\n      // Gather templates to expose\n      try {\n        FS.readdirSync(moduleDir + '/lib/template').sort().forEach(function(filename) {\n          var ext = Path.extname(filename).toLowerCase();\n          var base = Path.basename(filename, ext);\n          if (ext === '.html') {\n            templates.add({id:appName + '-' + base, path:moduleDir + '/lib/template/' + filename});\n          }\n        });\n      } catch (e) {\n        if (e.code !== 'ENOENT') {\n          console.error('Error reading ' + moduleDir + '/lib/template', e);\n        }\n      }\n\n      // Gather images\n      try {\n        FS.readdirSync(moduleDir + '/lib/image').sort().forEach(function(filename) {\n          var ext = Path.extname(filename).toLowerCase();\n          var base = Path.basename(filename, ext);\n          if (ext.match('\\\\.jpg|\\\\.jpeg|\\\\.ico|\\\\.bmp|\\\\.tif|\\\\.tiff|\\\\.gif')) {\n            images[base] = appPath + 'image/' + filename;\n          }\n        });\n      } catch (e) {\n        if (e.code !== 'ENOENT') {\n          console.error('Error reading ' + moduleDir + '/lib/image', e);\n        }\n      }\n\n      // Match views to their icon image (if available)\n      for (var viewName in views) {\n        views[viewName] = {icon: images[viewName]};\n      }\n\n      // Record app information\n      t.apps[appName] = {\n        label: packageJson.label,\n        description: packageJson.description,\n        moduleDir: moduleDir,\n        server: server,\n        staticServer: Connect['static'](Path.join(moduleDir, '/view')),\n        views: views,\n        css: css\n      };\n\n      return appName;\n\n    },\n\n    /**\n    * Stop processing inbound web and monitor traffic\n    *\n    * This method stops accepting new inbound monitor connections, and closes\n    * all existing monitor connections associated with the server.\n    *\n    * @method stop\n    * @param callback {Function(error)} - Called when the server has stopped\n    */\n    /**\n    * The server has stopped\n    *\n    * This event is fired after the server has stopped accepting inbound\n    * connections, and has closed all existing connections and released\n    * associated resources.\n    *\n    * @event stop\n    */\n    stop: function(callback) {\n      var t = this, server = t.get('server');\n      callback = callback || function(){};\n\n      // Unwatch all template files\n      t.get('templates').forEach(function(template) {\n        template.unWatchFile();\n      });\n\n      // Don't stop more than once.\n      if (!t.isListening) {\n        return callback();\n      }\n\n      // Shut down the server\n      t.isListening = false;\n      t.monitorServer.stop(function(error) {\n        if (!error) {\n          // Disregard close exception\n          try {\n            server.close();\n          } catch (e) {}\n          t.trigger('stop');\n        }\n        return callback(error);\n      });\n    }\n  });\n\n  /**\n  * Constructor for a list of Server objects\n  *\n  *     var myList = new Server.List(initialElements);\n  *\n  * @static\n  * @method List\n  * @param [items] {Array} Initial list items.  These can be raw JS objects or Server data model objects.\n  * @return {Backbone.Collection} Collection of Server data model objects\n  */\n  Server.List = Backbone.Collection.extend({model: Server});\n\n  /**\n  * Route application objects to their application site_db.\n  *\n  * This hooks FileSync.getFullPath to return the path to the object under the app DB\n  */\n  process.nextTick(function(){\n    var proto = Monitor.SyncProbe.FileSyncProbe.prototype;\n    proto.origGetFullPath = proto.getFullPath;\n    proto.getFullPath = function(modelId, callback) {\n      var t = this,\n          fullPath = null;\n\n      // Forward to the original version if not an app object\n      if (modelId.indexOf('/app/') !== 0) {\n        return t.origGetFullPath(modelId, callback);\n      }\n\n      // Process an /app/{appName} type modelId\n      var parts = modelId.split('/'),\n          appName = parts[2],\n          appDef = UI.Server.currentServer.apps[appName];\n\n      // No app with that name.  Use original path.\n      if (!appDef) {\n        return t.origGetFullPath(modelId, callback);\n      }\n\n      // Set a different dirPath & forward to the original method for processing\n      parts.splice(1,2); // remove app/{appName} from the modelId\n      var appModelId = parts.join('/');\n      t.dirPath = Path.join(appDef.moduleDir, 'site_db', t.get('className'));\n      return t.origGetFullPath(appModelId, callback);\n    };\n  });\n\n}(this));\n","/home/travis/build/npmtest/node-npmtest-monitor-dashboard/node_modules/monitor-dashboard/lib/js/TreeProbe.js":"// TreeProbe.js (c) 2010-2014 Loren West and other contributors\n// May be freely distributed under the MIT license.\n// For further details and documentation:\n// http://github.com/lorenwest/monitor-dashboard\n(function(root){\n\n  // Module loading - this runs server-side only\n  var Monitor = root.Monitor || require('monitor'),\n      _ = Monitor._,\n      Backbone = Monitor.Backbone,\n      UI = Monitor.UI,\n      Tree = UI.Tree,\n      Probe = Monitor.Probe;\n\n  /**\n  * Abstract base class for a probe representing a node in a Tree\n  *\n  * The TreeView component, when used in conjunction with a TreeProbe\n  * can present a visual representation of the hierarchy in the browser.\n  *\n  * The *branches* and *leaves* elements of this probe represent the\n  * tree branches and leaves.  They must contain at least the *id*, but can\n  * also contain the optional *label* and *description* elements as well\n  * as any other metadata about the branch or leaf.\n  *\n  * Derived classes need only set the branches and leaves elements,\n  * and update as they detect changes.\n  *\n  * See the PagesProbe for an example implementation.\n  *\n  * @abstract\n  * @class TreeProbe\n  * @extends Probe\n  * @constructor\n  * @param [initParams] - Probe initialization parameters\n  *     @param [initParams.path=''] {String} Path to this node in the tree\n  */\n  var TreeProbe = Monitor.TreeProbe = Probe.extend({\n\n    // Set defaults\n    defaults: {\n      path:'',\n      leaves: [],\n      branches: []\n    },\n\n    /**\n    * Constructor initialization.\n    *\n    * @method initialize\n    */\n    initialize: function(attributes, options){\n      var t = this;\n\n      // Call parent constructor\n      Probe.prototype.initialize.apply(t, arguments);\n\n      // Turn leaves/branches into collections and forward changes to this model\n      UI.containedModel(t, 'leaves', Backbone.Collection);\n      UI.containedModel(t, 'branches', Backbone.Collection);\n    }\n\n  });\n\n}(this));\n","/home/travis/build/npmtest/node-npmtest-monitor-dashboard/node_modules/monitor-dashboard/lib/js/PagesProbe.js":"// PagesProbe.js (c) 2010-2014 Loren West and other contributors\n// May be freely distributed under the MIT license.\n// For further details and documentation:\n// http://github.com/lorenwest/monitor-dashboard\n(function(root){\n\n  // Module loading - this runs server-side only\n  var Monitor = root.Monitor || require('monitor'),\n      _ = Monitor._,\n      UI = Monitor.UI,\n      Path = require('path'),\n      FS = require('fs'),\n      TreeProbe = Monitor.TreeProbe,\n      FileProbe = Monitor.FileProbe;\n\n  // Define some constants\n  var CONST = {\n    objectClass: 'Page',\n    appLabel: 'App Pages',\n    appDescription: 'Application Pages'\n  };\n\n  /**\n  * This probe represents the pages and directories of a single\n  * node of the site.\n  *\n  * @class PagesProbe\n  * @extends TreeProbe\n  * @constructor\n  * @param [initParams] - Probe initialization parameters\n  *     @param [initParams.path=''] {String} Path to this node\n  */\n  var PagesProbe = Monitor.PagesProbe = TreeProbe.extend({\n\n    probeClass: 'PagesProbe',\n\n    /**\n    * Constructor initialization.\n    *\n    * @method initialize\n    */\n    initialize: function(attributes, options){\n      var t = this;\n      t.fileWatchers = {};\n\n      // Instance level constants (can be overridden in sub-classes)\n      t.CONST = t.CONST || CONST;\n\n      // Call parent constructor\n      TreeProbe.prototype.initialize.apply(t, arguments);\n\n      // Assume callback responsibility.\n      options.asyncInit = true;\n      var callback = options.callback;\n\n      // Set the root path from the Server's DB\n      t.rootPath = Path.join(UI.Server.currentServer.get('siteDbPath'), t.CONST.objectClass);\n\n      // Build the full path to the directory, possibly routed to an app DB\n      var path = t.get('path'),\n          parts = path.replace(/^[\\\\\\/]/,'').split('/'),\n          appName = parts[0] === 'app' ? parts[1] : null;\n      if (appName && UI.Server.currentServer.apps[appName]) {\n\n        // Build the dirPath from the module DB\n        var appDef = UI.Server.currentServer.apps[appName];\n        parts.splice(0,2);\n        t.dirPath = Path.join(appDef.moduleDir, 'site_db', t.CONST.objectClass, parts.join('/'));\n      }\n      else {\n\n        // Normal path - under the site_db/Page directory\n        t.dirPath = Path.join(t.rootPath, path);\n      }\n\n      // Go straight to sync (no stat/watch) if the path is the app directory\n      if (t.get('path') === '/app') {\n        return t.sync(callback);\n      }\n\n      // Watch the directory and synchronize objects in it.\n      // This is called after the FS.stat (below)\n      var watchSync = function() {\n        t.dirWatcher = FS.watch(t.dirPath, {persistent:false}, function(type){\n          t.sync();\n        });\n\n        // Synchronize this object with the directory.\n        t.sync(callback);\n      }\n\n      // Make sure the directory exists\n      FS.stat(t.dirPath, function(error, stat) {\n\n        // Create the directory if it doesn't exist\n        if (error && error.code == 'ENOENT') {\n          FileProbe.mkdir_r(t.dirPath, '0777', function(error) {\n            if (error) {\n              return callback(error);\n            }\n            // Created\n            return watchSync();\n          });\n          return;\n        }\n\n        // Other error than directory doesn't exist\n        if (error) {\n          return callback(error);\n        }\n\n        // This shouldn't happen\n        if (!stat.isDirectory()) {\n          return callback({err: 'Not a directory: ' + t.dirPath});\n        }\n\n        // Continue\n        return watchSync();\n      });\n    },\n\n    /**\n    * Release probe resources\n    */\n    release: function() {\n      var t = this;\n      if (t.dirWatcher) {\n        t.dirWatcher.close();\n        t.dirWatcher = null;\n      }\n      for (var pageId in t.fileWatchers) {\n        t.fileWatchers[pageId].close();\n      }\n      t.fileWatchers = {};\n    },\n\n    /**\n    * Synchronize the directory with this object\n    *\n    * @method sync\n    * @param callback {Function} Callback to call when complete\n    *     @param callback.error {Mixed} Set if anything goes wrong\n    */\n    sync: function(callback) {\n      var t = this,\n          dirs = [],\n          pages = [],\n          thisAppName = UI.Server.currentServer.thisAppName;\n      callback = callback || function(){};\n\n      // Synchronize the virtual /app directory\n      if (t.get('path') === '/app') {\n        for (var appName in UI.Server.currentServer.apps) {\n          // Don't add me to the /app directory if I'm an app\n          if (appName !== thisAppName) {\n            var app = UI.Server.currentServer.apps[appName];\n            dirs.push({\n              id: appName,\n              label: app.label || app.description || appName,\n              path: Path.join(app.moduleDir, 'site_db', t.CONST.objectClass)\n            });\n          }\n        }\n\n        // Trim directory branches that have no contents\n        t.trimDirs(dirs, function(error, trimmed) {\n          if (error) {\n            callback(error);\n          }\n          t.set({\n            leaves: pages,\n            branches: trimmed\n          });\n          return callback();\n        });\n        return;\n      }\n\n      // Get the directory at this level\n      FS.readdir(t.dirPath, function(error, fileNames) {\n\n        // Process errors\n        if (error) {\n          console.error('TreeProbe readdir error', error);\n          return callback(error);\n        }\n\n        // Don't show the main 404 page (it's too confusing)\n        if (t.CONST.objectClass === 'Page') {\n          fileNames = _.reject(fileNames, function(name){\n            return name === '404.json';\n          });\n        }\n\n        // Perform a stat on all files for meta-info\n        t.statFiles(fileNames, function(error, fileStats) {\n\n          // Process errors\n          if (error) {\n            console.error('TreeProbe statFiles error', error);\n            return callback(error);\n          }\n\n          // Process each file, recording directories and pages\n          for (var i = 0, l = fileStats.length; i < l; i++) {\n            var name = fileNames[i],\n                stat = fileStats[i],\n                id = Path.basename(name, '.json'),\n                page = {id:id};\n\n            if (stat.isDirectory()) {\n              page.path = Path.join(t.dirPath, name);\n              dirs.push(page);\n            }\n            else if (stat.isFile() && Path.extname(name).toLowerCase() === '.json') {\n              pages.push(page);\n            }\n            else {\n              console.error('Not a file or directory: ' + name);\n            }\n          }\n\n          // Read each page for the display label and description\n          t.readPages(pages, function(error) {\n\n            // Process errors\n            if (error) {\n              console.error('PagesProbe readPages error', error);\n              return callback(error);\n            }\n\n            // Add the virtual /app directory to the root\n            if (t.dirPath === t.rootPath) {\n              dirs.push({\n                id:'app',\n                label: t.CONST.appLabel,\n                description: t.CONST.appDescription,\n                path: Path.dirname(t.dirPath)\n              });\n            }\n\n            // Trim directory branches that have no contents\n            t.trimDirs(dirs, function(error, trimmed) {\n              if (error) {\n                callback(error);\n              }\n\n              t.set({\n                leaves: pages,\n                branches: trimmed\n              });\n              return callback();\n            });\n          });\n\n        });\n      });\n\n    },\n\n    /**\n    * Trim directories that have no content\n    *\n    * This accepts an array of objects, where each object must have a 'path' element.\n    * If no content is at the path, the object will be trimmed from the array.\n    *\n    * The path element will be removed after checking.\n    *\n    * @method trimDirs\n    * @param dirs {Object} An object that contains a 'path' element\n    * @param callback {function(error, trimmed)} Called when complete (or error)\n    */\n    trimDirs: function(dirs, callback) {\n      var t = this,\n          numLeft = dirs.length,\n          fileRegexp = /.json$/,\n          trimmed = [];\n\n      // Already trimmed\n      if (numLeft === 0) {\n        return callback(null, dirs);\n      }\n\n      // Process each directory\n      dirs.forEach(function(dir) {\n        t.hasContents(dir.path, fileRegexp, function(error, hasContents) {\n          if (error) {\n            numLeft = 0;\n            return callback(error);\n          }\n          delete dir.path;\n          if (hasContents) {\n            trimmed.push(dir);\n          }\n          if (--numLeft === 0) {\n            return callback(null, trimmed);\n          }\n        });\n      });\n    },\n\n\n    /**\n    * Determine if a directory has any contents.\n    *\n    * This will return true if any sub-directories with contents exist, or\n    * if any files with the specified RegExp exist.\n    *\n    * @method hasContents\n    * @param dirname {Path} Full path to the directory\n    * @param fileRegexp {RegExp} Regular expression to test for files\n    * @param callback {function(error, hasContents}} Regular expression to test for files\n    */\n    hasContents: function(dirname, fileRegexp, callback) {\n      var t = this;\n\n      // Get the directory at this level\n      FS.readdir(dirname, function(error, fileNames) {\n\n        // Process errors\n        if (error) {\n          console.error('Read dir error', error);\n          return callback(error);\n        }\n\n        // Process sequentially until content is found.\n        // If parallel, a deep scan would occur every time.\n        var dirsToCheck = [];\n        function checkNext() {\n\n          // Done checking all filenames\n          if (fileNames.length === 0) {\n\n            // Check directories, and return true if any have content\n            t.trimDirs(dirsToCheck, function(error, trimmed) {\n              return callback(error, trimmed.length > 0);\n            });\n            return;\n          }\n\n          // Stat the next entry\n          var filename = fileNames[0];\n          fileNames.splice(0,1);\n          var pathName = Path.join(dirname, filename);\n          FS.stat(pathName, function(error, stat) {\n            if (error) {\n              return callback(error);\n            }\n\n            // Check for directory content or if a file should be included\n            if (stat.isDirectory()) {\n              dirsToCheck.push({path:pathName});\n            }\n            else {\n              // There is content if a file exists and it matches an optional regexp\n              if (!fileRegexp || fileRegexp.test(filename)) {\n                return callback(null, true);\n              }\n            }\n\n            // Check the next filename\n            checkNext();\n          });\n        }\n\n        // Kick off the first check\n        checkNext();\n      });\n    },\n\n    /**\n    * Stat all the files, returning an array of file stats matching the\n    * array of input files.\n    *\n    * @method statFiles\n    * @param fileNames {Array} An array of filenames to stat (from this directory)\n    * @param callback {Function(error, stats)}\n    *     @param callback.error {Mixed} Set if an error occured\n    *     @param callback.stats {Array of Stat} An array of fs.stats objects\n    */\n    statFiles: function(fileNames, callback) {\n      var t = this,\n          stats = [],\n          didError = false,\n          numLeft = fileNames.length;\n\n      // No files to process\n      if (fileNames.length === 0) {\n        return callback(null, stats);\n      }\n\n      // Call stat on each file\n      fileNames.forEach(function(fileName, index) {\n        var fullPath = Path.join(t.dirPath, fileName);\n        FS.stat(fullPath, function(error, stat) {\n\n          // Process a stat error\n          if (error) {\n            didError = true;\n            return callback(error);\n          }\n\n          // Do nothing if a prior error callback happened\n          if (didError) {\n            return;\n          }\n\n          // Set this stat item\n          stats[index] = stat;\n\n          // Callback if all stats are complete\n          if (--numLeft === 0) {\n            callback(null, stats);\n          }\n        });\n      });\n\n    },\n\n    /**\n    * Add title (label) and description to the specified page objects.\n    *\n    * @method readPages\n    * @param pages {Array of Object} An array of objects with the id element set\n    * @param callback {Function(error)}\n    */\n    readPages: function(pages, callback) {\n      var t = this,\n          didError = false,\n          numLeft = pages.length;\n\n      // Callback early if no pages to read\n      if (pages.length === 0) {\n        return callback();\n      }\n\n      // Read and parse each file for the title/description\n      pages.forEach(function(page, index) {\n\n        // Read the file\n        var fullPath = Path.join(t.dirPath, page.id + '.json');\n        FS.readFile(fullPath, 'utf8', function(error, file) {\n\n          // Process a stat error\n          if (error) {\n            didError = true;\n            return callback(error);\n          }\n\n          // Parse the JSON\n          var parsed = null;\n          try {\n            parsed = JSON.parse(file);\n          }\n          catch (e) {\n            didError = true;\n            console.error('JSON error parsing page: ' + fullPath, e);\n            return callback(e);\n          }\n\n          // Do nothing if a prior error callback happened\n          if (didError) {\n            return;\n          }\n\n          // Set the page title and description\n          if (parsed.title) {\n            page.label = parsed.title;\n          }\n          if (parsed.description) {\n            page.description = parsed.description;\n          }\n\n          // Add a file watcher if not already watching\n          if (!t.fileWatchers[page.id]) {\n            t.fileWatchers[page.id] = new FS.watch(fullPath, {persistent:false}, function(type){\n              t.sync();\n            });\n          }\n\n          // Callback if all page reads are complete\n          if (--numLeft === 0) {\n            callback(null);\n          }\n        });\n      });\n    }\n\n  });\n\n}(this));\n","/home/travis/build/npmtest/node-npmtest-monitor-dashboard/node_modules/monitor-dashboard/lib/js/ToursProbe.js":"// ToursProbe.js (c) 2010-2014 Loren West and other contributors\n// May be freely distributed under the MIT license.\n// For further details and documentation:\n// http://github.com/lorenwest/monitor-dashboard\n(function(root){\n\n  // Module loading - this runs server-side only\n  var Monitor = root.Monitor || require('monitor'),\n      PagesProbe = Monitor.PagesProbe;\n\n  // Define some constants\n  var CONST = {\n    objectClass: 'Tour',\n    appLabel: 'App Tours',\n    appDescription: 'Application Tours'\n  };\n\n  /**\n  * This probe represents the list of tours available on the site\n  *\n  * @class ToursProbe\n  * @extends TreeProbe\n  * @constructor\n  * @param [initParams] - Probe initialization parameters\n  *     @param [initParams.path=''] {String} Path to this node\n  */\n  var ToursProbe = Monitor.ToursProbe = PagesProbe.extend({\n\n    probeClass: 'ToursProbe',\n\n    /**\n    * Constructor initialization.\n    *\n    * @method initialize\n    */\n    initialize: function(attributes, options){\n      var t = this;\n\n      // Override instance level constants\n      t.CONST = CONST;\n\n      // This is the same as a PagesProbe except for the constants (above)\n      PagesProbe.prototype.initialize.apply(t, arguments);\n    }\n\n  });\n\n}(this));\n","/home/travis/build/npmtest/node-npmtest-monitor-dashboard/node_modules/monitor-dashboard/config/default.js":"// Default configurations\nmodule.exports = {\n\n  // Overrides from the monitor package\n  Monitor: {\n    appName: 'MonitorDashboard',\n    consoleLogListener: {\n      pattern: \"{trace,warn,error,fatal}.*\"\n    }\n\n  },\n\n  // Dashboard application configurations\n  Dashboard: {\n\n    // The port to listen on for application traffic\n    port:4200,\n\n    // Only allow connections from this machine by default.  This reduces\n    // accidental security breaches by requiring you to consider your network\n    // security policies before allowing external connections.\n    // See the external.js file in this directory for more information.\n    allowExternalConnections: false,\n\n    // Path to the site database.  Paths that start with '.' are relative\n    // to process.cwd(), which is usually the application root directory.\n    siteDbPath: './site_db'\n  }\n\n}\n","/home/travis/build/npmtest/node-npmtest-monitor-dashboard/node_modules/monitor-dashboard/lib/ext/bootstrap-alert.js":"/* ==========================================================\n * bootstrap-alert.js v2.0.3\n * http://twitter.github.com/bootstrap/javascript.html#alerts\n * ==========================================================\n * Copyright 2012 Twitter, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ========================================================== */\n\n\n!function ($) {\n\n  \"use strict\"; // jshint ;_;\n\n\n /* ALERT CLASS DEFINITION\n  * ====================== */\n\n  var dismiss = '[data-dismiss=\"alert\"]'\n    , Alert = function (el) {\n        $(el).on('click', dismiss, this.close)\n      }\n\n  Alert.prototype.close = function (e) {\n    var $this = $(this)\n      , selector = $this.attr('data-target')\n      , $parent\n\n    if (!selector) {\n      selector = $this.attr('href')\n      selector = selector && selector.replace(/.*(?=#[^\\s]*$)/, '') //strip for ie7\n    }\n\n    $parent = $(selector)\n\n    e && e.preventDefault()\n\n    $parent.length || ($parent = $this.hasClass('alert') ? $this : $this.parent())\n\n    $parent.trigger(e = $.Event('close'))\n\n    if (e.isDefaultPrevented()) return\n\n    $parent.removeClass('in')\n\n    function removeElement() {\n      $parent\n        .trigger('closed')\n        .remove()\n    }\n\n    $.support.transition && $parent.hasClass('fade') ?\n      $parent.on($.support.transition.end, removeElement) :\n      removeElement()\n  }\n\n\n /* ALERT PLUGIN DEFINITION\n  * ======================= */\n\n  $.fn.alert = function (option) {\n    return this.each(function () {\n      var $this = $(this)\n        , data = $this.data('alert')\n      if (!data) $this.data('alert', (data = new Alert(this)))\n      if (typeof option == 'string') data[option].call($this)\n    })\n  }\n\n  $.fn.alert.Constructor = Alert\n\n\n /* ALERT DATA-API\n  * ============== */\n\n  $(function () {\n    $('body').on('click.alert.data-api', dismiss, Alert.prototype.close)\n  })\n\n}(window.jQuery);\n","/home/travis/build/npmtest/node-npmtest-monitor-dashboard/node_modules/monitor-dashboard/lib/ext/bootstrap-dropdown.js":"/* ============================================================\n * bootstrap-dropdown.js v2.0.3\n * http://twitter.github.com/bootstrap/javascript.html#dropdowns\n * ============================================================\n * Copyright 2012 Twitter, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ============================================================ */\n\n\n!function ($) {\n\n  \"use strict\"; // jshint ;_;\n\n\n /* DROPDOWN CLASS DEFINITION\n  * ========================= */\n\n  var toggle = '[data-toggle=\"dropdown\"]'\n    , Dropdown = function (element) {\n        var $el = $(element).on('click.dropdown.data-api', this.toggle)\n        $('html').on('click.dropdown.data-api', function () {\n          $el.parent().removeClass('open')\n        })\n      }\n\n  Dropdown.prototype = {\n\n    constructor: Dropdown\n\n  , toggle: function (e) {\n      var $this = $(this)\n        , $parent\n        , selector\n        , isActive\n\n      if ($this.is('.disabled, :disabled')) return\n\n      selector = $this.attr('data-target')\n\n      if (!selector) {\n        selector = $this.attr('href')\n        selector = selector && selector.replace(/.*(?=#[^\\s]*$)/, '') //strip for ie7\n      }\n\n      $parent = $(selector)\n      $parent.length || ($parent = $this.parent())\n\n      isActive = $parent.hasClass('open')\n\n      clearMenus()\n\n      if (!isActive) $parent.toggleClass('open')\n\n      return false\n    }\n\n  }\n\n  function clearMenus() {\n    $(toggle).parent().removeClass('open')\n  }\n\n\n  /* DROPDOWN PLUGIN DEFINITION\n   * ========================== */\n\n  $.fn.dropdown = function (option) {\n    return this.each(function () {\n      var $this = $(this)\n        , data = $this.data('dropdown')\n      if (!data) $this.data('dropdown', (data = new Dropdown(this)))\n      if (typeof option == 'string') data[option].call($this)\n    })\n  }\n\n  $.fn.dropdown.Constructor = Dropdown\n\n\n  /* APPLY TO STANDARD DROPDOWN ELEMENTS\n   * =================================== */\n\n  $(function () {\n    $('html').on('click.dropdown.data-api', clearMenus)\n    $('body')\n      .on('click.dropdown', '.dropdown form', function (e) { e.stopPropagation() })\n      .on('click.dropdown.data-api', toggle, Dropdown.prototype.toggle)\n  })\n\n}(window.jQuery);\n","/home/travis/build/npmtest/node-npmtest-monitor-dashboard/node_modules/monitor-dashboard/lib/ext/bootstrap.js":"/* ===================================================\n * bootstrap-transition.js v2.0.4\n * http://twitter.github.com/bootstrap/javascript.html#transitions\n * ===================================================\n * Copyright 2012 Twitter, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ========================================================== */\n\n\n!function ($) {\n\n  $(function () {\n\n    \"use strict\"; // jshint ;_;\n\n\n    /* CSS TRANSITION SUPPORT (http://www.modernizr.com/)\n     * ======================================================= */\n\n    $.support.transition = (function () {\n\n      var transitionEnd = (function () {\n\n        var el = document.createElement('bootstrap')\n          , transEndEventNames = {\n               'WebkitTransition' : 'webkitTransitionEnd'\n            ,  'MozTransition'    : 'transitionend'\n            ,  'OTransition'      : 'oTransitionEnd'\n            ,  'msTransition'     : 'MSTransitionEnd'\n            ,  'transition'       : 'transitionend'\n            }\n          , name\n\n        for (name in transEndEventNames){\n          if (el.style[name] !== undefined) {\n            return transEndEventNames[name]\n          }\n        }\n\n      }())\n\n      return transitionEnd && {\n        end: transitionEnd\n      }\n\n    })()\n\n  })\n\n}(window.jQuery);\n/* =========================================================\n * bootstrap-modal.js v2.0.4\n * http://twitter.github.com/bootstrap/javascript.html#modals\n * =========================================================\n * Copyright 2012 Twitter, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ========================================================= */\n\n\n!function ($) {\n\n  \"use strict\"; // jshint ;_;\n\n\n /* MODAL CLASS DEFINITION\n  * ====================== */\n\n  var Modal = function (content, options) {\n    this.options = options\n    this.$element = $(content)\n      .delegate('[data-dismiss=\"modal\"]', 'click.dismiss.modal', $.proxy(this.hide, this))\n  }\n\n  Modal.prototype = {\n\n      constructor: Modal\n\n    , toggle: function () {\n        return this[!this.isShown ? 'show' : 'hide']()\n      }\n\n    , show: function () {\n        var that = this\n          , e = $.Event('show')\n\n        this.$element.trigger(e)\n\n        if (this.isShown || e.isDefaultPrevented()) return\n\n        $('body').addClass('modal-open')\n\n        this.isShown = true\n\n        escape.call(this)\n        backdrop.call(this, function () {\n          var transition = $.support.transition && that.$element.hasClass('fade')\n\n          if (!that.$element.parent().length) {\n            that.$element.appendTo(document.body) //don't move modals dom position\n          }\n\n          that.$element\n            .show()\n\n          if (transition) {\n            that.$element[0].offsetWidth // force reflow\n          }\n\n          that.$element.addClass('in')\n\n          transition ?\n            that.$element.one($.support.transition.end, function () { that.$element.trigger('shown') }) :\n            that.$element.trigger('shown')\n\n        })\n      }\n\n    , hide: function (e) {\n        e && e.preventDefault()\n\n        var that = this\n\n        e = $.Event('hide')\n\n        this.$element.trigger(e)\n\n        if (!this.isShown || e.isDefaultPrevented()) return\n\n        this.isShown = false\n\n        $('body').removeClass('modal-open')\n\n        escape.call(this)\n\n        this.$element.removeClass('in')\n\n        $.support.transition && this.$element.hasClass('fade') ?\n          hideWithTransition.call(this) :\n          hideModal.call(this)\n      }\n\n  }\n\n\n /* MODAL PRIVATE METHODS\n  * ===================== */\n\n  function hideWithTransition() {\n    var that = this\n      , timeout = setTimeout(function () {\n          that.$element.off($.support.transition.end)\n          hideModal.call(that)\n        }, 500)\n\n    this.$element.one($.support.transition.end, function () {\n      clearTimeout(timeout)\n      hideModal.call(that)\n    })\n  }\n\n  function hideModal(that) {\n    this.$element\n      .hide()\n      .trigger('hidden')\n\n    backdrop.call(this)\n  }\n\n  function backdrop(callback) {\n    var that = this\n      , animate = this.$element.hasClass('fade') ? 'fade' : ''\n\n    if (this.isShown && this.options.backdrop) {\n      var doAnimate = $.support.transition && animate\n\n      this.$backdrop = $('<div class=\"modal-backdrop ' + animate + '\" />')\n        .appendTo(document.body)\n\n      if (this.options.backdrop != 'static') {\n        this.$backdrop.click($.proxy(this.hide, this))\n      }\n\n      if (doAnimate) this.$backdrop[0].offsetWidth // force reflow\n\n      this.$backdrop.addClass('in')\n\n      doAnimate ?\n        this.$backdrop.one($.support.transition.end, callback) :\n        callback()\n\n    } else if (!this.isShown && this.$backdrop) {\n      this.$backdrop.removeClass('in')\n\n      $.support.transition && this.$element.hasClass('fade')?\n        this.$backdrop.one($.support.transition.end, $.proxy(removeBackdrop, this)) :\n        removeBackdrop.call(this)\n\n    } else if (callback) {\n      callback()\n    }\n  }\n\n  function removeBackdrop() {\n    this.$backdrop.remove()\n    this.$backdrop = null\n  }\n\n  function escape() {\n    var that = this\n    if (this.isShown && this.options.keyboard) {\n      $(document).on('keyup.dismiss.modal', function ( e ) {\n        e.which == 27 && that.hide()\n      })\n    } else if (!this.isShown) {\n      $(document).off('keyup.dismiss.modal')\n    }\n  }\n\n\n /* MODAL PLUGIN DEFINITION\n  * ======================= */\n\n  $.fn.modal = function (option) {\n    return this.each(function () {\n      var $this = $(this)\n        , data = $this.data('modal')\n        , options = $.extend({}, $.fn.modal.defaults, $this.data(), typeof option == 'object' && option)\n      if (!data) $this.data('modal', (data = new Modal(this, options)))\n      if (typeof option == 'string') data[option]()\n      else if (options.show) data.show()\n    })\n  }\n\n  $.fn.modal.defaults = {\n      backdrop: true\n    , keyboard: true\n    , show: true\n  }\n\n  $.fn.modal.Constructor = Modal\n\n\n /* MODAL DATA-API\n  * ============== */\n\n  $(function () {\n    $('body').on('click.modal.data-api', '[data-toggle=\"modal\"]', function ( e ) {\n      var $this = $(this), href\n        , $target = $($this.attr('data-target') || (href = $this.attr('href')) && href.replace(/.*(?=#[^\\s]+$)/, '')) //strip for ie7\n        , option = $target.data('modal') ? 'toggle' : $.extend({}, $target.data(), $this.data())\n\n      e.preventDefault()\n      $target.modal(option)\n    })\n  })\n\n}(window.jQuery);\n/* ============================================================\n * bootstrap-dropdown.js v2.0.4\n * http://twitter.github.com/bootstrap/javascript.html#dropdowns\n * ============================================================\n * Copyright 2012 Twitter, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ============================================================ */\n\n\n!function ($) {\n\n  \"use strict\"; // jshint ;_;\n\n\n /* DROPDOWN CLASS DEFINITION\n  * ========================= */\n\n  var toggle = '[data-toggle=\"dropdown\"]'\n    , Dropdown = function (element) {\n        var $el = $(element).on('click.dropdown.data-api', this.toggle)\n        $('html').on('click.dropdown.data-api', function () {\n          $el.parent().removeClass('open')\n        })\n      }\n\n  Dropdown.prototype = {\n\n    constructor: Dropdown\n\n  , toggle: function (e) {\n      var $this = $(this)\n        , $parent\n        , selector\n        , isActive\n\n      if ($this.is('.disabled, :disabled')) return\n\n      selector = $this.attr('data-target')\n\n      if (!selector) {\n        selector = $this.attr('href')\n        selector = selector && selector.replace(/.*(?=#[^\\s]*$)/, '') //strip for ie7\n      }\n\n      $parent = $(selector)\n      $parent.length || ($parent = $this.parent())\n\n      isActive = $parent.hasClass('open')\n\n      clearMenus()\n\n      if (!isActive) $parent.toggleClass('open')\n\n      return false\n    }\n\n  }\n\n  function clearMenus() {\n    $(toggle).parent().removeClass('open')\n  }\n\n\n  /* DROPDOWN PLUGIN DEFINITION\n   * ========================== */\n\n  $.fn.dropdown = function (option) {\n    return this.each(function () {\n      var $this = $(this)\n        , data = $this.data('dropdown')\n      if (!data) $this.data('dropdown', (data = new Dropdown(this)))\n      if (typeof option == 'string') data[option].call($this)\n    })\n  }\n\n  $.fn.dropdown.Constructor = Dropdown\n\n\n  /* APPLY TO STANDARD DROPDOWN ELEMENTS\n   * =================================== */\n\n  $(function () {\n    $('html').on('click.dropdown.data-api', clearMenus)\n    $('body')\n      .on('click.dropdown', '.dropdown form', function (e) { e.stopPropagation() })\n      .on('click.dropdown.data-api', toggle, Dropdown.prototype.toggle)\n  })\n\n}(window.jQuery);\n/* =============================================================\n * bootstrap-scrollspy.js v2.0.4\n * http://twitter.github.com/bootstrap/javascript.html#scrollspy\n * =============================================================\n * Copyright 2012 Twitter, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ============================================================== */\n\n\n!function ($) {\n\n  \"use strict\"; // jshint ;_;\n\n\n  /* SCROLLSPY CLASS DEFINITION\n   * ========================== */\n\n  function ScrollSpy( element, options) {\n    var process = $.proxy(this.process, this)\n      , $element = $(element).is('body') ? $(window) : $(element)\n      , href\n    this.options = $.extend({}, $.fn.scrollspy.defaults, options)\n    this.$scrollElement = $element.on('scroll.scroll.data-api', process)\n    this.selector = (this.options.target\n      || ((href = $(element).attr('href')) && href.replace(/.*(?=#[^\\s]+$)/, '')) //strip for ie7\n      || '') + ' .nav li > a'\n    this.$body = $('body')\n    this.refresh()\n    this.process()\n  }\n\n  ScrollSpy.prototype = {\n\n      constructor: ScrollSpy\n\n    , refresh: function () {\n        var self = this\n          , $targets\n\n        this.offsets = $([])\n        this.targets = $([])\n\n        $targets = this.$body\n          .find(this.selector)\n          .map(function () {\n            var $el = $(this)\n              , href = $el.data('target') || $el.attr('href')\n              , $href = /^#\\w/.test(href) && $(href)\n            return ( $href\n              && href.length\n              && [[ $href.position().top, href ]] ) || null\n          })\n          .sort(function (a, b) { return a[0] - b[0] })\n          .each(function () {\n            self.offsets.push(this[0])\n            self.targets.push(this[1])\n          })\n      }\n\n    , process: function () {\n        var scrollTop = this.$scrollElement.scrollTop() + this.options.offset\n          , scrollHeight = this.$scrollElement[0].scrollHeight || this.$body[0].scrollHeight\n          , maxScroll = scrollHeight - this.$scrollElement.height()\n          , offsets = this.offsets\n          , targets = this.targets\n          , activeTarget = this.activeTarget\n          , i\n\n        if (scrollTop >= maxScroll) {\n          return activeTarget != (i = targets.last()[0])\n            && this.activate ( i )\n        }\n\n        for (i = offsets.length; i--;) {\n          activeTarget != targets[i]\n            && scrollTop >= offsets[i]\n            && (!offsets[i + 1] || scrollTop <= offsets[i + 1])\n            && this.activate( targets[i] )\n        }\n      }\n\n    , activate: function (target) {\n        var active\n          , selector\n\n        this.activeTarget = target\n\n        $(this.selector)\n          .parent('.active')\n          .removeClass('active')\n\n        selector = this.selector\n          + '[data-target=\"' + target + '\"],'\n          + this.selector + '[href=\"' + target + '\"]'\n\n        active = $(selector)\n          .parent('li')\n          .addClass('active')\n\n        if (active.parent('.dropdown-menu'))  {\n          active = active.closest('li.dropdown').addClass('active')\n        }\n\n        active.trigger('activate')\n      }\n\n  }\n\n\n /* SCROLLSPY PLUGIN DEFINITION\n  * =========================== */\n\n  $.fn.scrollspy = function ( option ) {\n    return this.each(function () {\n      var $this = $(this)\n        , data = $this.data('scrollspy')\n        , options = typeof option == 'object' && option\n      if (!data) $this.data('scrollspy', (data = new ScrollSpy(this, options)))\n      if (typeof option == 'string') data[option]()\n    })\n  }\n\n  $.fn.scrollspy.Constructor = ScrollSpy\n\n  $.fn.scrollspy.defaults = {\n    offset: 10\n  }\n\n\n /* SCROLLSPY DATA-API\n  * ================== */\n\n  $(function () {\n    $('[data-spy=\"scroll\"]').each(function () {\n      var $spy = $(this)\n      $spy.scrollspy($spy.data())\n    })\n  })\n\n}(window.jQuery);\n/* ========================================================\n * bootstrap-tab.js v2.0.4\n * http://twitter.github.com/bootstrap/javascript.html#tabs\n * ========================================================\n * Copyright 2012 Twitter, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ======================================================== */\n\n\n!function ($) {\n\n  \"use strict\"; // jshint ;_;\n\n\n /* TAB CLASS DEFINITION\n  * ==================== */\n\n  var Tab = function ( element ) {\n    this.element = $(element)\n  }\n\n  Tab.prototype = {\n\n    constructor: Tab\n\n  , show: function () {\n      var $this = this.element\n        , $ul = $this.closest('ul:not(.dropdown-menu)')\n        , selector = $this.attr('data-target')\n        , previous\n        , $target\n        , e\n\n      if (!selector) {\n        selector = $this.attr('href')\n        selector = selector && selector.replace(/.*(?=#[^\\s]*$)/, '') //strip for ie7\n      }\n\n      if ( $this.parent('li').hasClass('active') ) return\n\n      previous = $ul.find('.active a').last()[0]\n\n      e = $.Event('show', {\n        relatedTarget: previous\n      })\n\n      $this.trigger(e)\n\n      if (e.isDefaultPrevented()) return\n\n      $target = $(selector)\n\n      this.activate($this.parent('li'), $ul)\n      this.activate($target, $target.parent(), function () {\n        $this.trigger({\n          type: 'shown'\n        , relatedTarget: previous\n        })\n      })\n    }\n\n  , activate: function ( element, container, callback) {\n      var $active = container.find('> .active')\n        , transition = callback\n            && $.support.transition\n            && $active.hasClass('fade')\n\n      function next() {\n        $active\n          .removeClass('active')\n          .find('> .dropdown-menu > .active')\n          .removeClass('active')\n\n        element.addClass('active')\n\n        if (transition) {\n          element[0].offsetWidth // reflow for transition\n          element.addClass('in')\n        } else {\n          element.removeClass('fade')\n        }\n\n        if ( element.parent('.dropdown-menu') ) {\n          element.closest('li.dropdown').addClass('active')\n        }\n\n        callback && callback()\n      }\n\n      transition ?\n        $active.one($.support.transition.end, next) :\n        next()\n\n      $active.removeClass('in')\n    }\n  }\n\n\n /* TAB PLUGIN DEFINITION\n  * ===================== */\n\n  $.fn.tab = function ( option ) {\n    return this.each(function () {\n      var $this = $(this)\n        , data = $this.data('tab')\n      if (!data) $this.data('tab', (data = new Tab(this)))\n      if (typeof option == 'string') data[option]()\n    })\n  }\n\n  $.fn.tab.Constructor = Tab\n\n\n /* TAB DATA-API\n  * ============ */\n\n  $(function () {\n    $('body').on('click.tab.data-api', '[data-toggle=\"tab\"], [data-toggle=\"pill\"]', function (e) {\n      e.preventDefault()\n      $(this).tab('show')\n    })\n  })\n\n}(window.jQuery);\n/* ===========================================================\n * bootstrap-tooltip.js v2.0.4\n * http://twitter.github.com/bootstrap/javascript.html#tooltips\n * Inspired by the original jQuery.tipsy by Jason Frame\n * ===========================================================\n * Copyright 2012 Twitter, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ========================================================== */\n\n\n!function ($) {\n\n  \"use strict\"; // jshint ;_;\n\n\n /* TOOLTIP PUBLIC CLASS DEFINITION\n  * =============================== */\n\n  var Tooltip = function (element, options) {\n    this.init('tooltip', element, options)\n  }\n\n  Tooltip.prototype = {\n\n    constructor: Tooltip\n\n  , init: function (type, element, options) {\n      var eventIn\n        , eventOut\n\n      this.type = type\n      this.$element = $(element)\n      this.options = this.getOptions(options)\n      this.enabled = true\n\n      if (this.options.trigger != 'manual') {\n        eventIn  = this.options.trigger == 'hover' ? 'mouseenter' : 'focus'\n        eventOut = this.options.trigger == 'hover' ? 'mouseleave' : 'blur'\n        this.$element.on(eventIn, this.options.selector, $.proxy(this.enter, this))\n        this.$element.on(eventOut, this.options.selector, $.proxy(this.leave, this))\n      }\n\n      this.options.selector ?\n        (this._options = $.extend({}, this.options, { trigger: 'manual', selector: '' })) :\n        this.fixTitle()\n    }\n\n  , getOptions: function (options) {\n      options = $.extend({}, $.fn[this.type].defaults, options, this.$element.data())\n\n      if (options.delay && typeof options.delay == 'number') {\n        options.delay = {\n          show: options.delay\n        , hide: options.delay\n        }\n      }\n\n      return options\n    }\n\n  , enter: function (e) {\n      var self = $(e.currentTarget)[this.type](this._options).data(this.type)\n\n      if (!self.options.delay || !self.options.delay.show) return self.show()\n\n      clearTimeout(this.timeout)\n      self.hoverState = 'in'\n      this.timeout = setTimeout(function() {\n        if (self.hoverState == 'in') self.show()\n      }, self.options.delay.show)\n    }\n\n  , leave: function (e) {\n      var self = $(e.currentTarget)[this.type](this._options).data(this.type)\n\n      if (this.timeout) clearTimeout(this.timeout)\n      if (!self.options.delay || !self.options.delay.hide) return self.hide()\n\n      self.hoverState = 'out'\n      this.timeout = setTimeout(function() {\n        if (self.hoverState == 'out') self.hide()\n      }, self.options.delay.hide)\n    }\n\n  , show: function () {\n      var $tip\n        , inside\n        , pos\n        , actualWidth\n        , actualHeight\n        , placement\n        , tp\n\n      if (this.hasContent() && this.enabled) {\n        $tip = this.tip()\n        this.setContent()\n\n        if (this.options.animation) {\n          $tip.addClass('fade')\n        }\n\n        placement = typeof this.options.placement == 'function' ?\n          this.options.placement.call(this, $tip[0], this.$element[0]) :\n          this.options.placement\n\n        inside = /in/.test(placement)\n\n        $tip\n          .remove()\n          .css({ top: 0, left: 0, display: 'block' })\n          .appendTo(inside ? this.$element : document.body)\n\n        pos = this.getPosition(inside)\n\n        actualWidth = $tip[0].offsetWidth\n        actualHeight = $tip[0].offsetHeight\n\n        switch (inside ? placement.split(' ')[1] : placement) {\n          case 'bottom':\n            tp = {top: pos.top + pos.height, left: pos.left + pos.width / 2 - actualWidth / 2}\n            break\n          case 'top':\n            tp = {top: pos.top - actualHeight, left: pos.left + pos.width / 2 - actualWidth / 2}\n            break\n          case 'left':\n            tp = {top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left - actualWidth}\n            break\n          case 'right':\n            tp = {top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left + pos.width}\n            break\n        }\n\n        $tip\n          .css(tp)\n          .addClass(placement)\n          .addClass('in')\n      }\n    }\n\n  , isHTML: function(text) {\n      // html string detection logic adapted from jQuery\n      return typeof text != 'string'\n        || ( text.charAt(0) === \"<\"\n          && text.charAt( text.length - 1 ) === \">\"\n          && text.length >= 3\n        ) || /^(?:[^<]*<[\\w\\W]+>[^>]*$)/.exec(text)\n    }\n\n  , setContent: function () {\n      var $tip = this.tip()\n        , title = this.getTitle()\n\n      $tip.find('.tooltip-inner')[this.isHTML(title) ? 'html' : 'text'](title)\n      $tip.removeClass('fade in top bottom left right')\n    }\n\n  , hide: function () {\n      var that = this\n        , $tip = this.tip()\n\n      $tip.removeClass('in')\n\n      function removeWithAnimation() {\n        var timeout = setTimeout(function () {\n          $tip.off($.support.transition.end).remove()\n        }, 500)\n\n        $tip.one($.support.transition.end, function () {\n          clearTimeout(timeout)\n          $tip.remove()\n        })\n      }\n\n      $.support.transition && this.$tip.hasClass('fade') ?\n        removeWithAnimation() :\n        $tip.remove()\n    }\n\n  , fixTitle: function () {\n      var $e = this.$element\n      if ($e.attr('title') || typeof($e.attr('data-original-title')) != 'string') {\n        $e.attr('data-original-title', $e.attr('title') || '').removeAttr('title')\n      }\n    }\n\n  , hasContent: function () {\n      return this.getTitle()\n    }\n\n  , getPosition: function (inside) {\n      return $.extend({}, (inside ? {top: 0, left: 0} : this.$element.offset()), {\n        width: this.$element[0].offsetWidth\n      , height: this.$element[0].offsetHeight\n      })\n    }\n\n  , getTitle: function () {\n      var title\n        , $e = this.$element\n        , o = this.options\n\n      title = $e.attr('data-original-title')\n        || (typeof o.title == 'function' ? o.title.call($e[0]) :  o.title)\n\n      return title\n    }\n\n  , tip: function () {\n      return this.$tip = this.$tip || $(this.options.template)\n    }\n\n  , validate: function () {\n      if (!this.$element[0].parentNode) {\n        this.hide()\n        this.$element = null\n        this.options = null\n      }\n    }\n\n  , enable: function () {\n      this.enabled = true\n    }\n\n  , disable: function () {\n      this.enabled = false\n    }\n\n  , toggleEnabled: function () {\n      this.enabled = !this.enabled\n    }\n\n  , toggle: function () {\n      this[this.tip().hasClass('in') ? 'hide' : 'show']()\n    }\n\n  }\n\n\n /* TOOLTIP PLUGIN DEFINITION\n  * ========================= */\n\n  $.fn.tooltip = function ( option ) {\n    return this.each(function () {\n      var $this = $(this)\n        , data = $this.data('tooltip')\n        , options = typeof option == 'object' && option\n      if (!data) $this.data('tooltip', (data = new Tooltip(this, options)))\n      if (typeof option == 'string') data[option]()\n    })\n  }\n\n  $.fn.tooltip.Constructor = Tooltip\n\n  $.fn.tooltip.defaults = {\n    animation: true\n  , placement: 'top'\n  , selector: false\n  , template: '<div class=\"tooltip\"><div class=\"tooltip-arrow\"></div><div class=\"tooltip-inner\"></div></div>'\n  , trigger: 'hover'\n  , title: ''\n  , delay: 0\n  }\n\n}(window.jQuery);\n\n/* ===========================================================\n * bootstrap-popover.js v2.0.4\n * http://twitter.github.com/bootstrap/javascript.html#popovers\n * ===========================================================\n * Copyright 2012 Twitter, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =========================================================== */\n\n\n!function ($) {\n\n  \"use strict\"; // jshint ;_;\n\n\n /* POPOVER PUBLIC CLASS DEFINITION\n  * =============================== */\n\n  var Popover = function ( element, options ) {\n    this.init('popover', element, options)\n  }\n\n\n  /* NOTE: POPOVER EXTENDS BOOTSTRAP-TOOLTIP.js\n     ========================================== */\n\n  Popover.prototype = $.extend({}, $.fn.tooltip.Constructor.prototype, {\n\n    constructor: Popover\n\n  , setContent: function () {\n      var $tip = this.tip()\n        , title = this.getTitle()\n        , content = this.getContent()\n\n      $tip.find('.popover-title')[this.isHTML(title) ? 'html' : 'text'](title)\n      $tip.find('.popover-content > *')[this.isHTML(content) ? 'html' : 'text'](content)\n\n      $tip.removeClass('fade top bottom left right in')\n    }\n\n  , hasContent: function () {\n      return this.getTitle() || this.getContent()\n    }\n\n  , getContent: function () {\n      var content\n        , $e = this.$element\n        , o = this.options\n\n      content = $e.attr('data-content')\n        || (typeof o.content == 'function' ? o.content.call($e[0]) :  o.content)\n\n      return content\n    }\n\n  , tip: function () {\n      if (!this.$tip) {\n        this.$tip = $(this.options.template)\n      }\n      return this.$tip\n    }\n\n  })\n\n\n /* POPOVER PLUGIN DEFINITION\n  * ======================= */\n\n  $.fn.popover = function (option) {\n    return this.each(function () {\n      var $this = $(this)\n        , data = $this.data('popover')\n        , options = typeof option == 'object' && option\n      if (!data) $this.data('popover', (data = new Popover(this, options)))\n      if (typeof option == 'string') data[option]()\n    })\n  }\n\n  $.fn.popover.Constructor = Popover\n\n  $.fn.popover.defaults = $.extend({} , $.fn.tooltip.defaults, {\n    placement: 'right'\n  , content: ''\n  , template: '<div class=\"popover\"><div class=\"arrow\"></div><div class=\"popover-inner\"><h3 class=\"popover-title\"></h3><div class=\"popover-content\"><p></p></div></div></div>'\n  })\n\n}(window.jQuery);\n/* ==========================================================\n * bootstrap-alert.js v2.0.4\n * http://twitter.github.com/bootstrap/javascript.html#alerts\n * ==========================================================\n * Copyright 2012 Twitter, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ========================================================== */\n\n\n!function ($) {\n\n  \"use strict\"; // jshint ;_;\n\n\n /* ALERT CLASS DEFINITION\n  * ====================== */\n\n  var dismiss = '[data-dismiss=\"alert\"]'\n    , Alert = function (el) {\n        $(el).on('click', dismiss, this.close)\n      }\n\n  Alert.prototype.close = function (e) {\n    var $this = $(this)\n      , selector = $this.attr('data-target')\n      , $parent\n\n    if (!selector) {\n      selector = $this.attr('href')\n      selector = selector && selector.replace(/.*(?=#[^\\s]*$)/, '') //strip for ie7\n    }\n\n    $parent = $(selector)\n\n    e && e.preventDefault()\n\n    $parent.length || ($parent = $this.hasClass('alert') ? $this : $this.parent())\n\n    $parent.trigger(e = $.Event('close'))\n\n    if (e.isDefaultPrevented()) return\n\n    $parent.removeClass('in')\n\n    function removeElement() {\n      $parent\n        .trigger('closed')\n        .remove()\n    }\n\n    $.support.transition && $parent.hasClass('fade') ?\n      $parent.on($.support.transition.end, removeElement) :\n      removeElement()\n  }\n\n\n /* ALERT PLUGIN DEFINITION\n  * ======================= */\n\n  $.fn.alert = function (option) {\n    return this.each(function () {\n      var $this = $(this)\n        , data = $this.data('alert')\n      if (!data) $this.data('alert', (data = new Alert(this)))\n      if (typeof option == 'string') data[option].call($this)\n    })\n  }\n\n  $.fn.alert.Constructor = Alert\n\n\n /* ALERT DATA-API\n  * ============== */\n\n  $(function () {\n    $('body').on('click.alert.data-api', dismiss, Alert.prototype.close)\n  })\n\n}(window.jQuery);\n/* ============================================================\n * bootstrap-button.js v2.0.4\n * http://twitter.github.com/bootstrap/javascript.html#buttons\n * ============================================================\n * Copyright 2012 Twitter, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ============================================================ */\n\n\n!function ($) {\n\n  \"use strict\"; // jshint ;_;\n\n\n /* BUTTON PUBLIC CLASS DEFINITION\n  * ============================== */\n\n  var Button = function (element, options) {\n    this.$element = $(element)\n    this.options = $.extend({}, $.fn.button.defaults, options)\n  }\n\n  Button.prototype.setState = function (state) {\n    var d = 'disabled'\n      , $el = this.$element\n      , data = $el.data()\n      , val = $el.is('input') ? 'val' : 'html'\n\n    state = state + 'Text'\n    data.resetText || $el.data('resetText', $el[val]())\n\n    $el[val](data[state] || this.options[state])\n\n    // push to event loop to allow forms to submit\n    setTimeout(function () {\n      state == 'loadingText' ?\n        $el.addClass(d).attr(d, d) :\n        $el.removeClass(d).removeAttr(d)\n    }, 0)\n  }\n\n  Button.prototype.toggle = function () {\n    var $parent = this.$element.parent('[data-toggle=\"buttons-radio\"]')\n\n    $parent && $parent\n      .find('.active')\n      .removeClass('active')\n\n    this.$element.toggleClass('active')\n  }\n\n\n /* BUTTON PLUGIN DEFINITION\n  * ======================== */\n\n  $.fn.button = function (option) {\n    return this.each(function () {\n      var $this = $(this)\n        , data = $this.data('button')\n        , options = typeof option == 'object' && option\n      if (!data) $this.data('button', (data = new Button(this, options)))\n      if (option == 'toggle') data.toggle()\n      else if (option) data.setState(option)\n    })\n  }\n\n  $.fn.button.defaults = {\n    loadingText: 'loading...'\n  }\n\n  $.fn.button.Constructor = Button\n\n\n /* BUTTON DATA-API\n  * =============== */\n\n  $(function () {\n    $('body').on('click.button.data-api', '[data-toggle^=button]', function ( e ) {\n      var $btn = $(e.target)\n      if (!$btn.hasClass('btn')) $btn = $btn.closest('.btn')\n      $btn.button('toggle')\n    })\n  })\n\n}(window.jQuery);\n/* =============================================================\n * bootstrap-collapse.js v2.0.4\n * http://twitter.github.com/bootstrap/javascript.html#collapse\n * =============================================================\n * Copyright 2012 Twitter, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ============================================================ */\n\n\n!function ($) {\n\n  \"use strict\"; // jshint ;_;\n\n\n /* COLLAPSE PUBLIC CLASS DEFINITION\n  * ================================ */\n\n  var Collapse = function (element, options) {\n    this.$element = $(element)\n    this.options = $.extend({}, $.fn.collapse.defaults, options)\n\n    if (this.options.parent) {\n      this.$parent = $(this.options.parent)\n    }\n\n    this.options.toggle && this.toggle()\n  }\n\n  Collapse.prototype = {\n\n    constructor: Collapse\n\n  , dimension: function () {\n      var hasWidth = this.$element.hasClass('width')\n      return hasWidth ? 'width' : 'height'\n    }\n\n  , show: function () {\n      var dimension\n        , scroll\n        , actives\n        , hasData\n\n      if (this.transitioning) return\n\n      dimension = this.dimension()\n      scroll = $.camelCase(['scroll', dimension].join('-'))\n      actives = this.$parent && this.$parent.find('> .accordion-group > .in')\n\n      if (actives && actives.length) {\n        hasData = actives.data('collapse')\n        if (hasData && hasData.transitioning) return\n        actives.collapse('hide')\n        hasData || actives.data('collapse', null)\n      }\n\n      this.$element[dimension](0)\n      this.transition('addClass', $.Event('show'), 'shown')\n      this.$element[dimension](this.$element[0][scroll])\n    }\n\n  , hide: function () {\n      var dimension\n      if (this.transitioning) return\n      dimension = this.dimension()\n      this.reset(this.$element[dimension]())\n      this.transition('removeClass', $.Event('hide'), 'hidden')\n      this.$element[dimension](0)\n    }\n\n  , reset: function (size) {\n      var dimension = this.dimension()\n\n      this.$element\n        .removeClass('collapse')\n        [dimension](size || 'auto')\n        [0].offsetWidth\n\n      this.$element[size !== null ? 'addClass' : 'removeClass']('collapse')\n\n      return this\n    }\n\n  , transition: function (method, startEvent, completeEvent) {\n      var that = this\n        , complete = function () {\n            if (startEvent.type == 'show') that.reset()\n            that.transitioning = 0\n            that.$element.trigger(completeEvent)\n          }\n\n      this.$element.trigger(startEvent)\n\n      if (startEvent.isDefaultPrevented()) return\n\n      this.transitioning = 1\n\n      this.$element[method]('in')\n\n      $.support.transition && this.$element.hasClass('collapse') ?\n        this.$element.one($.support.transition.end, complete) :\n        complete()\n    }\n\n  , toggle: function () {\n      this[this.$element.hasClass('in') ? 'hide' : 'show']()\n    }\n\n  }\n\n\n /* COLLAPSIBLE PLUGIN DEFINITION\n  * ============================== */\n\n  $.fn.collapse = function (option) {\n    return this.each(function () {\n      var $this = $(this)\n        , data = $this.data('collapse')\n        , options = typeof option == 'object' && option\n      if (!data) $this.data('collapse', (data = new Collapse(this, options)))\n      if (typeof option == 'string') data[option]()\n    })\n  }\n\n  $.fn.collapse.defaults = {\n    toggle: true\n  }\n\n  $.fn.collapse.Constructor = Collapse\n\n\n /* COLLAPSIBLE DATA-API\n  * ==================== */\n\n  $(function () {\n    $('body').on('click.collapse.data-api', '[data-toggle=collapse]', function ( e ) {\n      var $this = $(this), href\n        , target = $this.attr('data-target')\n          || e.preventDefault()\n          || (href = $this.attr('href')) && href.replace(/.*(?=#[^\\s]+$)/, '') //strip for ie7\n        , option = $(target).data('collapse') ? 'toggle' : $this.data()\n      $(target).collapse(option)\n    })\n  })\n\n}(window.jQuery);\n/* ==========================================================\n * bootstrap-carousel.js v2.0.4\n * http://twitter.github.com/bootstrap/javascript.html#carousel\n * ==========================================================\n * Copyright 2012 Twitter, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ========================================================== */\n\n\n!function ($) {\n\n  \"use strict\"; // jshint ;_;\n\n\n /* CAROUSEL CLASS DEFINITION\n  * ========================= */\n\n  var Carousel = function (element, options) {\n    this.$element = $(element)\n    this.options = options\n    this.options.slide && this.slide(this.options.slide)\n    this.options.pause == 'hover' && this.$element\n      .on('mouseenter', $.proxy(this.pause, this))\n      .on('mouseleave', $.proxy(this.cycle, this))\n  }\n\n  Carousel.prototype = {\n\n    cycle: function (e) {\n      if (!e) this.paused = false\n      this.options.interval\n        && !this.paused\n        && (this.interval = setInterval($.proxy(this.next, this), this.options.interval))\n      return this\n    }\n\n  , to: function (pos) {\n      var $active = this.$element.find('.active')\n        , children = $active.parent().children()\n        , activePos = children.index($active)\n        , that = this\n\n      if (pos > (children.length - 1) || pos < 0) return\n\n      if (this.sliding) {\n        return this.$element.one('slid', function () {\n          that.to(pos)\n        })\n      }\n\n      if (activePos == pos) {\n        return this.pause().cycle()\n      }\n\n      return this.slide(pos > activePos ? 'next' : 'prev', $(children[pos]))\n    }\n\n  , pause: function (e) {\n      if (!e) this.paused = true\n      clearInterval(this.interval)\n      this.interval = null\n      return this\n    }\n\n  , next: function () {\n      if (this.sliding) return\n      return this.slide('next')\n    }\n\n  , prev: function () {\n      if (this.sliding) return\n      return this.slide('prev')\n    }\n\n  , slide: function (type, next) {\n      var $active = this.$element.find('.active')\n        , $next = next || $active[type]()\n        , isCycling = this.interval\n        , direction = type == 'next' ? 'left' : 'right'\n        , fallback  = type == 'next' ? 'first' : 'last'\n        , that = this\n        , e = $.Event('slide')\n\n      this.sliding = true\n\n      isCycling && this.pause()\n\n      $next = $next.length ? $next : this.$element.find('.item')[fallback]()\n\n      if ($next.hasClass('active')) return\n\n      if ($.support.transition && this.$element.hasClass('slide')) {\n        this.$element.trigger(e)\n        if (e.isDefaultPrevented()) return\n        $next.addClass(type)\n        $next[0].offsetWidth // force reflow\n        $active.addClass(direction)\n        $next.addClass(direction)\n        this.$element.one($.support.transition.end, function () {\n          $next.removeClass([type, direction].join(' ')).addClass('active')\n          $active.removeClass(['active', direction].join(' '))\n          that.sliding = false\n          setTimeout(function () { that.$element.trigger('slid') }, 0)\n        })\n      } else {\n        this.$element.trigger(e)\n        if (e.isDefaultPrevented()) return\n        $active.removeClass('active')\n        $next.addClass('active')\n        this.sliding = false\n        this.$element.trigger('slid')\n      }\n\n      isCycling && this.cycle()\n\n      return this\n    }\n\n  }\n\n\n /* CAROUSEL PLUGIN DEFINITION\n  * ========================== */\n\n  $.fn.carousel = function (option) {\n    return this.each(function () {\n      var $this = $(this)\n        , data = $this.data('carousel')\n        , options = $.extend({}, $.fn.carousel.defaults, typeof option == 'object' && option)\n      if (!data) $this.data('carousel', (data = new Carousel(this, options)))\n      if (typeof option == 'number') data.to(option)\n      else if (typeof option == 'string' || (option = options.slide)) data[option]()\n      else if (options.interval) data.cycle()\n    })\n  }\n\n  $.fn.carousel.defaults = {\n    interval: 5000\n  , pause: 'hover'\n  }\n\n  $.fn.carousel.Constructor = Carousel\n\n\n /* CAROUSEL DATA-API\n  * ================= */\n\n  $(function () {\n    $('body').on('click.carousel.data-api', '[data-slide]', function ( e ) {\n      var $this = $(this), href\n        , $target = $($this.attr('data-target') || (href = $this.attr('href')) && href.replace(/.*(?=#[^\\s]+$)/, '')) //strip for ie7\n        , options = !$target.data('modal') && $.extend({}, $target.data(), $this.data())\n      $target.carousel(options)\n      e.preventDefault()\n    })\n  })\n\n}(window.jQuery);\n/* =============================================================\n * bootstrap-typeahead.js v2.0.4\n * http://twitter.github.com/bootstrap/javascript.html#typeahead\n * =============================================================\n * Copyright 2012 Twitter, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ============================================================ */\n\n\n!function($){\n\n  \"use strict\"; // jshint ;_;\n\n\n /* TYPEAHEAD PUBLIC CLASS DEFINITION\n  * ================================= */\n\n  var Typeahead = function (element, options) {\n    this.$element = $(element)\n    this.options = $.extend({}, $.fn.typeahead.defaults, options)\n    this.matcher = this.options.matcher || this.matcher\n    this.sorter = this.options.sorter || this.sorter\n    this.highlighter = this.options.highlighter || this.highlighter\n    this.updater = this.options.updater || this.updater\n    this.$menu = $(this.options.menu).appendTo('body')\n    this.source = this.options.source\n    this.shown = false\n    this.listen()\n  }\n\n  Typeahead.prototype = {\n\n    constructor: Typeahead\n\n  , select: function () {\n      var val = this.$menu.find('.active').attr('data-value')\n      this.$element\n        .val(this.updater(val))\n        .change()\n      return this.hide()\n    }\n\n  , updater: function (item) {\n      return item\n    }\n\n  , show: function () {\n      var pos = $.extend({}, this.$element.offset(), {\n        height: this.$element[0].offsetHeight\n      })\n\n      this.$menu.css({\n        top: pos.top + pos.height\n      , left: pos.left\n      })\n\n      this.$menu.show()\n      this.shown = true\n      return this\n    }\n\n  , hide: function () {\n      this.$menu.hide()\n      this.shown = false\n      return this\n    }\n\n  , lookup: function (event) {\n      var that = this\n        , items\n        , q\n\n      this.query = this.$element.val()\n\n      if (!this.query) {\n        return this.shown ? this.hide() : this\n      }\n\n      items = $.grep(this.source, function (item) {\n        return that.matcher(item)\n      })\n\n      items = this.sorter(items)\n\n      if (!items.length) {\n        return this.shown ? this.hide() : this\n      }\n\n      return this.render(items.slice(0, this.options.items)).show()\n    }\n\n  , matcher: function (item) {\n      return ~item.toLowerCase().indexOf(this.query.toLowerCase())\n    }\n\n  , sorter: function (items) {\n      var beginswith = []\n        , caseSensitive = []\n        , caseInsensitive = []\n        , item\n\n      while (item = items.shift()) {\n        if (!item.toLowerCase().indexOf(this.query.toLowerCase())) beginswith.push(item)\n        else if (~item.indexOf(this.query)) caseSensitive.push(item)\n        else caseInsensitive.push(item)\n      }\n\n      return beginswith.concat(caseSensitive, caseInsensitive)\n    }\n\n  , highlighter: function (item) {\n      var query = this.query.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, '\\\\$&')\n      return item.replace(new RegExp('(' + query + ')', 'ig'), function ($1, match) {\n        return '<strong>' + match + '</strong>'\n      })\n    }\n\n  , render: function (items) {\n      var that = this\n\n      items = $(items).map(function (i, item) {\n        i = $(that.options.item).attr('data-value', item)\n        i.find('a').html(that.highlighter(item))\n        return i[0]\n      })\n\n      items.first().addClass('active')\n      this.$menu.html(items)\n      return this\n    }\n\n  , next: function (event) {\n      var active = this.$menu.find('.active').removeClass('active')\n        , next = active.next()\n\n      if (!next.length) {\n        next = $(this.$menu.find('li')[0])\n      }\n\n      next.addClass('active')\n    }\n\n  , prev: function (event) {\n      var active = this.$menu.find('.active').removeClass('active')\n        , prev = active.prev()\n\n      if (!prev.length) {\n        prev = this.$menu.find('li').last()\n      }\n\n      prev.addClass('active')\n    }\n\n  , listen: function () {\n      this.$element\n        .on('blur',     $.proxy(this.blur, this))\n        .on('keypress', $.proxy(this.keypress, this))\n        .on('keyup',    $.proxy(this.keyup, this))\n\n      if ($.browser.webkit || $.browser.msie) {\n        this.$element.on('keydown', $.proxy(this.keypress, this))\n      }\n\n      this.$menu\n        .on('click', $.proxy(this.click, this))\n        .on('mouseenter', 'li', $.proxy(this.mouseenter, this))\n    }\n\n  , keyup: function (e) {\n      switch(e.keyCode) {\n        case 40: // down arrow\n        case 38: // up arrow\n          break\n\n        case 9: // tab\n        case 13: // enter\n          if (!this.shown) return\n          this.select()\n          break\n\n        case 27: // escape\n          if (!this.shown) return\n          this.hide()\n          break\n\n        default:\n          this.lookup()\n      }\n\n      e.stopPropagation()\n      e.preventDefault()\n  }\n\n  , keypress: function (e) {\n      if (!this.shown) return\n\n      switch(e.keyCode) {\n        case 9: // tab\n        case 13: // enter\n        case 27: // escape\n          e.preventDefault()\n          break\n\n        case 38: // up arrow\n          if (e.type != 'keydown') break\n          e.preventDefault()\n          this.prev()\n          break\n\n        case 40: // down arrow\n          if (e.type != 'keydown') break\n          e.preventDefault()\n          this.next()\n          break\n      }\n\n      e.stopPropagation()\n    }\n\n  , blur: function (e) {\n      var that = this\n      setTimeout(function () { that.hide() }, 150)\n    }\n\n  , click: function (e) {\n      e.stopPropagation()\n      e.preventDefault()\n      this.select()\n    }\n\n  , mouseenter: function (e) {\n      this.$menu.find('.active').removeClass('active')\n      $(e.currentTarget).addClass('active')\n    }\n\n  }\n\n\n  /* TYPEAHEAD PLUGIN DEFINITION\n   * =========================== */\n\n  $.fn.typeahead = function (option) {\n    return this.each(function () {\n      var $this = $(this)\n        , data = $this.data('typeahead')\n        , options = typeof option == 'object' && option\n      if (!data) $this.data('typeahead', (data = new Typeahead(this, options)))\n      if (typeof option == 'string') data[option]()\n    })\n  }\n\n  $.fn.typeahead.defaults = {\n    source: []\n  , items: 8\n  , menu: '<ul class=\"typeahead dropdown-menu\"></ul>'\n  , item: '<li><a href=\"#\"></a></li>'\n  }\n\n  $.fn.typeahead.Constructor = Typeahead\n\n\n /* TYPEAHEAD DATA-API\n  * ================== */\n\n  $(function () {\n    $('body').on('focus.typeahead.data-api', '[data-provide=\"typeahead\"]', function (e) {\n      var $this = $(this)\n      if ($this.data('typeahead')) return\n      e.preventDefault()\n      $this.typeahead($this.data())\n    })\n  })\n\n}(window.jQuery);","/home/travis/build/npmtest/node-npmtest-monitor-dashboard/node_modules/monitor-dashboard/lib/ext/bootstrap-modal.js":"/* =========================================================\n * bootstrap-modal.js v2.0.3\n * http://twitter.github.com/bootstrap/javascript.html#modals\n * =========================================================\n * Copyright 2012 Twitter, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ========================================================= */\n\n\n!function ($) {\n\n  \"use strict\"; // jshint ;_;\n\n\n /* MODAL CLASS DEFINITION\n  * ====================== */\n\n  var Modal = function (content, options) {\n    this.options = options\n    this.$element = $(content)\n      .delegate('[data-dismiss=\"modal\"]', 'click.dismiss.modal', $.proxy(this.hide, this))\n  }\n\n  Modal.prototype = {\n\n      constructor: Modal\n\n    , toggle: function () {\n        return this[!this.isShown ? 'show' : 'hide']()\n      }\n\n    , show: function () {\n        var that = this\n          , e = $.Event('show')\n\n        this.$element.trigger(e)\n\n        if (this.isShown || e.isDefaultPrevented()) return\n\n        $('body').addClass('modal-open')\n\n        this.isShown = true\n\n        escape.call(this)\n        backdrop.call(this, function () {\n          var transition = $.support.transition && that.$element.hasClass('fade')\n\n          if (!that.$element.parent().length) {\n            that.$element.appendTo(document.body) //don't move modals dom position\n          }\n\n          that.$element\n            .show()\n\n          if (transition) {\n            that.$element[0].offsetWidth // force reflow\n          }\n\n          that.$element.addClass('in')\n\n          transition ?\n            that.$element.one($.support.transition.end, function () { that.$element.trigger('shown') }) :\n            that.$element.trigger('shown')\n\n        })\n      }\n\n    , hide: function (e) {\n        e && e.preventDefault()\n\n        var that = this\n\n        e = $.Event('hide')\n\n        this.$element.trigger(e)\n\n        if (!this.isShown || e.isDefaultPrevented()) return\n\n        this.isShown = false\n\n        $('body').removeClass('modal-open')\n\n        escape.call(this)\n\n        this.$element.removeClass('in')\n\n        $.support.transition && this.$element.hasClass('fade') ?\n          hideWithTransition.call(this) :\n          hideModal.call(this)\n      }\n\n  }\n\n\n /* MODAL PRIVATE METHODS\n  * ===================== */\n\n  function hideWithTransition() {\n    var that = this\n      , timeout = setTimeout(function () {\n          that.$element.off($.support.transition.end)\n          hideModal.call(that)\n        }, 500)\n\n    this.$element.one($.support.transition.end, function () {\n      clearTimeout(timeout)\n      hideModal.call(that)\n    })\n  }\n\n  function hideModal(that) {\n    this.$element\n      .hide()\n      .trigger('hidden')\n\n    backdrop.call(this)\n  }\n\n  function backdrop(callback) {\n    var that = this\n      , animate = this.$element.hasClass('fade') ? 'fade' : ''\n\n    if (this.isShown && this.options.backdrop) {\n      var doAnimate = $.support.transition && animate\n\n      this.$backdrop = $('<div class=\"modal-backdrop ' + animate + '\" />')\n        .appendTo(document.body)\n\n      if (this.options.backdrop != 'static') {\n        this.$backdrop.click($.proxy(this.hide, this))\n      }\n\n      if (doAnimate) this.$backdrop[0].offsetWidth // force reflow\n\n      this.$backdrop.addClass('in')\n\n      doAnimate ?\n        this.$backdrop.one($.support.transition.end, callback) :\n        callback()\n\n    } else if (!this.isShown && this.$backdrop) {\n      this.$backdrop.removeClass('in')\n\n      $.support.transition && this.$element.hasClass('fade')?\n        this.$backdrop.one($.support.transition.end, $.proxy(removeBackdrop, this)) :\n        removeBackdrop.call(this)\n\n    } else if (callback) {\n      callback()\n    }\n  }\n\n  function removeBackdrop() {\n    this.$backdrop.remove()\n    this.$backdrop = null\n  }\n\n  function escape() {\n    var that = this\n    if (this.isShown && this.options.keyboard) {\n      $(document).on('keyup.dismiss.modal', function ( e ) {\n        e.which == 27 && that.hide()\n      })\n    } else if (!this.isShown) {\n      $(document).off('keyup.dismiss.modal')\n    }\n  }\n\n\n /* MODAL PLUGIN DEFINITION\n  * ======================= */\n\n  $.fn.modal = function (option) {\n    return this.each(function () {\n      var $this = $(this)\n        , data = $this.data('modal')\n        , options = $.extend({}, $.fn.modal.defaults, $this.data(), typeof option == 'object' && option)\n      if (!data) $this.data('modal', (data = new Modal(this, options)))\n      if (typeof option == 'string') data[option]()\n      else if (options.show) data.show()\n    })\n  }\n\n  $.fn.modal.defaults = {\n      backdrop: true\n    , keyboard: true\n    , show: true\n  }\n\n  $.fn.modal.Constructor = Modal\n\n\n /* MODAL DATA-API\n  * ============== */\n\n  $(function () {\n    $('body').on('click.modal.data-api', '[data-toggle=\"modal\"]', function ( e ) {\n      var $this = $(this), href\n        , $target = $($this.attr('data-target') || (href = $this.attr('href')) && href.replace(/.*(?=#[^\\s]+$)/, '')) //strip for ie7\n        , option = $target.data('modal') ? 'toggle' : $.extend({}, $target.data(), $this.data())\n\n      e.preventDefault()\n      $target.modal(option)\n    })\n  })\n\n}(window.jQuery);\n","/home/travis/build/npmtest/node-npmtest-monitor-dashboard/node_modules/monitor-dashboard/lib/ext/bootstrap-tooltip.js":"/* ===========================================================\n * bootstrap-tooltip.js v2.0.3\n * http://twitter.github.com/bootstrap/javascript.html#tooltips\n * Inspired by the original jQuery.tipsy by Jason Frame\n * ===========================================================\n * Copyright 2012 Twitter, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ========================================================== */\n\n\n!function ($) {\n\n  \"use strict\"; // jshint ;_;\n\n\n /* TOOLTIP PUBLIC CLASS DEFINITION\n  * =============================== */\n\n  var Tooltip = function (element, options) {\n    this.init('tooltip', element, options)\n  }\n\n  Tooltip.prototype = {\n\n    constructor: Tooltip\n\n  , init: function (type, element, options) {\n      var eventIn\n        , eventOut\n\n      this.type = type\n      this.$element = $(element)\n      this.options = this.getOptions(options)\n      this.enabled = true\n\n      if (this.options.trigger != 'manual') {\n        eventIn  = this.options.trigger == 'hover' ? 'mouseenter' : 'focus'\n        eventOut = this.options.trigger == 'hover' ? 'mouseleave' : 'blur'\n        this.$element.on(eventIn, this.options.selector, $.proxy(this.enter, this))\n        this.$element.on(eventOut, this.options.selector, $.proxy(this.leave, this))\n      }\n\n      this.options.selector ?\n        (this._options = $.extend({}, this.options, { trigger: 'manual', selector: '' })) :\n        this.fixTitle()\n    }\n\n  , getOptions: function (options) {\n      options = $.extend({}, $.fn[this.type].defaults, options, this.$element.data())\n\n      if (options.delay && typeof options.delay == 'number') {\n        options.delay = {\n          show: options.delay\n        , hide: options.delay\n        }\n      }\n\n      return options\n    }\n\n  , enter: function (e) {\n      var self = $(e.currentTarget)[this.type](this._options).data(this.type)\n\n      if (!self.options.delay || !self.options.delay.show) return self.show()\n\n      clearTimeout(this.timeout)\n      self.hoverState = 'in'\n      this.timeout = setTimeout(function() {\n        if (self.hoverState == 'in') self.show()\n      }, self.options.delay.show)\n    }\n\n  , leave: function (e) {\n      var self = $(e.currentTarget)[this.type](this._options).data(this.type)\n\n      if (!self.options.delay || !self.options.delay.hide) return self.hide()\n\n      clearTimeout(this.timeout)\n      self.hoverState = 'out'\n      this.timeout = setTimeout(function() {\n        if (self.hoverState == 'out') self.hide()\n      }, self.options.delay.hide)\n    }\n\n  , show: function () {\n      var $tip\n        , inside\n        , pos\n        , actualWidth\n        , actualHeight\n        , placement\n        , tp\n\n      if (this.hasContent() && this.enabled) {\n        $tip = this.tip()\n        this.setContent()\n\n        if (this.options.animation) {\n          $tip.addClass('fade')\n        }\n\n        placement = typeof this.options.placement == 'function' ?\n          this.options.placement.call(this, $tip[0], this.$element[0]) :\n          this.options.placement\n\n        inside = /in/.test(placement)\n\n        $tip\n          .remove()\n          .css({ top: 0, left: 0, display: 'block' })\n          .appendTo(inside ? this.$element : document.body)\n\n        pos = this.getPosition(inside)\n\n        actualWidth = $tip[0].offsetWidth\n        actualHeight = $tip[0].offsetHeight\n\n        switch (inside ? placement.split(' ')[1] : placement) {\n          case 'bottom':\n            tp = {top: pos.top + pos.height, left: pos.left + pos.width / 2 - actualWidth / 2}\n            break\n          case 'top':\n            tp = {top: pos.top - actualHeight, left: pos.left + pos.width / 2 - actualWidth / 2}\n            break\n          case 'left':\n            tp = {top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left - actualWidth}\n            break\n          case 'right':\n            tp = {top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left + pos.width}\n            break\n        }\n\n        $tip\n          .css(tp)\n          .addClass(placement)\n          .addClass('in')\n      }\n    }\n\n  , isHTML: function(text) {\n      // html string detection logic adapted from jQuery\n      return typeof text != 'string'\n        || ( text.charAt(0) === \"<\"\n          && text.charAt( text.length - 1 ) === \">\"\n          && text.length >= 3\n        ) || /^(?:[^<]*<[\\w\\W]+>[^>]*$)/.exec(text)\n    }\n\n  , setContent: function () {\n      var $tip = this.tip()\n        , title = this.getTitle()\n\n      $tip.find('.tooltip-inner')[this.isHTML(title) ? 'html' : 'text'](title)\n      $tip.removeClass('fade in top bottom left right')\n    }\n\n  , hide: function () {\n      var that = this\n        , $tip = this.tip()\n\n      $tip.removeClass('in')\n\n      function removeWithAnimation() {\n        var timeout = setTimeout(function () {\n          $tip.off($.support.transition.end).remove()\n        }, 500)\n\n        $tip.one($.support.transition.end, function () {\n          clearTimeout(timeout)\n          $tip.remove()\n        })\n      }\n\n      $.support.transition && this.$tip.hasClass('fade') ?\n        removeWithAnimation() :\n        $tip.remove()\n    }\n\n  , fixTitle: function () {\n      var $e = this.$element\n      if ($e.attr('title') || typeof($e.attr('data-original-title')) != 'string') {\n        $e.attr('data-original-title', $e.attr('title') || '').removeAttr('title')\n      }\n    }\n\n  , hasContent: function () {\n      return this.getTitle()\n    }\n\n  , getPosition: function (inside) {\n      return $.extend({}, (inside ? {top: 0, left: 0} : this.$element.offset()), {\n        width: this.$element[0].offsetWidth\n      , height: this.$element[0].offsetHeight\n      })\n    }\n\n  , getTitle: function () {\n      var title\n        , $e = this.$element\n        , o = this.options\n\n      title = $e.attr('data-original-title')\n        || (typeof o.title == 'function' ? o.title.call($e[0]) :  o.title)\n\n      return title\n    }\n\n  , tip: function () {\n      return this.$tip = this.$tip || $(this.options.template)\n    }\n\n  , validate: function () {\n      if (!this.$element[0].parentNode) {\n        this.hide()\n        this.$element = null\n        this.options = null\n      }\n    }\n\n  , enable: function () {\n      this.enabled = true\n    }\n\n  , disable: function () {\n      this.enabled = false\n    }\n\n  , toggleEnabled: function () {\n      this.enabled = !this.enabled\n    }\n\n  , toggle: function () {\n      this[this.tip().hasClass('in') ? 'hide' : 'show']()\n    }\n\n  }\n\n\n /* TOOLTIP PLUGIN DEFINITION\n  * ========================= */\n\n  $.fn.tooltip = function ( option ) {\n    return this.each(function () {\n      var $this = $(this)\n        , data = $this.data('tooltip')\n        , options = typeof option == 'object' && option\n      if (!data) $this.data('tooltip', (data = new Tooltip(this, options)))\n      if (typeof option == 'string') data[option]()\n    })\n  }\n\n  $.fn.tooltip.Constructor = Tooltip\n\n  $.fn.tooltip.defaults = {\n    animation: true\n  , placement: 'top'\n  , selector: false\n  , template: '<div class=\"tooltip\"><div class=\"tooltip-arrow\"></div><div class=\"tooltip-inner\"></div></div>'\n  , trigger: 'hover'\n  , title: ''\n  , delay: 0\n  }\n\n}(window.jQuery);\n","/home/travis/build/npmtest/node-npmtest-monitor-dashboard/node_modules/monitor-dashboard/lib/js/AppTemplate.js":"// AppTemplate.js (c) 2010-2014 Loren West and other contributors\n// May be freely distributed under the MIT license.\n// For further details and documentation:\n// http://github.com/lorenwest/monitor-dashboard\n(function(root){\n\n  // Module loading\n  var Monitor = root.Monitor || require('monitor'),\n      logger = Monitor.getLogger('AppTemplate'),\n      UI = Monitor.UI,\n      Backbone = Monitor.Backbone,\n      _ = Monitor._,\n      FS = require('fs'),\n      Path = require('path'),\n      Template = UI.Template,\n      appPath = process.argv[3],\n      appName = Path.basename(appPath),\n      shortAppName = Path.basename(appPath, '-monitor');\n\n  // Log [INFO] to the console for this process\n  Monitor.Log.on('info.*', Monitor.Log.console);\n\n  /**\n  * This module builds an application template on load.  It is *not* asynchronous\n  * as it is designed to be run from the command line.\n  */\n\n  // Splash\n  logger.info('Splash', 'Creating monitor-dashboard application: ' + appName);\n\n  // Warn if the application doesn't end in -monitor\n  if (appName === shortAppName) {\n    logger.warn('Convention', 'By convention, monitor apps should be named {appName}-monitor');\n    logger.warn('Convention', 'where appName is the thing being monitored.');\n  }\n\n  // Try creating the application directory\n  try {\n    FS.mkdirSync(appPath);\n  } catch(e) {\n    if (e.code === 'EEXIST') {\n      logger.fatal('Mkdir', 'The application directory \"' + appName + '\" already exists.  Not overwriting.');\n    }\n    if (e.code === 'ENOENT') {\n      logger.fatal('Mkdir', 'Cannot create app directory \"' + appName + '\".  Reason: directory \"' + Path.dirname(appPath) + '\" not found');\n    }\n    else {\n      logger.fatal('Mkdir', 'Cannot create the directory \"' + appName + '\" for the application.  Reason:' + e.toString());\n    }\n    process.exit(1);\n  }\n\n  // Build the template parameters\n  var templateParams = {\n    appName: appName,\n    appDescription: shortAppName.substr(0,1).toUpperCase() + shortAppName.substr(1) + ' Monitor',\n    shortAppName: shortAppName\n  };\n\n  // Output the specified file from the template directory\n  var outputFile = function(dirpath, file) {\n    var templateFile = Path.join(__dirname, '../template/app', dirpath, file),\n        outputFile = Path.join(appPath, dirpath, file);\n    try {\n      var template = new Template({text: FS.readFileSync(templateFile).toString(), watchFile:false});\n      FS.writeFileSync(outputFile, template.apply(templateParams));\n    } catch(e) {\n      logger.fatal('Template', 'Cannot process template file: ' + templateFile + '. reason: ', e.toString());\n      process.exit(1);\n    }\n  }\n\n  // Traverse the app template directory, outputting all files\n  var outputDir = function(dirpath) {\n    try {\n\n      // Make the directory under the app\n      if (dirpath !== '/') {\n        FS.mkdirSync(Path.join('.', appPath, dirpath));\n      }\n\n      // Read the template directory\n      var templateDir = Path.join(__dirname, '../template/app', dirpath);\n      var files = FS.readdirSync(templateDir);\n      files.forEach(function(file) {\n        var fullFile = Path.join(templateDir, file);\n        var stat = FS.statSync(fullFile);\n        if (stat.isDirectory()) {\n          // Go into it\n          outputDir(Path.join(dirpath, file));\n        }\n        else {\n          outputFile(dirpath, file);\n        }\n      });\n\n    } catch(e) {\n      logger.fatal('Template', 'Cannot process template directory: ' + dirpath + '. reason: ', e.toString());\n      process.exit(1);\n    }\n  }\n  outputDir('/');\n\n  // Success\n  logger.info('Success', 'Created the monitor-dashboard app in directory: ' + appPath);\n  logger.info('Success', 'To run the application:');\n  logger.info('Success', '$ cd ' + appPath);\n  logger.info('Success', '$ npm install');\n  logger.info('Success', '$ node monitor');\n  process.exit(0);\n\n}(this));\n","/home/travis/build/npmtest/node-npmtest-monitor-dashboard/node_modules/monitor-dashboard/lib/js/ComponentSettingsView.js":"/*global window document $ localStorage alert*/\n\n// ComponentSettingsView.js (c) 2010-2014 Loren West and other contributors\n// May be freely distributed under the MIT license.\n// For further details and documentation:\n// http://github.com/lorenwest/monitor-dashboard\n(function(root){\n\n  // Module loading\n  var Monitor = root.Monitor || require('monitor'),\n      UI = Monitor.UI,\n      Template = UI.Template,\n      Backbone = Monitor.Backbone,\n      _ = Monitor._,\n      customSettings = null,\n      template = null;\n\n  /**\n  * Component settings dialog view\n  *\n  * @class ComponentSettingsView\n  * @extends SettingsView\n  * @constructor\n  */\n  var ComponentSettingsView = UI.ComponentSettingsView = UI.SettingsView.extend({\n\n    // Constructor\n    initialize: function(options) {\n      var t = this;\n      t.modelBinder = new Backbone.ModelBinder();\n      t.viewOptionBinder = new Backbone.ModelBinder();\n      t.monitorParamBinder = new Backbone.ModelBinder();\n      t.pageView = options.pageView;\n      t.componentView = options.componentView;\n      t.model = t.componentView.model;\n      if (!template) {\n        template = Template.fromDOM('#nm-template-ComponentSettings');\n      }\n    },\n\n    // Event declarations\n    events: {\n      \"click .btn-primary\"       : \"saveChanges\",\n      \"click .btn-cancel\"        : \"cancelChanges\",\n      \"click .nm-cs-view-source\" : \"toggleViewSource\",\n      \"click .nm-cs-edit\"        : \"toggleEditSource\",\n      \"click .nm-cs-save\"        : \"toggleEditSource\",\n      \"click .nm-cs-copy\"        : \"copy\",\n      \"click .nm-cs-remove\"      : \"remove\",\n      \"click .nm-cs-cancel\"      : \"cancelEditSource\",\n      \"click h4\"                 : \"toggleSection\",\n      \"keydown\"                  : \"onKeydownLocal\"\n    },\n\n    // This is called once after construction to render the\n    // components onto the screen.  The components change their\n    // value when the data model changes.\n    render: function() {\n      var t = this;\n      t.$el.append(template.apply({}));\n\n      t.editor = t.$('.nm-cs-source-edit');\n      t.sourceButton = t.$('.nm-cs-view-source');\n\n      // Get bindings to 'name=' attributes before custom views are rendered\n      t.componentBindings = Backbone.ModelBinder.createDefaultBindings(t.$el, 'name');\n    },\n\n    // Set the specified data model into the component, specifying\n    // any custom component settings view\n    setModel: function(model, componentView, customView) {\n      var t = this,\n          componentPane = t.$('.nm-cs-component');\n\n      // Remember the model state on entry\n      t.model = model;\n      t.componentView = componentView;\n      t.monitor = model.get('monitor');\n      t.originalModel = t.model.toJSON({trim:false});\n\n      // Remove any inner views\n      if (t.sourceView) {\n        t.sourceView.remove();\n      }\n      if (t.customView) {\n        t.customView.remove();\n      }\n\n      // Clean up prior monitorParams\n      if (t.monitorParams) {\n        t.monitorParams.off('change');\n      }\n\n      // Create the custom settings view\n      if (customView) {\n        t.customView = new customView({\n          model: t.model.get('viewOptions'),\n          monitor: t.model.get('monitor'),\n          pageView: UI.pageView,\n          component: t.model,\n          componentView: componentView\n        });\n        t.$('.nm-cs-view-settings').append(t.customView.el);\n        t.customView.render();\n\n        // Attach tooltips to anything with a title\n        UI.tooltip(t.$('*[title]'));\n      }\n\n      // Normal data binding - name to model\n      t.modelBinder.bind(t.model, t.$el, t.componentBindings);\n\n      // Bind data-view-option elements to component.viewOptions\n      t.viewOptionBinder.bind(\n        t.model.get('viewOptions'),\n        componentPane,\n        Backbone.ModelBinder.createDefaultBindings(componentPane, 'data-view-option')\n      );\n\n      // Bind data-monitor-param elements to monitor.initParams.\n      // This is a bit more difficult because initParams isnt a Backbone model.\n      // Copy into a Backbone model, and bind to that.\n      t.monitorParams = new Backbone.Model(t.monitor.get('initParams'));\n      t.monitorParamBinder.bind(\n        t.monitorParams,\n        componentPane,\n        Backbone.ModelBinder.createDefaultBindings(componentPane, 'data-monitor-param')\n      );\n      t.monitorParams.on('change', function() {\n        t.monitor.set('initParams', t.monitorParams.toJSON());\n      });\n\n      // Instantiate the source view\n      t.sourceView = new UI.JsonView({\n        model: t.model.toJSON({trim:false})\n      });\n      t.sourceView.render();\n      t.$('.nm-cs-source-view').append(t.sourceView.$el);\n    },\n\n    refreshSubViews: function(e) {\n      var t = this;\n    },\n\n    // Detect changes on keydown - after the value has been set\n    onKeydownLocal: function(e) {\n      var t = this;\n\n      // Make view options changes immediately on keydown\n      // Note: Don't be so aggressive with monitor initParams, because that\n      // could result in backend round-trips for each keystroke.\n      setTimeout(function(){\n        t.viewOptionBinder._onElChanged(e);\n      },0);\n\n      // Call the parent keydown\n      t.onKeydown(e);\n    },\n\n    // Copy the component\n    copy: function() {\n      var t = this;\n\n      // Add the component to the model, then to the page view\n      var copy = t.model.toJSON();\n      delete copy.id;\n      var component = t.pageView.model.addComponent(copy.viewClass);\n      component.set(copy);\n\n      // Position the component on top left\n      var cv = t.pageView.getComponentView(component.get('id'));\n      cv.raiseToTop(true);\n      cv.moveToLeft();\n      t.pageView.leftJustify();\n      t.pageView.centerPage();\n\n      // Close the dialog box\n      t.closeDialog();\n    },\n\n    // Remove the component?\n    remove: function() {\n      var t = this;\n      t.closeDialog();\n      // Wait for the dialog to close so component revoval is visible\n      setTimeout(function(){\n        t.componentView.close();\n      }, 600);\n    },\n\n    // Validate the raw source in the editor, setting the model if valid\n    // and returning true/false based on valid JSON\n    validateSource: function() {\n      var t = this,\n          val = t.editor.val();\n      if (val) {\n        try {\n          // Throw away parse errors while typing\n          t.model.set(JSON.parse(val));\n        } catch (e) {\n          return false;\n        }\n      } else {\n        // Confirm deletion if user removes everything in the JSON window\n        if (window.confirm('Are you sure you want to remove this component?')) {\n          t.pageView.model.get('components').remove(t.model);\n          $('#nm-cv-settings').modal('hide');\n        } else {\n          // Reset source data\n          t.fillSourceData();\n        }\n      }\n      return true;\n    }\n\n  });\n\n}(this));\n","/home/travis/build/npmtest/node-npmtest-monitor-dashboard/node_modules/monitor-dashboard/lib/js/ComponentView.js":"/*global window document $ localStorage alert*/\n\n// ComponentView.js (c) 2010-2014 Loren West and other contributors\n// May be freely distributed under the MIT license.\n// For further details and documentation:\n// http://github.com/lorenwest/monitor-dashboard\n(function(root){\n\n  // Module loading\n  var Monitor = root.Monitor || require('monitor'),\n      Backbone = Monitor.Backbone, _ = Monitor._,\n      UI = Monitor.UI,\n      MonitorView = UI.MonitorView,\n      Template = UI.Template,\n      log = Monitor.getLogger('ComponentView'),\n      settingsView = null,\n      customSettings = null,\n      initOverrides = null,\n      template = null;\n\n  var DRAG_GRID_SNAP = 10;\n\n  /**\n  * ComponentView is the window container for the specific MonitorView.\n  *\n  * It contains common controls for opening view settings, moving and\n  * sizing the viewport.\n  *\n  * @class ComponentView\n  * @extends Backbone.View\n  * @constructor\n  */\n  var ComponentView = UI.ComponentView = Backbone.View.extend({\n\n    initialize: function(options) {\n\n      // Build the template from the individual templates\n      if (!template) {\n        template = Template.fromDOM('#nm-template-ComponentView');\n      }\n\n      // Build monitor initParams override from URL parameters\n      // TODO: Use a real url parser\n      if (!initOverrides) {\n        initOverrides = {};\n        var search = window.location.search;\n        if (search) {\n          var parts = search.substr(1).split('&');\n          for (var i=0; i < parts.length; i++) {\n            var nameVal = parts[i].split('=');\n            initOverrides[nameVal[0]] = nameVal[1];\n          }\n        }\n      }\n    },\n\n    // Event declarations\n    events: {\n      \"mousedown .nm-cv\"            : \"dragStart\",\n      \"mousedown .nm-cv-resize\"     : \"resizeStart\",\n      \"click .nm-cv-close\"          : \"close\",\n      \"mousedown .nm-cv-status-box\" : \"toggleStatus\",\n      \"mousedown .nm-cv-title span\" : \"openSettings\",\n      \"mousedown .nm-cv-settings\"   : \"openSettings\"\n    },\n\n    render: function() {\n      var t = this,\n          component = t.model,\n          monitor = component.get('monitor'),\n          position = component.get('position'),\n          viewClassParts = component.get('viewClass').split('.'),\n          appName = viewClassParts[0],\n          viewClassName = viewClassParts[1];\n\n      // Get a good logging context\n      t.logCtxt = {\n        appName: appName,\n        viewClassName: viewClassName,\n        montor: monitor.get('initParams'),\n        position: position\n      };\n\n      // Precondition checks\n      if (!UI.app[appName]) {\n        log.error('render.monitorAppNotLoaded', appName, t.logCtxt);\n        return;\n      }\n      t.viewClass = UI.app[appName][viewClassName];\n      if (!t.viewClass) {\n        log.error(\"render.viewClassNotLoaded\", viewClassParts.join('.'), t.logCtxt);\n        return;\n      }\n\n      // Instantiate the component settings view the first time\n      if (!settingsView) {\n        log.info('render.newSettingsView', t.logCtxt);\n        settingsView = new UI.ComponentSettingsView({\n          model: t.model,\n          pageView: UI.pageView,\n          componentView:t\n        });\n        settingsView.render();\n        UI.pageView.$el.append(settingsView.$el);\n      }\n\n      // Instantiate the generic component view\n      log.info('render.component', component.toJSON(), t.logCtxt);\n      t.$el.html(template.apply(component.toJSON()))\n        .attr({id: component.id});\n      var viewport = t.$('.nm-cv-viewport');\n      viewport.addClass(viewClassParts.join('-'));\n\n      // Apply styles for this component ID\n      var applyStyles = function() {\n        var styles = {},\n            viewOptions = component.get('viewOptions'),\n            title = viewOptions.get('title') || '',\n            background = viewOptions.get('background'),\n            css = component.get('css');\n        for (var selector in css) {\n          styles['#' + component.id + ' ' + selector] = css[selector];\n        }\n        $.styleSheet(styles, 'nm-cv-css-' + component.id);\n        t.$('.nm-cv')\n          .toggleClass('background', background === true)\n          .toggleClass('title', title.length > 0);\n        t.$('.nm-cv-title span').text(title);\n      };\n      applyStyles();\n      component.on('change:css change:viewOptions', applyStyles);\n\n      // Destroy this component, and render a new component if\n      // the underlying monitor definition changes.\n      var onMonitorChange = function() {\n\n        // Don't continue if the probe portion was what changed.\n        var thisMonitor = JSON.stringify(monitor.toMonitorJSON());\n        if (thisMonitor === t.priorMonitor) {\n          return;\n        }\n\n        // Remove the component listeners\n        log.info('render.monitorChange', t.logCtxt);\n        component.off('change:css change:viewOptions', applyStyles);\n        component.off('change:monitor', onMonitorChange, t);\n\n        // Disconnect, then build a fresh component\n        t.connectMonitor(false, function(){\n          UI.pageView.removeComponent(t.model);\n          UI.pageView.addComponent(t.model);\n        });\n      };\n\n      // Build the inner view initialization parameters\n      var viewInit = {\n        el: viewport,\n        pageView: UI.pageView,\n        component: t.model,\n        componentView: t,\n        monitor: t.model.get('monitor'),\n        viewOptions: t.model.get('viewOptions')\n      };\n\n      // Initialize the inner view, but defer rendering until the monitor is\n      // connected. This allows connect events to be attached in the view\n      // initialize (if desired), and the monitor to be connected and filled\n      // with model data prior to the render() which usually needs the data.\n      t.view = new t.viewClass(viewInit);\n\n      // Connect the monitor\n      var statusBox = t.$('.nm-cv-status-box');\n      statusBox.addClass('connecting');\n      t.connectMonitor(true, function(error) {\n\n        // Render even if errors happened\n        t.view.render();\n        if (error) {\n          log.error('connectMonitor', t.logCtxt, error);\n        }\n        log.info('innerViewRendered', t.logCtxt);\n\n        // Connect tooltips to the component and internal view\n        UI.tooltip(t.$('*[title]'));\n\n        // Run the onInit function if specified\n        if (t.model.get('onInit')) {\n          t.runOnInit();\n        }\n\n        // Monitor changes to the monitor\n        t.priorMonitor = JSON.stringify(monitor.toMonitorJSON());\n        component.on('change:monitor', onMonitorChange, t);\n\n      });\n\n      // If no probe to connect with, remove status indicator\n      if (!monitor.get('probeClass')) {\n        statusBox.removeClass('connecting').addClass('unmonitored');\n      }\n\n      // Change the button state on connect/disconnect\n      monitor.on('connect', t.onConnect, t);\n      monitor.on('disconnect', t.onDisconnect, t);\n\n    },\n\n    /**\n    * Close the component view\n    *\n    * This removes the component from the model, closing the view and leaving\n    * the form in a dirty state.\n    *\n    * @method close\n    */\n    close: function() {\n      var t = this;\n      UI.hideToolTips();\n      UI.pageView.model.get('components').remove(t.model);\n      t.connectMonitor(false);\n      t.view.remove();\n    },\n\n    /**\n    * Connect or disconnect the monitor, calling the callback when done.\n    *\n    * @method connectMonitor\n    * @param connect {boolean} Connect if true, disconnect if false\n    * @param callback(error)\n    */\n    connectMonitor: function(connect, callback) {\n      callback = callback || function(){};\n      var t = this,\n          needsConnecting = false,\n          logMethod = (connect ? 'connectMonitor' : 'disconnectMonitor'),\n          originalParams = null,\n          monitor = t.model.get('monitor'),\n          isConnected = monitor.isConnected();\n\n      // Determine if we need to connect/disconnect\n      if (\n          (connect && !isConnected && monitor.get('probeClass')) ||\n          (!connect && isConnected)) {\n        needsConnecting = true;\n      }\n\n      // If no need to connect, callback on next tick.  This makes the\n      // call stack consistent regardless of the presence of monitors.\n      if (!needsConnecting) {\n        log.info(logMethod + '.alreadyConnected', t.logCtxt);\n        setTimeout(function(){\n          callback(null);\n        },0);\n        return;\n      }\n\n      // If connecting, override the init params with url params\n      if (connect) {\n        originalParams = monitor.get('initParams');\n        monitor.set(\n          {initParams: _.extend({}, originalParams, initOverrides)},\n          {silent: true}\n        );\n      }\n      else {\n        // If disconnecting, remove all change listeners\n        monitor.off('change');\n      }\n\n      // Connect or disconnect, calling the callback when done\n      var connectFn = connect ? 'connect' : 'disconnect';\n      log.info(logMethod, t.logCtxt);\n      monitor[connectFn](function(error) {\n\n        // Replace original initParams (so the page isn't dirty)\n        // Acutal init params will become attributes of the monitor object\n        if (originalParams) {\n          monitor.set(\n            {initParams: originalParams},\n            {silent: true}\n          );\n        }\n\n        // If disconnecting, clear the probe data\n        if (!connect) {\n          var probeElems = monitor.toProbeJSON();\n          delete probeElems.id;\n          monitor.set(probeElems, {unset:true});\n        }\n\n        // Callback passing error if set\n        return callback(error);\n      });\n    },\n\n    // Toggle the connected status on/off\n    toggleStatus: function(e) {\n      var t = this,\n          statusBox = t.$('.nm-cv-status-box'),\n          connected = statusBox.hasClass('connected');\n\n      statusBox.addClass('connecting');\n      t.connectMonitor(!connected);\n      e.stopPropagation();\n    },\n\n    onConnect: function() {\n      var t = this,\n          statusBox = t.$('.nm-cv-status-box');\n      statusBox.removeClass('connecting').toggleClass('connected', true);\n    },\n\n    onDisconnect: function() {\n      var t = this,\n          statusBox = t.$('.nm-cv-status-box');\n      statusBox.removeClass('connecting').toggleClass('connected', false);\n    },\n\n    // Open the component settings dialog\n    openSettings: function(e) {\n      var t = this;\n      UI.pauseTour();\n\n      // Set the component model into the settings view\n      settingsView.setModel(t.model, t, t.viewClass['SettingsView']);\n\n      // Center and show the settings\n      $('#nm-cv-settings').centerBox().css({top:40}).modal('show');\n      e.stopPropagation();\n\n      // Place the cursor into the first field once the form fades in\n      setTimeout(function(){\n        settingsView.$('#nm-cv-settings input').first().focus();\n      }, 500);\n    },\n\n    // This executes the onInit code contained in the component model\n    runOnInit: function() {\n      var t = this,\n          pageView = UI.pageView,\n          pageModel = pageView.model,\n          view = t.view,\n          getMonitor = function(id) {return pageView.getMonitor(id);},\n          monitor = t.model.get('monitor');\n\n      // Execute the onInit\n      try {\n        eval(t.model.get('onInit'));\n      }\n      catch (e) {\n        log.error('onInitException', t.logCtxt, e);\n        alert(\"Component onInit exception.  See error log for more information.\");\n      }\n    },\n\n    // Raise this component to the top of the stack\n    // If persist is true, persist any new zIndex into the CSS of the data model\n    // Returns the component zIndex\n    raiseToTop: function(persist) {\n      var t = this,\n          viewElem = t.$('.nm-cv'),\n          thisZIndex = (viewElem.css('zIndex') === 'auto' ? 0 : +viewElem.css('zIndex')),\n          components = UI.pageView.model.get('components'),\n          maxZIndex = 0;\n\n      // Get the maximum z-index (disregarding this)\n      components.forEach(function(component) {\n        var id = component.get('id'),\n            elem = $('#' + id + ' .nm-cv'),\n            zIndex = elem.css('zIndex') === 'auto' ? 0 : +elem.css('zIndex');\n\n        if (id === t.model.get('id')) {return;}\n        if (zIndex > maxZIndex) {\n          maxZIndex = zIndex;\n        }\n      });\n\n      // Set this z-index to the max + 1 (unless already there)\n      if (maxZIndex >= thisZIndex) {\n        thisZIndex = maxZIndex + 1;\n        if (persist) {\n          // Change the model CSS.\n          var css = _.clone(t.model.get('css')),\n              parsedCss = $.parseStyleString(css['.nm-cv'] || '');\n\n          parsedCss['z-index'] = thisZIndex;\n          css['.nm-cv'] = $.makeStyleString(parsedCss);\n          t.model.set({css: css});\n        } else {\n          t.$('.nm-cv').css({zIndex: thisZIndex});\n        }\n      }\n\n      // Return this zIndex\n      return thisZIndex;\n    },\n\n    // Move the component to the left of others by the width + 10\n    moveToLeft: function() {\n      var t = this,\n          viewElem = t.$('.nm-cv'),\n          width = viewElem.outerWidth() + 10;\n\n      // Change the model CSS.\n      var css = _.clone(t.model.get('css')),\n          parsedCss = $.parseStyleString(css['.nm-cv'] || '');\n      parsedCss['left'] = '-' + width + 'px';\n      css['.nm-cv'] = $.makeStyleString(parsedCss);\n      t.model.set({css: css});\n    },\n\n    // Component drag/drop positioning\n    dragStart: function(e) {\n      var t = this,\n          thisZIndex = 0,\n          inTitle = $(e.target).hasClass('nm-cv-title'),\n          isEditMode = $('.nm-pv').hasClass('edit-mode'),\n          persist = true;  // Persist changes to the model?\n\n      // OK to drag if edit-mode or we're dragging from the title bar\n      if (!isEditMode && !inTitle) {\n        return;\n      }\n\n      // Bring component to the top if [SHIFT] is pressed\n      if (e.shiftKey) {\n        // Bring window to top\n        thisZIndex = t.raiseToTop(true);\n      }\n\n      // Record the current CSS to include the (changed) zIndex\n      var viewElem = t.$('.nm-cv'),\n          css = _.clone(t.model.get('css')),\n          parsedCss = $.parseStyleString(css['.nm-cv'] || ''),\n          zoomRatio = window.innerWidth / window.outerWidth,\n          newPosition = {\n            top: (parseInt(viewElem.css('top'), 10) || 0) * zoomRatio,\n            left: (parseInt(viewElem.css('left'), 10) || 0) * zoomRatio\n          },\n          oldPosition = _.extend({},newPosition),\n          offset = {\n            top: e.pageY - newPosition.top,\n            left: e.pageX - newPosition.left\n          };\n\n      function drag(e) {\n        newPosition.top = Math.max(e.pageY - offset.top, 0);\n        newPosition.left = e.pageX - offset.left;\n\n        // Snap to grid unless [SHIFT] is pressed\n        if (!e.shiftKey) {\n          newPosition.top = newPosition.top - newPosition.top % DRAG_GRID_SNAP;\n          newPosition.left = newPosition.left - newPosition.left % DRAG_GRID_SNAP;\n        }\n        viewElem.css(newPosition);\n      }\n\n      function drop(e) {\n        $(document).unbind(\"mousemove\", drag).unbind(\"mouseup\", drop);\n\n        // Persist the changes into the data model (if the window moved)\n        if (persist && (oldPosition.top !== newPosition.top || oldPosition.left !== newPosition.left)) {\n          // Fold position into component model CSS\n          parsedCss.top = newPosition.top + 'px';\n          parsedCss.left = newPosition.left + 'px';\n          if (thisZIndex) {\n            parsedCss['z-index'] = thisZIndex;\n          }\n          css['.nm-cv'] = $.makeStyleString(parsedCss);\n          t.model.set({css: css});\n          viewElem.css({top:'',left:''});\n        }\n\n        // Re-center the screen\n        UI.pageView.centerPage();\n      }\n\n      $(document).bind(\"mousemove\", drag).bind(\"mouseup\", drop);\n      e.preventDefault && e.preventDefault();\n    },\n\n    // Component resizing\n    resizeStart: function(e) {\n      var t = this,\n          isEditMode = $('.nm-pv').hasClass('edit-mode'),\n          thisZIndex = 0,\n          persist = true,\n          viewport = t.$('.nm-cv-viewport'),\n          css = _.clone(t.model.get('css')),\n          parsedCss = $.parseStyleString(css['.nm-cv-viewport'] || ''),\n          origSize = {\n            height: viewport.height(),\n            width: viewport.width()\n          },\n          newSize = _.extend({},origSize),\n          downPos = {\n            top: e.pageY,\n            left: e.pageX\n          };\n\n      // Bring component to the top unless [SHIFT] is pressed\n      if (e.shiftKey) {\n        // Bring window to top\n        thisZIndex = t.raiseToTop(true);\n      }\n\n      function drag(e) {\n        newSize.height = Math.max(origSize.height + e.pageY - downPos.top, 0);\n        newSize.width = Math.max(origSize.width + e.pageX - downPos.left, 0);\n\n        // Snap to grid unless [SHIFT] is pressed\n        if (!e.shiftKey) {\n          newSize.height = newSize.height - newSize.height % DRAG_GRID_SNAP;\n          newSize.width = newSize.width - newSize.width % DRAG_GRID_SNAP;\n        }\n        t.view.trigger('resize');\n        viewport.css(newSize);\n      }\n\n      function drop(e) {\n        $(document).unbind(\"mousemove\", drag).unbind(\"mouseup\", drop);\n\n        // Set new height/width into the model if it's changed\n        if (persist && (newSize.height !== origSize.height || newSize.width !== origSize.width)) {\n          parsedCss.height = newSize.height + 'px';\n          parsedCss.width = newSize.width + 'px';\n          if (thisZIndex) {\n            parsedCss['z-index'] = thisZIndex;\n          }\n          css['.nm-cv-viewport'] = $.makeStyleString(parsedCss);\n          t.model.set({css: css});\n          viewport.css({height:'',width:''});\n          t.view.trigger('resize');\n        }\n        // Re-center the screen\n        UI.pageView.centerPage();\n      }\n\n      $(document).bind(\"mousemove\", drag).bind(\"mouseup\", drop);\n      e.preventDefault();\n      e.stopPropagation();\n    }\n\n  });\n\n}(this));\n","/home/travis/build/npmtest/node-npmtest-monitor-dashboard/node_modules/monitor-dashboard/lib/js/DropDownMenu.js":"/*global window document $ localStorage alert*/\n\n// DropDownMenu.js (c) 2010-2014 Loren West and other contributors\n// May be freely distributed under the MIT license.\n// For further details and documentation:\n// http://github.com/lorenwest/monitor-dashboard\n(function(root){\n\n  // Module loading\n  var Monitor = root.Monitor || require('monitor'),\n      UI = Monitor.UI,\n      Template = UI.Template,\n      Backbone = Monitor.Backbone,\n      _ = Monitor._,\n      template = null;\n\n  /**\n  * A data driven dropdown menu\n  *\n  * This is a backbone view that presents a dropdown menu of the items\n  * in a backbone collection or JS array.\n  *\n  * @class DropDownMenu\n  * @extends Backbone.View\n  * @constructor\n  * @param contextEl {jQuery} The element to place the dropdown menu over\n  * @param model {Array or Collection} The menu items data model\n  * @param [makeString] {function(item)} Method returning text to display for an item\n  */\n  /** @event select\n  * @param item {Mixed} The item selected\n  * @param index {integer} The index within the model\n  */\n  var DropDownMenu = UI.DropDownMenu = Backbone.View.extend({\n\n    // Event declarations\n    events: {\n      'click li': 'onClick'\n    },\n\n    render: function() {\n      var t = this,\n          lineNum = 0,\n          os = t.options.contextEl.offset(),\n          height = t.options.contextEl.height();\n\n      // Attach the list to DOM\n      t.mask = new UI.ModalMask();\n      t.items = t.$el.html('<ul class=\"nm-ddm-menu dropdown-menu\"></ul>')\n        .appendTo(t.mask.$el)\n        .addClass('nm-ddm dropdown')\n        .css({top:os.top + height, left:os.left})\n        .find('ul');\n\n      // Use or build the toString function\n      var makeString = t.options.makeString || function(item) {\n        return (typeof item === 'string' ? item : JSON.stringify(item));\n      };\n\n      // Add items to the menu\n      t.options.model.forEach(function(item) {\n        $('<li><a>' + makeString(item) + '</a></li>')\n          .data({elem:item, line:lineNum++})\n          .appendTo(t.items);\n      });\n    },\n\n    onClick: function(e) {\n      var t = this,\n          el = $(e.currentTarget);\n      t.trigger('select', el.data('elem'), el.data('line'));\n    }\n\n  });\n\n  // Helper to dynamically add the dropdown caret to an element\n  DropDownMenu.addCaret = function(el) {\n    el\n      .append('<b class=\"caret\"></b>')\n      .addClass('dropdown');\n  };\n\n}(this));\n","/home/travis/build/npmtest/node-npmtest-monitor-dashboard/node_modules/monitor-dashboard/lib/js/IconChooser.js":"// IconChooser.js (c) 2010-2014 Loren West and other contributors\n// May be freely distributed under the MIT license.\n// For further details and documentation:\n// http://github.com/lorenwest/monitor-dashboard\n(function(root){\n\n  // Module loading\n  var Monitor = root.Monitor || require('monitor'),\n      UI = Monitor.UI,\n      Backbone = Monitor.Backbone,\n      _ = Monitor._;\n\n  // Constants\n  var ICON_NAMES = \"glass music search envelope heart star star-empty user film th-large th th-list ok remove zoom-in zoom-out off signal cog trash home file time road download-alt download upload inbox play-circle repeat refresh list-alt lock flag headphones volume-off volume-down volume-up qrcode barcode tag tags book bookmark print camera font bold italic text-height text-width align-left align-center align-right align-justify list indent-left indent-right facetime-video picture pencil map-marker adjust tint edit share check move step-backward fast-backward backward play pause stop forward fast-forward step-forward eject chevron-left chevron-right plus-sign minus-sign remove-sign ok-sign question-sign info-sign screenshot remove-circle ok-circle ban-circle arrow-left arrow-right arrow-up arrow-down share-alt resize-full resize-small plus minus asterisk exclamation-sign gift leaf fire eye-open eye-close warning-sign plane calendar random comment magnet chevron-up chevron-down retweet shopping-cart folder-close folder-open resize-vertical resize-horizontal bar-chart twitter-sign facebook-sign camera-retro key cogs comments thumbs-up thumbs-down star-half heart-empty signout linkedin-sign pushpin external-link signin trophy github-sign upload-alt lemon phone check-empty bookmark-empty phone-sign twitter facebook github unlock credit-card rss hdd bullhorn bell certificate hand-right hand-left hand-up hand-down circle-arrow-left circle-arrow-right circle-arrow-up circle-arrow-down globe wrench tasks filter briefcase fullscreen group link cloud beaker cut copy paper-clip save sign-blank reorder list-ul list-ol strikethrough underline table magic truck pinterest pinterest-sign google-plus-sign google-plus money caret-down caret-up caret-left caret-right columns sort sort-down sort-up envelope-alt linkedin undo legal dashboard comment-alt comments-alt bolt sitemap umbrella paste user-md\";\n\n  /**\n  * A utility class for displaying an icon picker for FontAwesome icons.\n  *\n  * @class IconChooser\n  * @constructor\n  * @param options {Object} View initialization options (See others in Backbone.View)\n  * @param options.el = Select element to bind the chooser to\n  */\n  var IconChooser = UI.IconChooser = Backbone.View.extend({\n\n    initialize: function(options) {\n      var t = this;\n\n      // Append all selector items\n      ICON_NAMES.split(' ').forEach(function(name) {\n        t.$el.append('<option value=\"icon-' + name + '\">icon-' + name + '</option>');\n      });\n\n    }\n\n  });\n\n}(this));\n","/home/travis/build/npmtest/node-npmtest-monitor-dashboard/node_modules/monitor-dashboard/lib/js/JsonView.js":"/*global window document $ localStorage alert*/\n\n// JsonView.js (c) 2010-2014 Loren West and other contributors\n// May be freely distributed under the MIT license.\n// For further details and documentation:\n// http://github.com/lorenwest/monitor-dashboard\n(function(root){\n\n  // Module loading\n  var Monitor = root.Monitor || require('monitor'),\n      UI = Monitor.UI,\n      Template = UI.Template,\n      Backbone = Monitor.Backbone,\n      Mustache = UI.Mustache,\n      _ = Monitor._;\n\n  // Auto-close the sub-element if the toJSON is less than this size\n  var AUTO_CLOSE_CHARS = 30;\n\n  /**\n  * Editor for a Backbone model or Collection\n  *\n  * @class JsonView\n  * @extends Backbone.View\n  * @constructor\n  */\n  var JsonView = UI.JsonView = Backbone.View.extend({\n\n    // For Backbone.View\n    tagName:  \"div\",\n    className:  \"nm-jv\",\n\n    template: {\n      heading: Mustache.compile('<div class=\"heading\">{{value}}</div>'),\n      line: Mustache.compile('<div><span class=\"head\"><i>&nbsp;</i>{{name}}:</span><span class=\"data\">{{{value}}}</span></div>'),\n      inner: Mustache.compile('<div class=\"inner\"></div>'),\n      endInner: Mustache.compile('<div class=\"end-inner\">{{symbol}}</div>')\n    },\n\n    events: {\n      \"click .open-close\":    \"onOpenClose\"\n    },\n\n    initialize: function(options) {\n      var t = this;\n      t.keys = [];\n\n      // The model is either an object, an array, a Backbone Model, or Collection\n      t.isBackbone = t.model instanceof Backbone.Model || t.model instanceof Backbone.Collection;\n\n      // Close all on initial render?\n      t.closedOnInit = options.closedOnInit;\n    },\n\n    // Render new HTML\n    render: function() {\n      var t = this;\n      t.$el.html('');\n\n      // Output the heading if specified\n      if (t.options.heading) {\n        $(t.template.heading({value:t.options.heading})).appendTo(t.$el);\n      }\n\n      // If a non-object, just print it\n      t.json = t.isBackbone ? t.model.toJSON() : t.model;\n      if (typeof t.json !== 'object') {\n        $(t.template.line({name:'value', value:t.json})).appendTo(t.$el);\n        return;\n      }\n      t.keys = _.keys(t.json);\n\n      // Info about each element, keyed by element name\n      // div - The jQuery selector of the element outer div\n      // span - The jQuery selector of the data value span\n      // value - The element raw value\n      // isBackbone - Is the element an instance of a Backbone model?\n      // strValue - The currently displayed value\n      // isArray - True of the element is an array (or collection)\n      // innerDiv - The container for the inner view for objects\n      // innerView - The inner view if the element is an object\n      t.elems = {};\n\n      // Layout the tree (without element data)\n      for (var elemName in t.json) {\n        var elem = t.elems[elemName] = {};\n        elem.value = t.getElemValue(elemName);\n        elem.isBackbone = elem.value instanceof Backbone.Model || elem.value instanceof Backbone.Collection;\n        elem.div = $(t.template.line({name:elemName, value: '&nbsp;'})).appendTo(t.$el);\n        elem.span = $('.data', elem.div);\n\n        // Render a sub-element as another JsonView\n        if (elem.value !== null && typeof elem.value === 'object') {\n          elem.div.addClass('open-close').data({elemName:elemName});\n          $('i', elem.div).html('');\n          elem.innerDiv = $(t.template.inner()).appendTo(t.$el);\n          elem.innerView = new JsonView({\n            model: elem.value,\n            closedOnInit: t.closedOnInit\n          });\n          elem.innerView.render();\n          elem.innerView.$el.appendTo(elem.innerDiv);\n          elem.isArray = _.isArray(elem.value);\n          $(t.template.endInner({symbol:elem.isArray ? \"]\" : \"}\"})).appendTo(elem.innerDiv);\n        }\n      }\n\n      // Bind the change handler\n      if (t.isBackbone) {\n        t.model.bind('change', t.setData, t);\n      }\n\n      // Add element data to the tree\n      t.setData();\n\n      // Reset for future renders\n      t.closedOnInit = false;\n    },\n\n    // Set (or replace) model data in DOM\n    setData: function(newModel) {\n      var t = this;\n      if (newModel) {\n        t.model = newModel;\n      }\n      t.json = t.isBackbone ? t.model.toJSON() : t.model;\n\n      // If a non-object, just print it\n      if (typeof t.json !== 'object') {\n        t.$el.html('');\n        $(t.template.line({name:'value', value:t.json})).appendTo(t.$el);\n        return;\n      }\n\n      // Re-render if the object elements differ\n      var newKeys = _.keys(t.json);\n      if (newKeys.length !== t.keys.length || newKeys.length !== _.intersection(t.keys, newKeys).length) {\n        return t.render();\n      }\n      t.keys = newKeys;\n\n      // Set each element\n      for (var elemName in t.json) {\n        var elem = t.elems[elemName];\n        elem.value = t.getElemValue(elemName);\n        t.setElemValue(elem);\n      }\n      return t;\n    },\n\n    // Get the value of the element with the specified name\n    getElemValue: function(elemName) {\n      var t = this;\n      if (t.isBackbone) {\n        return t.model instanceof Backbone.Collection ? t.model.at(elemName) : t.model.get(elemName);\n      }\n      return t.model[elemName];\n    },\n\n    // Set the DOM element value to the JSON.stringify format\n    setElemValue: function(elem) {\n      var t = this,\n          strValue;\n\n      // Catch recursive stringify\n      try {strValue = JSON.stringify(elem.value);}\n      catch (e) {strValue = \"{object}\";}\n\n      // Set if the value changed\n      if (strValue !== elem.strValue) {\n        var priorStrValue = elem.strValue;\n        elem.strValue = strValue;\n\n        // Set the value of this element or the inner element\n        elem.span.text(strValue);\n        if (elem.innerView) {\n          elem.innerView.model = elem.value;\n          elem.innerView.setData();\n\n          // Set the inner element open or closed\n          var isClosed = false;\n          if (priorStrValue) {\n            isClosed = elem.innerView.isClosed;\n          } else {\n            isClosed = t.closedOnInit ? true : strValue.length < AUTO_CLOSE_CHARS;\n          }\n          t.toggleClosed(elem, isClosed);\n        }\n      }\n    },\n\n    onOpenClose: function(e) {\n      var t = this, elemName = $(e.currentTarget).data('elemName');\n      t.toggleClosed(t.elems[elemName]);\n      e.stopPropagation();\n    },\n\n    toggleClosed: function(elem, closed) {\n      var t = this,\n          strValue = elem.strValue,\n          wasClosed = elem.innerView.isClosed,\n          isClosed = typeof closed === 'undefined' ? !wasClosed : closed;\n\n      elem.innerView.isClosed = isClosed;\n      $(elem.innerDiv, elem.div).toggleClass('closed', isClosed);\n      if (!isClosed) {\n        strValue = elem.isArray ? '[' : '{';\n      }\n      elem.span.text(strValue);\n      $('i', elem.div)\n        .attr('class', 'icon-caret-' + (isClosed ? 'right' : 'down'));\n    },\n\n    remove: function() {\n      var t = this;\n      if (t.isBackbone) {t.model.unbind('change', t.setData, t);}\n      $(t.el).remove();\n    }\n\n  });\n\n}(this));\n","/home/travis/build/npmtest/node-npmtest-monitor-dashboard/node_modules/monitor-dashboard/lib/js/MonitorPicker.js":"/*global window document $ localStorage alert*/\n\n// MonitorPicker.js (c) 2010-2014 Loren West and other contributors\n// May be freely distributed under the MIT license.\n// For further details and documentation:\n// http://github.com/lorenwest/monitor-dashboard\n(function(root){\n\n  // Module loading\n  var Monitor = root.Monitor || require('monitor'),\n      Probe = Monitor.Probe,\n      UI = Monitor.UI,\n      Template = UI.Template,\n      Backbone = Monitor.Backbone,\n      _ = Monitor._,\n      mlvTemplate = null,\n      lineTemplate = null,\n      networkMap = null;\n\n  // Constants\n  var STR_NEW_SERVER = 'Add a server...';\n\n  /**\n  * Utility classes for obtaining monitor host/probe info.\n  *\n  * @class MonitorPicker\n  * @constructor\n  * @param options {Object} View options\n  *     @param options.model {Monitor} The monitor data model to bind to\n  *     @param [options.hideServer=false] {Boolean} Hide the server field?\n  *     @param [options.hideProbe=false] {Boolean} Hide the probeClass field?\n  *     @param [options.hideParams=false] {Boolean} Hide the initParams field?\n  */\n  var MonitorPicker = UI.MonitorPicker = Backbone.View.extend({\n\n    initialize: function(options) {\n      var t = this;\n\n      // TODO: Re-enable initParams\n      t.options.hideParams = true;\n    },\n\n    render: function() {\n      var t = this;\n      t.$el.html(\n        '<div class=\"nm-mp clearfix\">' +\n          '<div class=\"nm-mp-input server\">' +\n            '<label title=\"Choose from the list of servers.  Blank to run the probe in the browser.\">Server</label>' +\n            '<div class=\"nm-mp-server\"></div>' +\n          '</div>' +\n          '<div class=\"nm-mp-input probe\">' +\n            '<label title=\"Choose from the list of available probes in this server\">Probe</label>' +\n            '<div class=\"nm-mp-probe\"></div>' +\n          '</div>' +\n          '<div class=\"nm-mp-input params\">' +\n            '<label>Init Params</label>' +\n            '<div class=\"nm-mp-params\"></div>' +\n          '</div>' +\n        '</div>'\n      );\n\n      // Connect sub-views or hide the section\n      if (t.options.hideServer) {\n        t.$('.server').hide();\n      } else {\n        t.serverView = (new ServerView({\n          el:t.$('.nm-mp-server'),\n          model: t.model\n        })).render();\n      }\n      if (t.options.hideProbe) {\n        t.$('.probe').hide();\n      } else {\n        t.probeView = (new ProbeView({\n          el:t.$('.nm-mp-probe'),\n          model: t.model\n        })).render();\n      }\n      if (t.options.hideParams) {\n        t.$('.params').hide();\n      } else {\n        t.paramsView = (new ParamsView({\n          el:t.$('.nm-mp-params'),\n          model: t.model\n        })).render();\n      }\n    },\n\n    remove: function(){\n      var t = this;\n      if (t.serverView) {\n        t.serverView.remove();\n      }\n      if (t.probeView) {\n        t.probeView.remove();\n      }\n      if (t.paramsView) {\n        t.paramsView.remove();\n      }\n      return Backbone.View.prototype.remove.apply(t);\n    },\n\n  });\n\n  /**\n  * Get a monitor to the NetworkMap probe.\n  *\n  * This may or may not be connected upon return from this function.\n  *\n  * @class MonitorPicker.getNetworkMap()\n  * @return {Monitor} A Monitor to the NetworkMap probe\n  */\n  MonitorPicker.getNetworkMap = function() {\n    if (!networkMap) {\n      networkMap = new Monitor({\n        probeClass:'NetworkMap'\n      });\n\n      // Process a site map change\n      networkMap.on('connect change', function(){\n        var map = networkMap.get('map'),\n            newMap = {},\n            host = window.location.hostname;\n\n        // Add the 'no host' entry for local probes\n        newMap[''] = {};\n        newMap[''][''] = {\n          instances: ['1'],\n          probeClasses: _.keys(Probe.classes)\n        };\n\n        // Convert the special 'localhost' entry into the correctly named host,\n        // and make sure it's at the top of the object.\n        if (host !== 'localhost') {\n          newMap[host] = map.localhost;\n          delete map.localhost;\n        }\n\n        // Silently set changes\n        _.extend(newMap, map);\n        networkMap.set({map: newMap}, {silent:true});\n      });\n\n      // Now connect\n      networkMap.connect();\n    }\n    return networkMap;\n  };\n\n  /**\n  * View for the server component of a montior\n  *\n  * @class MonitorPicker.ServerView\n  * @extends Backbone.View\n  * @constructor\n  */\n  var ServerView = MonitorPicker.ServerView = Backbone.View.extend({\n\n    initialize: function(){\n      var t = this;\n      t.networkMap = MonitorPicker.getNetworkMap();\n\n      // Re-render the view on model change\n      t.model.on('change:hostName change:hostApp change:appInstance change:probeClass', t.render, t);\n    },\n\n    render: function() {\n      var t = this;\n      t.$el.html('<select></select>');\n\n      // Fill the dropdown options once known\n      if (t.networkMap.isConnected()) {\n        t.fillDropdown();\n      } else {\n        t.networkMap.on('connect', t.fillDropdown, t);\n\n        // Fill the initial dropdown text\n        // (while we're waiting for the site map to connect)\n        t.$('select').append('<option>' + t.model.toServerString() + '</option>');\n      }\n    },\n\n    events: {\n      'change select':  'onSelect'\n    },\n\n    onSelect: function(e) {\n      var t = this,\n          value = e.currentTarget.value,\n          select = t.$('select');\n\n      // Add a server?\n      if (value === STR_NEW_SERVER) {\n        alert(\"Add a server dialog...\");\n        select.val('');\n      }\n\n      // Find the server\n      var server = t.findServer(value);\n\n      // Set the monitor fields\n      t.model.set({\n        hostName: server.hostName,\n        appName: server.appName,\n        appInstance: server.appInstance\n      });\n\n    },\n\n    fillDropdown: function() {\n      var t = this,\n          monitorTitle = t.model.toServerString(),\n          monitorInMap = monitorTitle === '',\n          map = t.networkMap.get('map'),\n          select = t.$('select'),\n          hostName, host, displayHost, appName, app, i, server;\n\n      // Create the array of known servers\n      t.servers = [];\n\n      // Clear any prior elements\n      select.html('');\n\n      // We're done watching for connect events\n      t.networkMap.off('connect', t.fillDropdown, t);\n\n      // Build the list of all servers for the dropdown\n      // See the NetworkMap probe for the site map layout\n      for (hostName in map) {\n        if (map.hasOwnProperty(hostName)) {\n          host = map[hostName];\n          for (appName in host) {\n            if (host.hasOwnProperty(appName)) {\n              app = host[appName];\n              for (i = 0; i < app.instances.length; i++) {\n                server = {\n                  hostName: hostName,\n                  appName: appName,\n                  appInstance: app.instances[i]\n                };\n                server.title = Monitor.toServerString(server);\n                if (monitorTitle === server.title) {\n                  monitorInMap = true;\n                }\n                t.servers.push(server);\n              }\n            }\n          }\n        }\n      }\n\n      // If the monitor isn't in the map, add a map entry for it\n      if (!monitorInMap) {\n        t.servers.splice(1, null, t.model.toMonitorJSON());\n        t.servers[1].title = monitorTitle;\n      }\n\n      // Fill the items\n      t.servers.forEach(function(server) {\n        var selected = server.title === monitorTitle;\n        select.append(\n          '<option' + (selected ? ' selected=\"selected\"' : '') + '>' +\n          server.title + '</option>');\n      });\n\n      // Add the 'new server' option\n      // TODO\n      // select.append('<option>' + STR_NEW_SERVER + '</option>');\n    },\n\n    findServer: function(title) {\n      var t = this,\n          found = null;\n      t.servers.forEach(function(server){\n        if (server.title === title) {\n          found = server;\n        }\n      });\n\n      // No server found.  Default to the no-server element\n      return found || t.servers[0];\n    },\n\n    remove: function(){\n      var t = this;\n      t.model.off('change:hostName change:hostApp change:appInstance change:probeClass', t.render, t);\n      return Backbone.View.prototype.remove.apply(t);\n    }\n\n  });\n\n  /**\n  * View for the probe component of a montior\n  *\n  * @class MonitorPicker.ProbeView\n  * @extends Backbone.View\n  * @constructor\n  */\n  var ProbeView = MonitorPicker.ProbeView = Backbone.View.extend({\n\n    initialize: function(){\n      var t = this;\n      t.networkMap = MonitorPicker.getNetworkMap();\n\n      // Re-render the view on model change\n      t.model.on('change:hostName change:hostApp change:appInstance change:probeClass', t.render, t);\n    },\n\n    render: function() {\n      var t = this;\n      t.$el.html('<select></select>');\n\n      // Fill the dropdown options once known\n      if (t.networkMap.isConnected()) {\n        t.fillDropdown();\n      } else {\n        t.networkMap.on('connect', t.fillDropdown, t);\n      }\n    },\n\n    events: {\n      'change select':  'onSelect'\n    },\n\n    onSelect: function(e) {\n      var t = this,\n          value = e.currentTarget.value;\n\n      // Set the monitor fields\n      t.model.set('probeClass', value);\n    },\n\n    fillDropdown: function() {\n      var t = this,\n          select = t.$('select'),\n          map = t.networkMap.get('map'),\n          hostName = t.model.get('hostName'),\n          appName = t.model.get('appName'),\n          probeClass = t.model.get('probeClass');\n\n\n      // We're done watching for change events\n      t.networkMap.off('connect', t.fillDropdown, t);\n\n      // Clear any prior elements\n      select.html('');\n\n      // If the host/app isn't in the map, we're done\n      if (!map[hostName] || !map[hostName][appName]) {\n        return;\n      }\n\n      // Get the list of available probe classes\n      t.probes = map[hostName][appName].probeClasses;\n\n      // Add the blank entry\n      select.append('<option></option>');\n\n      // Fill the known probes\n      t.probes.forEach(function(probe) {\n        var selected = probe === probeClass;\n        select.append(\n          '<option' + (selected ? ' selected=\"selected\"' : '') + '>' +\n          probe + '</option>');\n      });\n\n    },\n\n    remove: function(){\n      var t = this;\n      t.model.on('change:hostName change:hostApp change:appInstance change:probeClass', t.render, t);\n      return Backbone.View.prototype.remove.apply(t);\n    }\n\n  });\n\n  /**\n  * View for the initParams component of a montior\n  *\n  * @class MonitorPicker.ParamsView\n  * @extends Backbone.View\n  * @constructor\n  */\n  var ParamsView = MonitorPicker.ParamsView = Backbone.View.extend({\n\n    initialize: function(){\n      var t = this;\n    },\n\n    remove: function(){\n      var t = this;\n      return Backbone.View.prototype.remove.apply(t);\n    },\n\n    events: {\n      'click'   :  'edit'\n    },\n\n    render: function() {\n      var t = this;\n          val = JSON.stringify(t.model.get('initParams'));\n      t.$el.text(val);\n    },\n\n    edit: function() {\n      var t = this;\n    }\n\n  });\n\n}(this));\n","/home/travis/build/npmtest/node-npmtest-monitor-dashboard/node_modules/monitor-dashboard/lib/js/NewComponentView.js":"/*global window document $ localStorage alert*/\n\n// NewComponentView.js (c) 2010-2014 Loren West and other contributors\n// May be freely distributed under the MIT license.\n// For further details and documentation:\n// http://github.com/lorenwest/monitor-dashboard\n(function(root){\n\n  // Module loading\n  var Monitor = root.Monitor || require('monitor'),\n      UI = Monitor.UI,\n      Template = UI.Template,\n      Backbone = Monitor.Backbone,\n      _ = Monitor._,\n      template = null,\n      iconTemplate = null;\n\n  // Constants\n  var DEFAULT_ICON = '/static/css/default/images/default-component-icon.png';\n\n  /**\n  * Add a component to the page\n  *\n  * @class NewComponentView\n  * @extends Backbone.View\n  * @constructor\n  */\n  var NewComponentView = UI.NewComponentView = Backbone.View.extend({\n\n    // Constructor\n    initialize: function(options) {\n      var t = this;\n      t.pageView = options.pageView;\n      t.model = t.pageView.model;\n      if (!template) {\n        template = Template.fromDOM('#nm-template-NewComponentView');\n      }\n    },\n\n    events: {\n      'click .nm-nc-category div' : 'selectCategory'\n    },\n\n    render: function() {\n      var t = this;\n\n      // Attach the template to the parent element\n      t.$el.append(template.apply(t.model.toJSON()));\n      var canvas = t.$('.nm-nc-canvas');\n\n      // Gather icons and categories\n      t.icons = {};  // Key=viewClass, data = ComponentIcon\n      t.categories = {}; // Key = category name, data = Sorted array of ComponentIcons\n      t.categories.All = [];\n      t.categoryElems = {};\n      for (var appName in UI.app) {\n        var app = UI.app[appName];\n        for (var viewName in app) {\n          var view = app[viewName];\n          if (view.prototype instanceof Backbone.View && view.prototype.name) {\n            view.prototype.appName = appName;\n\n            // Render the icon (but don't connect it)\n            viewClass = appName + '.' + viewName;\n            var icon = new ComponentIcon({\n              model: view.prototype,\n              pageView: t.pageView,\n              viewClass: viewClass});\n            icon.render();\n\n            // Add the icon to the All category unless hidden\n            var categories = view.prototype.tags || [];\n            if (categories.indexOf('Hidden') < 0) {\n              t.categories.All.push(icon);\n            }\n\n            // Add the icon to each category\n            t.icons[viewClass] = icon;\n            categories.forEach(function(catName) {\n              if (catName !== 'Hidden') {\n                catName = $.titleCase(catName);\n                t.categories[catName] = t.categories[catName] || [];\n                t.categories[catName].push(icon);\n              }\n            });\n          }\n        }\n      }\n\n      // Sort and display the categories\n      var ol = t.$('.nm-nc-category').html('');\n      _.keys(t.categories).sort().forEach(function(catName){\n        t.categoryElems[catName] = $('<div>' + catName + '</div>').appendTo(ol);\n      });\n\n      // Show all icons\n      t.showCategory('All');\n\n    },\n\n    showCategory: function(name) {\n      var t = this,\n          icons = t.categories[name];\n\n      // Get a fresh canvas and show the icons\n      var canvas = t.$('.nm-nc-canvas').html('');\n      icons.forEach(function(icon) {\n        canvas.append(icon.$el);\n        icon.delegateEvents();\n      });\n\n      // Attach tooltips\n      UI.tooltip(t.$('*[title]'));\n\n      // Highlight the category\n      t.$('.nm-nc-category div').removeClass('selected');\n      t.categoryElems[name].addClass('selected');\n    },\n\n    selectCategory: function(e) {\n      var t = this;\n      t.showCategory($(e.currentTarget).html());\n    }\n\n  });\n\n  /**\n  * Visual representation of a component class\n  *\n  * @class ComponentIcon\n  * @extends Backbone.View\n  * @constructor\n  */\n  var ComponentIcon = Backbone.View.extend({\n\n    // Constructor\n    initialize: function(options) {\n      var t = this;\n      t.model.title = t.model.description;\n      t.pageView = options.pageView;\n      /*\n      if (t.model.website) {\n        t.model.title += ' <a href=\"' + t.model.website + '\">(website)</a>';\n      }\n      */\n      if (t.model.icon) {\n        t.model.iconPath = '/app/' + t.model.appName + '/' + t.model.icon;\n      } else {\n        t.model.iconPath = DEFAULT_ICON;\n      }\n      if (!iconTemplate) {\n        iconTemplate = Template.fromDOM('#nm-template-ComponentIcon');\n      }\n    },\n\n    render: function() {\n      var t = this;\n      $(iconTemplate.apply(t.model)).appendTo(t.$el);\n    },\n\n    events: {\n      'click .nm-nc-icon'        : 'selectItem'\n    },\n\n    selectItem: function() {\n      var t = this;\n\n      // Add the component to the model, then to the page view\n      var component = t.pageView.model.addComponent(t.options.viewClass);\n      component.get('viewOptions').set({background:true, title:t.model.name});\n\n      // Remove the tooltip\n      UI.hideToolTips();\n\n      // Position the component on top left\n      var cv = t.pageView.getComponentView(component.get('id'));\n      cv.raiseToTop(true);\n      cv.moveToLeft();\n      t.pageView.leftJustify();\n      t.pageView.centerPage();\n\n      // Close the dialog box\n      $('#nm-pv-new-component').modal('hide');\n    }\n\n  });\n\n}(this));\n","/home/travis/build/npmtest/node-npmtest-monitor-dashboard/node_modules/monitor-dashboard/lib/js/PageSettingsView.js":"/*global window document $ localStorage alert*/\n\n// PageSettingsView.js (c) 2010-2014 Loren West and other contributors\n// May be freely distributed under the MIT license.\n// For further details and documentation:\n// http://github.com/lorenwest/monitor-dashboard\n(function(root){\n\n  // Module loading\n  var Monitor = root.Monitor || require('monitor'),\n      UI = Monitor.UI,\n      Template = UI.Template,\n      Backbone = Monitor.Backbone,\n      Page = UI.Page,\n      _ = Monitor._,\n      settingsTemplate = null,\n      copyTemplate = null;\n\n  /**\n  * Page settings dialog view\n  *\n  * @class PageSettingsView\n  * @extends SettingsView\n  * @constructor\n  */\n  var PageSettingsView = UI.PageSettingsView = UI.SettingsView.extend({\n\n    // Constructor\n    initialize: function(options) {\n      var t = this;\n      t.modelBinder = new Backbone.ModelBinder();\n      t.pageView = options.pageView;\n      t.model = t.pageView.model;\n      if (!settingsTemplate) {\n        settingsTemplate = Template.fromDOM('#nm-template-PageSettings');\n      }\n    },\n\n    // Event declarations\n    events: {\n      \"click .btn-primary\"       : \"savePageChanges\",\n      \"click .btn-cancel\"        : \"cancelChanges\",\n      \"click .nm-ps-view-source\" : \"toggleViewSource\",\n      \"click .nm-ps-edit\"        : \"toggleEditSource\",\n      \"click .nm-ps-save\"        : \"toggleEditSource\",\n      \"click .nm-ps-copy\"        : \"copyPage\",\n      \"click .nm-ps-delete\"      : \"deletePage\",\n      \"click .nm-ps-cancel\"      : \"cancelEditSource\",\n      \"click h4\"                 : \"toggleSection\",\n      \"keydown\"                  : \"onKeydown\"\n    },\n\n    render: function() {\n      var t = this;\n      t.$el.append(settingsTemplate.apply(t.model.toJSON()));\n      t.modelBinder.bind(t.model, t.$el);\n      t.editor = t.$('.nm-ps-source-edit');\n      t.sourceButton = t.$('.nm-ps-view-source');\n\n      // Instantiate the source view\n      t.sourceView = new UI.JsonView({\n        model: t.model.toJSON({trim:false})\n      });\n      t.sourceView.render();\n      t.$('.nm-ps-source-view').append(t.sourceView.$el);\n    },\n\n    refreshSubViews: function(e) {\n      var t = this;\n      // this will refresh the CSS view when built\n    },\n\n    // Validate the raw source in the editor, setting the model if valid\n    // and returning true/false based on valid JSON\n    validateSource: function() {\n      var t = this,\n          val = t.editor.val();\n      if (val) {\n       try {\n          // Throw away parse errors while typing\n          t.model.set(JSON.parse(val));\n        } catch (e) {\n          return false;\n        }\n      } else {\n        // Confirm deletion if user removes everything in the JSON window\n        if (t.deletePage()) {\n         return false;\n        } else {\n          // Reset source data\n          t.fillSourceData();\n        }\n      }\n      return true;\n    },\n\n    // Local override for page save\n    savePageChanges: function() {\n      var t = this;\n      t.saveChanges();\n\n      // Open the new component dialog if no components exist\n      if (t.model.get('components').length === 0) {\n        t.pageView.newComponent();\n      }\n    },\n\n    // Copy the page\n    copyPage: function() {\n\n      $('#nm-pv-settings').modal('hide');\n      $('#nm-pv-copy').centerBox().css({top:100}).modal('show');\n      // Set the cursor when the dialog fades in\n      setTimeout(function(){\n        $('#nm-pv-copy input').first().focus();\n      }, 500);\n    },\n\n    // Delete the page?\n    deletePage: function() {\n      var t = this;\n      if (window.confirm('Are you sure you want to permanently delete this page?')) {\n        t.pageView.exiting = true;\n        t.model.destroy(function(){\n          UI.pageView.navigateTo('/');\n        });\n        return true;\n      }\n      return false;\n    }\n\n  });\n\n  /**\n  * Page copy dialog\n  *\n  * @class PageCopyView\n  * @extends Backbone.View\n  * @constructor\n  */\n  var PageCopyView = UI.PageCopyView = Backbone.View.extend({\n\n    // Constructor\n    initialize: function(options) {\n      var t = this;\n      if (!copyTemplate) {\n        copyTemplate = Template.fromDOM('#nm-template-PageCopy');\n      }\n    },\n\n    // Event declarations\n    events: {\n      \"click .btn-primary\"       : \"copy\"\n    },\n\n    render: function() {\n      var t = this;\n      t.$el.append(copyTemplate.apply(t.model.toJSON()));\n    },\n\n    copy: function() {\n      var t = this,\n          copy = t.model.toJSON();\n          copyToId = t.$('.nm-pv-copy-to').val();\n\n      // Verify the page doesn't exist\n      var page = new Page({id:copyToId});\n      page.fetch(function(error) {\n        if (!error || error.code !== 'NOTFOUND') {\n          alert('This page already exists.  Try another address.');\n          return;\n        }\n\n        // Write the page and go to it\n        copy.id = copyToId;\n        copy.title = copy.title + \" (copy)\";\n        page.set(copy);\n        page.save(function(){\n          UI.pageView.navigateTo(copyToId);\n        });\n\n        // Put away the dialog while it's saving the page\n        $('#nm-pv-copy').modal('hide');\n      });\n    }\n\n  });\n\n}(this));\n","/home/travis/build/npmtest/node-npmtest-monitor-dashboard/node_modules/monitor-dashboard/lib/js/PageView.js":"/*global window document $ localStorage alert*/\n\n// PageView.js (c) 2010-2014 Loren West and other contributors\n// May be freely distributed under the MIT license.\n// For further details and documentation:\n// http://github.com/lorenwest/monitor-dashboard\n(function(root){\n\n  // Module loading\n  var Monitor = root.Monitor || require('monitor'),\n      UI = Monitor.UI,\n      ComponentView = UI.ComponentView,\n      Template = UI.Template,\n      templates = {},\n      Backbone = Monitor.Backbone,\n      _ = Monitor._,\n      pageTemplate = null,\n      aboutTemplate = null;\n\n  /**\n  * The main page view\n  *\n  * @class PageView\n  * @extends Backbone.View\n  * @constructor\n  */\n  var PageView = UI.PageView = Backbone.View.extend({\n\n    // Constructor\n    initialize: function(options) {\n      var t = this;\n      t.logo = options.logo;\n      t.version = options.version;\n      t.modelBinder = new Backbone.ModelBinder();\n      t.componentViews = {}; // Map of componentId to it's view\n\n      // Set the initial page to not dirty\n      t.setDirty(false);\n\n      // See if the model is dirty on change\n      t.model.on('change', function() {\n        var isDirty = t.isDirty(),\n            wasDirty = t.$el.hasClass('dirty');\n\n        // Change the dirty state\n        if (isDirty !== wasDirty) {\n          t.setDirty(isDirty);\n        }\n      });\n\n      // Build the template from the individual templates\n      if (!pageTemplate) {\n        pageTemplate = Template.fromDOM('#nm-template-PageView');\n      }\n    },\n\n    // Event declarations\n    events: {\n      \"mousedown .modal-header\"     : UI.modalDragStart,\n      \"click .nm-pv-menu-icons\"     : function(){UI.hideToolTips(); UI.pauseTour();},\n      \"click .nm-pv-logo\"           : \"toggleTopbar\",\n      \"click .nm-pv-dirty\"          : \"savePage\",\n\n      // Menu items\n      \"click .nm-pvm-settings\"      : \"showSettings\",\n      \"click .nm-pv-title\"          : \"showSettings\",\n      \"click .nm-pvm-add-component\" : \"newComponent\",\n      \"click .nm-pvm-edit\"          : \"toggleEdit\",\n      \"click .nm-pvm-save\"          : \"savePage\",\n      \"click .nm-pvm-about\"         : \"showAbout\"\n    },\n\n    render: function() {\n\n      var t = this,\n          model = t.model,\n          components = model.get('components'),\n          is404page = model.get('is404page'),\n          isClosed = localStorage.isPageHeaderClosed;\n\n      // Clear the data model before any bindings\n      if (is404page) {\n        model.unset('is404page', {silent:true});\n      }\n\n      // Build the template options\n      var tmplOpts = {\n        source: 'src',\n        logo: t.logo,\n        version: t.version,\n        isClosed: isClosed ? 'closed' : ''\n      };\n\n      // Render the HTML from the template\n      var params = _.extend(tmplOpts, model.toJSON());\n      t.$el.html(pageTemplate.apply(params));\n\n      // Bind the view elements\n      var bindings = _.extend(\n        Backbone.ModelBinder.createDefaultBindings(t.$el, 'name'), {\n          description: {\n            selector: '.nm-pv-title',  elAttribute: 'data-original-title'\n          }\n        }\n      );\n      t.modelBinder.bind(model, t.$el, bindings);\n\n      // Bind hotkeys\n      $(document).on('keyup', function(e){t.hotKeys(e)});\n\n      // Set the lock/unlock menu text\n      t.setLockText();\n\n      // Reset the view element to the contained page view\n      t.setElement(t.$('.nm-pv'));\n      t.canvas = t.$('.nm-pv-canvas');\n      t.sidebar = t.$('.nm-pv-sidebar');\n      t.tourbar = t.$('.nm-pv-tour');\n\n      // Instantiate the sidebar\n      var sidebar = model.get('sidebar');\n      t.sidebarView = new UI.SidebarView({el: t.sidebar, pageView:t});\n      t.sidebarView.render();\n\n      // Create a TourView if we're currently in a tour.\n      var tourJSON = localStorage.currentTour;\n      if (tourJSON) {\n        try {\n          var currentTour = new UI.Tour(JSON.parse(tourJSON));\n          t.tourView = new UI.TourView({model: currentTour, el: t.tourbar, pageView:t});\n          t.tourView.render();\n        } catch (e) {\n          // Current tour is compromised\n          console.error(\"Problem creating current tour: \", e, e.stack);\n          delete localStorage.currentTour;\n        }\n      }\n\n      // Instantiate the page settings dialog.  It works on the same Page model.\n      t.pageSettingsView = new UI.PageSettingsView({model: model, pageView:t});\n      t.pageSettingsView.render();\n      t.canvas.append(t.pageSettingsView.$el);\n\n      // Instantiate the new page view\n      t.newPageView = new UI.NewPageView({});\n      t.newPageView.render();\n      t.canvas.append(t.newPageView.$el);\n\n      // Instantiate the copy page dialog.  It works on the same Page model.\n      t.pageCopyView = new UI.PageCopyView({model: model, pageView:t});\n      t.pageCopyView.render();\n      t.canvas.append(t.pageCopyView.$el);\n\n      // Instantiate the new component dialog.\n      t.newComponentView = new UI.NewComponentView({model: model, pageView:t});\n      t.newComponentView.render();\n      t.canvas.append(t.newComponentView.$el);\n\n      // Initialize modal dialogs\n      t.$('#nm-pv-settings, #nm-pv-new-component').modal({show:false});\n      t.$('.modal a').attr({target: '_blank'});\n\n      // Initialize all static color pickers\n      $('.colorPicker').miniColors({\n        opacity: true\n      });\n\n      // Initialize the dropdown.  The delegated click event is removed\n      // during dropdown, so attach it to the element itself.\n      t.$('.nm-pv-menu-icons')\n        .dropdown()\n        .on('click', function(){UI.hideToolTips();});\n\n      // Connect all tooltips\n      UI.tooltip(t.$('*[title]'));\n\n      // Apply custom CSS, and bind to model changes.\n      t.applyCss();\n      model.on('change:css', t.applyCss, t);\n\n      // Add components to the canvas, and watch for changes\n      t.renderComponents();\n      components.on('remove', t.renderComponents, t);\n      components.on('add', t.renderComponents, t);\n\n      // Run the onInit function if specified\n      if (model.get('onInit')) {\n        t.runOnInit();\n      }\n\n      // Center window, and connect to window.resize\n      $(window).on('resize', function(){t.centerPage();});\n      t.centerPage();\n\n      // Is this a 404 page?\n      if (is404page) {\n\n        // Go straight to the new page settings if we created the page\n        if (localStorage.createPage === \"Y\") {\n          delete localStorage.createPage;\n          setTimeout(function(){\n            t.newPage();\n          },100);\n        }\n      }\n\n    },\n\n    // Process hot keys\n    hotKeys: function(e) {\n      var code = e.keyCode;\n\n      // Hotkeys while a tour is present\n      if (UI.pageView.tourView) {\n        // 1-9 direct page navigation\n        var target;\n        if (code >= 49 && code <=57) {\n          target = $('.nm-tv-page[data-index=\"' + (code - 49) + '\"]');\n        }\n\n        // Pause / Run\n        if (code == 32) {\n          UI.pageView.tourView[UI.pageView.tourView.timer ? 'pause' : 'play']();\n        }\n\n        // Left / Up\n        if (code == 37 || code == 38) {\n          UI.pageView.tourView.prev();\n        }\n\n        // Right / Down\n        if (code == 39 || code == 40) {\n          UI.pageView.tourView.prev();\n        }\n\n        // Programmatically click the target\n        if (target && target.length) {\n          target.click();\n        }\n      }\n\n    },\n\n    // This applies the style sheets specified in the model\n    applyCss: function() {\n      var t = this;\n      $.styleSheet(t.model.get('css'), 'nm-pv-css');\n    },\n\n    // Determine the overall area the components consume on the canvas.\n    // Returns {top: xx, left: xx, width: xx, height: xx}\n    getComponentArea: function() {\n      var t = this,\n          minTop = minLeft = 99999,\n          maxBottom = maxRight = -99999,\n          box = {top:0, left:0, width:0, height:0};\n\n      // Go through all components\n      t.$('.nm-pv-component').each(function() {\n        var component = $(this).find('.nm-cv'),\n            left = (parseInt(component.css('left'), 10)),\n            top = (parseInt(component.css('top'), 10)),\n            width = component.outerWidth(),\n            height = component.outerHeight(),\n            right = left + width,\n            bottom = top + height;\n\n        // Set the max/mins\n        minLeft = minLeft > left ? left : minLeft;\n        minTop = minTop > top ? top : minTop;\n        maxRight = maxRight < right ? right : maxRight;\n        maxBottom = maxBottom < bottom ? bottom : maxBottom;\n\n      });\n\n      // Set the box dimensions if any components exist\n      if (minLeft < maxRight) {\n        box.top = minTop;\n        box.left = minLeft;\n        box.width = maxRight - minLeft;\n        box.height = maxBottom - minTop;\n      }\n\n      // Return the area\n      return box;\n    },\n\n    // Center the page by adding left margin to the canvas\n    centerPage: function(e) {\n      var t = this,\n          box = t.getComponentArea(),\n          sidebarWidth = t.sidebar.width(),\n          canvasWidth = t.$el.width() - sidebarWidth,\n          canvasCenter = canvasWidth / 2;\n\n      // No components\n      if (!box.width) {return;}\n\n      // Obtain the center point, and offset the canvas by the difference\n      // Keep the left margin at multiples of 10 to match components\n      var componentCenter = box.left + (box.width / 2);\n      var newLeft = sidebarWidth + Math.max(0, canvasCenter - componentCenter);\n      newLeft = newLeft - newLeft % 10;\n      t.canvas.css({marginLeft: newLeft});\n    },\n\n    // Move all components so the furthest left is on the left of the canvas.\n    // This makes the scrollbars make sense.\n    leftJustify: function() {\n      var t = this,\n          box = t.getComponentArea();\n\n      // Shift all components by the furthest left\n      if (box.left) {\n        t.$('.nm-pv-component').each(function() {\n          var elem = $(this).find('.nm-cv'),\n              left = (parseInt(elem.css('left'), 10)),\n              model = t.componentViews[($(this).attr('id'))].model,\n              css = _.clone(model.get('css')),\n              parsedCss = $.parseStyleString(css['.nm-cv'] || '');\n\n          // Set the left into the model & remove from the element style\n          parsedCss.left = (left - box.left) + 'px';\n          css['.nm-cv'] = $.makeStyleString(parsedCss);\n          model.set({css: css});\n          elem.css({left:''});\n        });\n      }\n    },\n\n    // Add a component to the canvas\n    addComponent: function(model) {\n      var t = this,\n          componentView = new ComponentView({model: model});\n      componentView.$el\n        .addClass('nm-pv-component')\n        .data('view', componentView);\n      componentView.render();\n      t.canvas.append(componentView.$el);\n      t.componentViews[model.get('id')] = componentView;\n    },\n\n    // Get a component view on the screen\n    getComponentView: function(componentId) {\n      var t = this;\n      return t.componentViews[componentId];\n    },\n\n    // Remove a component from the canvas\n    removeComponent: function(model) {\n      var t = this;\n      t.canvas.find('#' + model.get('id')).remove();\n    },\n\n    // This adds and removes components from the page,\n    // updating component data models if necessary.\n    renderComponents: function() {\n      var t = this,\n          components = t.model.get('components'),\n          canvas = t.$('.nm-pv-canvas');\n\n      // Remove components not in the data model\n      canvas.find('.nm-pv-component').each(function() {\n        var component = $(this);\n        if (!components.get(component.attr('id'))) {\n          component.remove();\n        }\n      });\n\n      // Add new components\n      components.forEach(function(component) {\n        var onScreen = t.$('#' + component.get('id'));\n        if (!onScreen.length) {\n          t.addComponent(component);\n        }\n      });\n\n      // Center components onto the screen\n      t.leftJustify();\n      t.centerPage();\n    },\n\n    // This executes the onInit code contained in the page model\n    runOnInit: function() {\n      var t = this,\n          pageView = t,\n          getMonitor = function(id){return t.getMonitor(id);};\n          pageModel = t.model;\n\n      // Execute the onInit\n      try {\n        eval(t.model.get('onInit'));\n      }\n      catch (e) {\n        console.error('PageView onInit threw exception: ', e);\n        alert(\"Page onInit exception.  See console log for more information.\");\n      }\n    },\n\n    // Is the page model different from the persisted state?\n    isDirty: function() {\n      var t = this,\n          raw = t.model.toJSON({trim:false});\n      return !(_.isEqual(t.originalPage, raw));\n    },\n\n    // Set the page as dirty or not\n    setDirty: function(isDirty) {\n      var t = this;\n\n      // Pause a tour if the page turns dirty\n      if (isDirty) {\n        UI.pauseTour();\n      }\n\n      // Change the view elements\n      t.$el.toggleClass('dirty', isDirty);\n      if (!isDirty) {\n        t.originalPage = t.model.toJSON({trim:false});\n      }\n    },\n\n    toggleTopbar: function() {\n      var t = this,\n          url = document.location.toString(),\n          wasClosed = t.$el.hasClass('closed');\n      UI.hideToolTips();\n      t.$el.toggleClass('closed');\n\n      // Poor man's router.  If/when this gets more complex,\n      // it should be changed to use Backbone.Router.\n      if (wasClosed) {\n        delete localStorage.isPageHeaderClosed;\n      }\n      else {\n        localStorage.isPageHeaderClosed = 'yes';\n      }\n    },\n\n    // Show the specified (loaded) dialog box\n    showDialog: function(selector, params) {\n      var t = this;\n      UI.pauseTour();\n      $(selector).css({display:'none'}).centerBox().css({top:40}).modal('show');\n      setTimeout(function(){\n        // $(selector).centerBox().css({top:40}).modal('show');\n      }, 0);\n\n      // Set the cursor when the dialog fades in\n      setTimeout(function(){\n        $(selector + ' input').first().focus();\n      }, 500);\n    },\n\n    // Open the new component dialog\n    newComponent: function() {\n      var t = this;\n      t.showDialog('#nm-pv-new-component');\n    },\n\n    // This shows the page settings modal dialog\n    showSettings: function() {\n      // Remember the current page state\n      var t = this;\n      t.pageSettingsView.originalModel = t.model.toJSON({trim:false});\n\n      // Load & show the dialog\n      t.showDialog('#nm-pv-settings');\n    },\n\n    // This clears all page components and opens the settings dialog\n    newPage: function() {\n      var t = this,\n          components = t.model.get('components');\n      components.remove(components.models);\n      t.showSettings();\n    },\n\n    // Get the monitor for the specified component ID\n    getMonitor: function(id) {\n      var t = this,\n          components = t.model.get('components');\n      return components.get(id).get('monitor');\n    },\n\n    // This enters or exits edit mode\n    toggleEdit: function() {\n      var t = this;\n      t.$el.hasClass('edit-mode') ? t.unlockPage() : t.editPage();\n    },\n\n    editPage: function() {\n      var t = this;\n      t.$el.toggleClass('edit-mode', true);\n      t.setLockText();\n    },\n\n    unlockPage: function() {\n      var t = this;\n      t.$el.toggleClass('edit-mode', false);\n      t.setLockText();\n    },\n\n    // Run the tour specified by id\n    runTour: function(id) {\n      var t = this;\n\n      // Is there a tour running already?\n      if (t.tourView) {\n        t.tourView.stop();\n      }\n\n      // Load the Tour and start it\n      var tour = new UI.Tour({id:id});\n      tour.fetch(function(err){\n        if (err) {\n          alert(\"Error: Cannot open tour id: \" + id);\n          console.error(e);\n          return;\n        }\n\n        // Go to the first page\n        var pages = tour.get('pages');\n        if (!pages.length) {\n          alert('No pages in tour: ' + tour.get('title'));\n          return;\n        }\n\n        // Save the current tour, and navigate to it\n        localStorage.currentTour = JSON.stringify(tour);\n        t.navigateTo(pages[0].url);\n      });\n    },\n\n    // Navigate to the specified page url\n    // prompting the user if the current page is dirty\n    navigateTo: function(url) {\n      location.href = url;\n    },\n\n    // This sets the edit menu text and icon\n    setLockText: function() {\n      var t = this,\n          isEditMode = t.$el.hasClass('edit-mode'),\n          text = isEditMode ? 'Lock Components' : 'Edit Components',\n          icon = isEditMode ? 'lock' : 'edit';\n      t.$('.nm-pvm-lock').text(text);\n      t.$('.nm-pvm-edit i').attr('class', 'icon-' + icon);\n    },\n\n    // This shows the about page\n    showAbout: function() {\n      var t = this;\n\n      // Show if loaded\n      if (aboutTemplate) {\n       return t.showDialog('#nm-pv-about');\n      }\n\n      UI.loadTemplate('', 'About', function(error, template) {\n        if (error) {return;}\n\n        t.$el.append(template.apply(t));\n        t.$('.modal a').attr({target: '_blank'});\n        t.$('.colorPicker').miniColors({opacity: true});\n        t.showDialog('#nm-pv-about');\n      });\n    },\n\n    // Persist the page to the backend\n    savePage: function() {\n      var t = this;\n      UI.hideToolTips();\n      t.leftJustify();\n      t.centerPage();\n      t.model.save(function(error){\n        if (error) {\n          console.error(\"Page save error:\", error);\n        }\n      });\n      t.unlockPage();\n      t.setDirty(false);\n    }\n\n  });\n\n  /**\n  * New Page dialog\n  *\n  * @class NewPageView\n  * @extends Backbone.View\n  * @constructor\n  */\n  var newPageTemplate = null;\n  var NewPageView = UI.NewPageView = Backbone.View.extend({\n\n    // Constructor\n    initialize: function(options) {\n      var t = this;\n      if (!newPageTemplate) {\n        newPageTemplate = Template.fromDOM('#nm-template-NewPage');\n      }\n    },\n\n    // Event declarations\n    events: {\n      \"click .btn-cancel\"        : \"cancel\",\n      \"click .btn-primary\"       : \"create\"\n    },\n\n    render: function() {\n      var t = this;\n      t.$el.append(newPageTemplate.apply({}));\n    },\n\n    cancel: function() {\n      var t = this;\n      t.$('.nm-np-address').val('');\n    },\n\n    create: function() {\n      var t = this,\n          pageId = t.$('.nm-np-address').val();\n      localStorage.createPage = \"Y\";\n      UI.pageView.navigateTo(pageId);\n    }\n\n  });\n\n}(this));\n","/home/travis/build/npmtest/node-npmtest-monitor-dashboard/node_modules/monitor-dashboard/lib/js/SettingsView.js":"/*global window document $ localStorage alert*/\n\n// SettingsView.js (c) 2010-2014 Loren West and other contributors\n// May be freely distributed under the MIT license.\n// For further details and documentation:\n// http://github.com/lorenwest/monitor-dashboard\n(function(root){\n\n  // Module loading\n  var Monitor = root.Monitor || require('monitor'),\n      UI = Monitor.UI,\n      Backbone = Monitor.Backbone;\n\n  /**\n  * Abstract view shared by the PageSettings and ComponentSettings views\n  *\n  * @class SettingsView\n  * @extends Backbone.View\n  * @constructor\n  */\n  var SettingsView = UI.SettingsView = Backbone.View.extend({\n\n    // Detect changes on keydown - after the value has been set\n    onKeydown: function(e) {\n      var t = this;\n      setTimeout(function(){\n        t.modelBinder._onElChanged(e);\n      },0);\n    },\n\n    // This toggles open/closed a section\n    toggleSection: function(e) {\n      var t = this,\n          h1 = $(e.currentTarget),\n          icon = h1.find('i:first-child'),\n          div = h1.find('+div'),\n          isClosed = h1.hasClass('closed');\n\n\n      // Animate the height.  Can't do CSS animations, because CSS\n      // requires specific start/end points, and can't animate from\n      // height:auto to height:0px.\n      if (isClosed) {\n        var divHeight = div.css({height:'auto'}).height();\n        div.css({height:0});\n        div.animate({height:divHeight}, 200, function(){\n          div.css({height:'auto'});\n        });\n        icon.attr({class:\"icon-caret-down\"});\n      } else {\n        div.animate({height:0}, 200, function(){\n          div.css({display:'none'});\n        });\n        icon.attr({class:\"icon-caret-right\"});\n      }\n      h1.toggleClass('closed');\n      div.css({display:'block'});\n    },\n\n    toggleViewSource: function(isClosing) {\n      var t = this,\n          wasViewingSource = t.$el.hasClass('view-source'),\n          wasEditingSource = t.$el.hasClass('edit-source');\n\n      // Set closing only if the value is true\n      isClosing = (isClosing === true);\n\n      // Close the edit/source window if open\n      if (wasEditingSource) {\n        t.toggleEditSource(isClosing);\n      }\n\n      // Refresh sub-views we're heading into (unless the form is closing)\n      if (!isClosing) {\n        if (wasViewingSource) {\n          t.refreshSubViews();\n        } else {\n          t.fillSourceData();\n        }\n      }\n\n      // Switch front/back & set button label\n      t.$el.toggleClass('view-source');\n      t.sourceButton.text(wasViewingSource ? 'View Source' : 'View Form');\n      setTimeout(function(){\n        // Toggle show/hide at mid-point\n        t.$('.front').css('display', wasViewingSource ? 'block' : 'none');\n        t.$('.back').css('display', wasViewingSource ? 'none' : 'block');\n      },250);\n    },\n\n    toggleEditSource: function(isClosing) {\n      var t = this,\n          wasEditingSource = t.$el.hasClass('edit-source');\n\n      // Set closing only if the value is true\n      isClosing = (isClosing === true);\n\n      // Validate before switching from edit (unless the form is closing)\n      if (!isClosing && wasEditingSource) {\n        if (!t.validateSource()) {\n          if (!t.pageView.exiting) {\n            alert ('JSON parse error');\n          }\n          return;\n        }\n      }\n\n      // Refresh the views from the model\n      t.fillSourceData();\n\n      // Toggle CSS\n      t.$el.toggleClass('edit-source');\n    },\n\n    cancelEditSource: function() {\n      var t = this;\n      t.fillSourceData();\n      t.$el.toggleClass('edit-source');\n    },\n\n    // Fill the view-source and edit-source editors\n    fillSourceData: function() {\n      var t = this,\n          json = t.model.toJSON({trim:false});\n      t.sourceView.model = json;\n      t.sourceView.setData();\n      t.editor.val(JSON.stringify(json, null, 2));\n    },\n\n    cancelChanges: function() {\n      var t = this,\n          wasViewingSource = t.$el.hasClass('view-source');\n\n      // Reset the data model to the value on open\n      t.model.set(t.originalModel);\n      t.fillSourceData();\n      t.closeDialog();\n    },\n\n    saveChanges: function() {\n      var t = this,\n          wasEditingSource = t.$el.hasClass('edit-source');\n\n      if (wasEditingSource) {\n        if (!t.validateSource()) {\n          // Show a parse alert unless exiting the page\n          // due to no JSON.\n          if (!t.pageView.exiting) {\n            alert ('JSON parse error');\n          }\n          return;\n        }\n      }\n\n      // Save and close the dialog\n      t.pageView.savePage();\n      t.closeDialog();\n    },\n\n    closeDialog: function() {\n      var t = this,\n          wasViewingSource = t.$el.hasClass('view-source');\n\n      // Switch to the form page if viewing source\n      if (wasViewingSource) {\n        setTimeout(function(){\n          t.toggleViewSource(true);\n        },2000);\n      }\n      t.$('.modal').modal('hide');\n    }\n\n  });\n\n}(this));\n","/home/travis/build/npmtest/node-npmtest-monitor-dashboard/node_modules/monitor-dashboard/lib/js/Sidebar.js":"// Sidebar.js (c) 2010-2014 Loren West and other contributors\n// May be freely distributed under the MIT license.\n// For further details and documentation:\n// http://github.com/lorenwest/monitor-dashboard\n(function(root){\n\n  // Module loading\n  var Monitor = root.Monitor || require('monitor'),\n      UI = Monitor.UI,\n      Tree = UI.Tree,\n      Tour = UI.Tour,\n      Backbone = Monitor.Backbone,\n      _ = Monitor._;\n\n  /**\n  * Browser-centric data about the sidebar\n  *\n  * This data model is persisted in browser localStorage, and consists of the\n  * information about the sidebar to retain between pages (open state, current\n  * tour, etc.)\n  *\n  * @class Sidebar\n  * @extends Backbone.Model\n  * @constructor\n  * @param model - Initial data model.  Can be a JS object or another Model.\n  *     @param [model.width=350] {Integer} - Width in pixels (0=closed)\n  *     @param [model.autoNextSec=0] {Number} - Number of seconds to stay on a page\n  *         before navigating to the next page.  0=no autoNext.\n  *     @param [model.currentPage] {Object} - Page currently on\n  *         @param [model.currentPage.id] {String} - Path to the page\n  *         @param [model.currentPage.label] {String} - Page title\n  *         @param [model.currentPage.description] {String} - Page description\n  *     @param model.tree {Tree} - Sidebar items (as a tree)\n  */\n  var Sidebar = UI.Sidebar = Backbone.Model.extend({\n\n    defaults: {\n      width:225,\n      autoNextSec: 0,\n      currentPage:{\n        id: null,\n        label: null,\n        description: null\n      },\n      tree:{\n        branches:[\n          {id:'pages', leaves:[], branches:[], isOpen: true},\n          {id:'tours', leaves:[], branches:[], isOpen: true}\n        ]\n      }\n    },\n\n    initialize: function(params, options) {\n      var t = this,\n          tree = t.get('tree'),\n          branches = tree.branches;\n\n      // Attach sub-model containment\n      UI.containedModel(t, 'tree', Tree);\n    }\n\n  });\n\n  /**\n  * Constructor for a list of Sidebar objects\n  *\n  *     var myList = new Sidebar.List(initialElements);\n  *\n  * @static\n  * @method List\n  * @param [items] {Array} Initial list items.  These can be raw JS objects or Sidebar data model objects.\n  * @return {Backbone.Collection} Collection of Sidebar data model objects\n  */\n  Sidebar.List = Backbone.Collection.extend({model: Sidebar});\n\n}(this));\n","/home/travis/build/npmtest/node-npmtest-monitor-dashboard/node_modules/monitor-dashboard/lib/js/SidebarView.js":"/*global window document $ localStorage alert*/\n\n// SidebarView.js (c) 2010-2014 Loren West and other contributors\n// May be freely distributed under the MIT license.\n// For further details and documentation:\n// http://github.com/lorenwest/monitor-dashboard\n(function(root){\n\n  // Module loading\n  var Monitor = root.Monitor || require('monitor'),\n      UI = Monitor.UI,\n      Sidebar = UI.Sidebar,\n      TreeView = UI.TreeView,\n      Template = UI.Template,\n      Backbone = Monitor.Backbone,\n      _ = Monitor._,\n      sidebarTemplate = null;\n\n  /**\n  * The navigator sidebar view\n  *\n  * @class SidebarView\n  * @extends Backbone.View\n  * @constructor\n  */\n  var SidebarView = UI.SidebarView = Backbone.View.extend({\n\n    // Constructor\n    initialize: function(options) {\n      var t = this;\n      t.page = UI.pageView.options.model;\n\n      // Build the template from the individual templates\n      if (!sidebarTemplate) {\n        sidebarTemplate = Template.fromDOM('#nm-template-SidebarView');\n      }\n\n      // Parse the sidebar from localstorage, and use the\n      // default if anything goes wrong.\n      try {\n        t.sidebar = new Sidebar(JSON.parse(localStorage.sidebar));\n      } catch (e) {}\n      if (!t.sidebar) {\n        t.sidebar = new Sidebar();\n      }\n\n      // Retain some references to the sidebar\n      t.tree = t.sidebar.get('tree');\n      t.branches = t.tree.get('branches');\n      t.pages = t.branches.get('pages');\n      t.tours = t.branches.get('tours').get('leaves');\n\n      // If anything changes in the tree, save to localstorage\n      t.sidebar.on('change', t.saveSidebar, t);\n    },\n\n    // Event declarations\n    events: {\n      'mousedown .nm-sb-handle'    : 'resizeStart',\n      'click h4'                   : 'toggleSection',\n      'click .leaf'                : 'selectItem',\n      'click .nm-sb-new-page'      : 'openNewPage',\n      'click .nm-sb-tour-settings' : 'openTourSettings'\n    },\n\n    render: function() {\n      var t = this,\n          branches = t.sidebar.get('tree').get('branches');\n\n      // Build the sidebar\n      t.$el.html(sidebarTemplate.apply(t.sidebar.toJSON()));\n\n      // Set the initial width\n      var width = t.sidebar.get('width');\n      t.handleWidth = $('.nm-sb-handle').width();\n      $('.nm-sb').css({width: width});\n\n      // Set the tour view position\n      t.tour = $('.nm-pv-tour');\n      t.tour.css({left: width + t.handleWidth});\n\n      // Setup the the handle\n      t.handle = t.$('.nm-sb-handle');\n\n      // Set some tree view options\n      var treeOpts = {\n        pages: {monitorParams: {probeClass: 'PagesProbe'}},\n        tours: {monitorParams: {probeClass: 'ToursProbe'}}\n      };\n\n      // Build the sub-sections\n      t.sectionViews = {};\n      ['pages', 'tours'].forEach(function(section){\n\n        // Default the section if it's not there\n        var tv = new TreeView(_.extend({\n          model:branches.get(section),\n          preFetch: true\n        }, treeOpts[section]));\n        var secDiv = t.$('.nm-sb-' + section);\n        tv.render().appendTo(secDiv);\n        var isOpen = tv.model.get('isOpen');\n        if (!isOpen) {\n          secDiv.css({height:0});\n          secDiv.prev('h4').addClass('closed');\n        }\n        t.sectionViews[section] = tv;\n      });\n\n      // Instantiate the tour settings dialog.\n      t.tourSettingsView = new UI.TourSettingsView();\n      t.tourSettingsView.render();\n      UI.pageView.$el.append(t.tourSettingsView.$el);\n\n    },\n\n    // Process an item selection\n    selectItem: function(e) {\n      var t = this,\n          item = $(e.currentTarget),\n          id = item.attr('data-id'),\n          path = item.attr('data-path');\n\n      // Process a tour selection\n      if ($(e.currentTarget).parents('.nm-sb-tours').length) {\n        UI.pageView.runTour(path);\n        return;\n      }\n\n      // Process a page selection\n      UI.pageView.navigateTo(path);\n    },\n\n    // Open/close the section\n    toggleSection: function(e) {\n      var t = this,\n          h1 = $(e.currentTarget),\n          div = h1.find('+div'),\n          section = div.attr('class').substr(6),\n          wasClosed = div.height() === 0;\n\n      // Animate the height.  Can't do CSS animations, because CSS\n      // requires specific start/end points, and can't animate from\n      // height:auto to height:0px.\n      if (wasClosed) {\n        var divHeight = div.css({height:'auto'}).height();\n        h1.toggleClass('closed', false);\n        div.css({height:0});\n        div.animate({height:divHeight}, 200, function(){\n          div.css({height:'auto'});\n        });\n      } else {\n        div.animate({height:0}, 200, function(){\n          h1.toggleClass('closed', true);\n        });\n      }\n\n      // Change the data model\n      t.sidebar.get('tree').get('branches').get(section).set('isOpen', wasClosed);\n    },\n\n    // Open the new page dialog\n    openNewPage: function(e) {\n      var t = this;\n      UI.hideToolTips();\n      UI.pauseTour();\n\n      // Tell the settings it's about to be shown\n      UI.pageView.$('#nm-pv-new').centerBox().css({top:100}).modal('show');\n      setTimeout(function(){\n        $('.nm-np-address').focus();\n      }, 500);\n\n      // Don't propagate the click to the heading\n      e.stopPropagation();\n    },\n\n    // Open the tour settings dialog\n    openTourSettings: function(e) {\n      var t = this;\n      UI.hideToolTips();\n      UI.pauseTour();\n\n      // Tell the settings it's about to be shown\n      t.tourSettingsView.show();\n\n      // Don't propagate the click to the heading\n      e.stopPropagation();\n    },\n\n    // Resize the sidebar\n    resizeStart: function(e) {\n      var t = this,\n          sidebar = $('.nm-sb'),\n          newWidth = startWidth = sidebar.width(),\n          startX = e.pageX;\n      function drag(e) {\n        newWidth = startWidth + (e.pageX - startX);\n        sidebar.css({width:newWidth});\n        t.tour.css({left: newWidth + t.handleWidth});\n        UI.pageView.centerPage();\n      }\n      function drop(e) {\n        t.handle.removeClass('drag');\n        $(document).unbind(\"mousemove\", drag).unbind(\"mouseup\", drop);\n        // Simulate click?\n        if (newWidth === startWidth) {\n          newWidth = startWidth === 0 ? Sidebar.prototype.defaults.width : 0;\n        }\n        // Auto-close?\n        else if (newWidth < 30) {\n          newWidth = 0;\n        }\n        // Set the width, center the page, and persist\n        t.sidebar.set('width', newWidth);\n        sidebar.css({width: newWidth});\n        t.tour.css({left: newWidth + t.handleWidth});\n        UI.pageView.centerPage();\n      }\n      $(document).bind(\"mousemove\", drag).bind(\"mouseup\", drop);\n      t.handle.addClass('drag');\n      drag(e);\n      e.preventDefault();\n    },\n\n    // Save the sidebar to localStorage\n    saveSidebar: function() {\n      var t = this,\n          sbJSON = t.sidebar.toJSON({deep:true, trim:true});\n\n      // Function to trim closed sub-branches from a tree\n      var trimSubBranch = function(tree) {\n        var branches = tree.branches;\n        for (var i in branches) {\n          var subTree = branches[i];\n          if (subTree.isOpen && !subTree.isLoading) {\n            branches[i] = trimSubBranch(subTree);\n          } else {\n            branches[i] = {\n              id: subTree.id,\n            };\n            if (subTree.label) {\n              branches[i].label = subTree.label;\n            }\n          }\n        }\n        return tree;\n      };\n\n      // Trim sub-tree elements in pages, and save\n      for (var i = 0; i < sbJSON.tree.branches.length; i++) {\n        sbJSON.tree.branches[i] = trimSubBranch(sbJSON.tree.branches[i]);\n      }\n      localStorage.sidebar = JSON.stringify(sbJSON);\n    }\n\n  });\n\n}(this));\n","/home/travis/build/npmtest/node-npmtest-monitor-dashboard/node_modules/monitor-dashboard/lib/js/TourSettingsView.js":"/*global window document $ localStorage alert*/\n\n// TourSettingsView.js (c) 2010-2014 Loren West and other contributors\n// May be freely distributed under the MIT license.\n// For further details and documentation:\n// http://github.com/lorenwest/monitor-dashboard\n(function(root){\n\n  // Module loading\n  var Monitor = root.Monitor || require('monitor'),\n      UI = Monitor.UI,\n      Template = UI.Template,\n      Backbone = Monitor.Backbone,\n      _ = Monitor._,\n      template = null;\n\n  /**\n  * Component settings dialog view\n  *\n  * @class TourSettingsView\n  * @extends SettingsView\n  * @constructor\n  */\n  var TourSettingsView = UI.TourSettingsView = UI.SettingsView.extend({\n\n    // Constructor\n    initialize: function(options) {\n      var t = this;\n      if (!template) {\n        template = Template.fromDOM('#nm-template-TourSettings');\n      }\n\n      // A cache of selected tours, by ID\n      t.tours = {};\n    },\n\n    // Event declarations\n    events: {\n      'change input'        : 'onChange',\n      'click .leaf'         : 'selectTour',\n      'click .btn-cancel'   : 'cancel',\n      'click .btn-primary'  : 'save',\n      'click .nm-tsv-up'    : 'moveUp',\n      'click .nm-tsv-down'  : 'moveDown',\n      'click .nm-tsv-remove': 'removePage',\n      'click .nm-tsv-add-tour'  : 'addTour',\n      'click .nm-tsv-add-page'  : 'openAddPage'\n    },\n\n    // This is called once after construction to render the\n    // components onto the screen.\n    render: function() {\n      var t = this;\n      t.$el.append(template.apply({}));\n      t.dialog = t.$('.modal');\n\n      // Build the tour tree view\n      t.tv = new UI.TreeView({\n        preFetch: true,\n        monitorParams: {probeClass: 'ToursProbe'}\n      });\n      t.tv.render().appendTo(t.$('.nm-tsv-tree'));\n\n      // Select the first tour once the tree is loaded\n      t.tv.whenConnected(function(tree) {\n        t.firstTour();\n      });\n\n      // Instantiate the new tour page view\n      t.newTourPage = new UI.NewTourPage({tourSettings:t});\n      t.newTourPage.render();\n      UI.pageView.$el.append(t.newTourPage.$el);\n    },\n\n    // Process a tour selection\n    selectTour: function(e) {\n      var t = this,\n          item = $(e.currentTarget),\n          path = item.attr('data-path');\n      t.showTour(path);\n    },\n\n    showTour: function(tourPath) {\n      var t = this;\n\n      // Get from cache if available\n      t.tour = t.tours[tourPath];\n\n      // Add the tour if not in cache\n      if (!t.tour) {\n        t.tour = t.tours[tourPath] = new UI.Tour({id:tourPath});\n\n        // Fetch the tour and load the form\n        t.tour.fetch(function(err){\n          if (err) {\n            alert(\"Error: Cannot open tour: \" + tourPath);\n            console.error(err);\n            return;\n          }\n          t.loadForm();\n          t.$('.nm-tsv-title').focus();\n        });\n      }\n      else {\n        // Load the existing tour\n        t.loadForm();\n        t.$('.nm-tsv-title').focus();\n      }\n\n    },\n\n    // Send data to the form\n    loadForm: function() {\n      var t = this;\n\n      // Set the current tour pages\n      t.pages = t.tour.get('pages');\n\n      // Tour fields\n      t.$('.nm-tsv-id').val(t.tour.get('id'));\n      t.$('.nm-tsv-title').val(t.tour.get('title'));\n      t.$('.nm-tsv-description').val(t.tour.get('description'));\n      t.$('.nm-tsv-auto-next-sec').val(t.tour.get('autoNextSec'));\n      var pageList = t.$('.nm-tsv-page-list').html('');\n\n      // Tour pages\n      var table = $('<table></table>').appendTo(pageList);\n\n      for (var i = 0; i < t.pages.length; i++) {\n        var page = t.pages[i];\n        $('<tr><td>' + page['title'] + '</td><td class=\"nm-tsv-up\" title=\"move up\"><i class=\"icon-caret-up\"></i></td><td class=\"nm-tsv-down\" title=\"move down\"><i class=\"icon-caret-down\"></i></td><td class=\"nm-tsv-remove\" title=\"remove page\"><i class=\"icon-minus\"></i></td></tr>').appendTo(table);\n      }\n\n      // Connect all tooltips\n      UI.tooltip(t.$('*[title]'),{placement:'bottom'});\n\n    },\n\n    // Called when the dialog is opened\n    show: function() {\n      var t = this;\n\n      // Show the modal dialog\n      t.dialog.centerBox().css({top:40}).modal('show');\n\n      // Set the cursor when the dialog fades in\n      setTimeout(function(){\n        t.$('.nm-tsv-title').focus();\n      }, 500);\n    },\n\n    // Show the first tour in the tree\n    firstTour: function() {\n      var t = this;\n      for (var i in t.tv.orderedNodes) {\n        var node = t.tv.orderedNodes[i];\n        if (node.type === 'leaf') {\n          var tour = node.node;\n          t.showTour('/' + tour.get('id'));\n          break;\n        }\n      }\n    },\n\n    // Called when a form input element changes\n    onChange: function(e) {\n      var t = this;\n\n      // Scrape the form\n      var params = {\n        title: t.$('.nm-tsv-title').val(),\n        description: t.$('.nm-tsv-description').val(),\n        autoNextSec: t.$('.nm-tsv-auto-next-sec').val()\n      };\n\n      if (!parseInt(params.autoNextSec)) {\n        // Assure blank, NaN, undefined, 0, etc translates to 0 (no auto-next)\n        params.autoNextSec = 0;\n      }\n      t.tour.set(params);\n      t.tour.isDirty = true;\n      t.setDirty(true);\n      t.loadForm();\n\n      // Change the title/description in the tree view\n      var tvNode = t.tv.model.getByPath(t.tour.get('id'));\n      tvNode.set({\n        label: params.title ? params.title : ' ',\n        description: params.description\n      });\n\n      // If the tour is deleted, go to the first one\n      if (!params.title) {\n        t.firstTour();\n      }\n    },\n\n    moveUp: function(e) {\n      var t = this,\n          index = $(e.currentTarget).parent().index();\n      UI.hideToolTips();\n      if (index > 0) {\n        var newPages = t.pages.slice(0);\n        newPages.splice(index - 1,0,t.pages[index]);\n        newPages.splice(index + 1,1);\n        t.tour.set('pages', newPages);\n        t.tour.isDirty = true;\n        t.setDirty(true);\n        t.loadForm();\n      }\n    },\n\n    moveDown: function(e) {\n      var t = this,\n          index = $(e.currentTarget).parent().index();\n      UI.hideToolTips();\n      if (index < t.pages.length - 1) {\n        var newPages = t.pages.slice(0);\n        newPages.splice(index + 2,0,t.pages[index]);\n        newPages.splice(index,1);\n        t.tour.set('pages', newPages);\n        t.tour.isDirty = true;\n        t.setDirty(true);\n        t.loadForm();\n      }\n    },\n\n    removePage: function(e) {\n      var t = this,\n          index = $(e.currentTarget).parent().index();\n      UI.hideToolTips();\n      var newPages = t.pages.slice(0);\n      newPages.splice(index,1);\n      t.tour.set('pages', newPages);\n      t.tour.isDirty = true;\n      t.setDirty(true);\n      t.loadForm();\n    },\n\n    setDirty: function(isDirty) {\n      var t = this;\n      t.$('.nm-tsv-dirty').css({display: isDirty ? 'inline' : 'none'});\n    },\n\n    cancel: function() {\n      var t = this;\n      t.setDirty(false);\n      t.dialog.modal('hide');\n      t.tours = {};\n\n      // Reconnect the tree monitor to refresh tree nodes\n      t.tv.monitor.disconnect(function(err){\n        if (!err) {\n          t.tv.monitor.connect();\n        }\n      });\n    },\n\n    save: function() {\n      var t = this;\n\n      // Persist all dirty tours\n      for (var id in t.tours) {\n        var tour = t.tours[id];\n        if (tour.isDirty) {\n          // Delete or save the tour\n          if (!tour.get('title')) {\n            tour.destroy(function(error){\n              if (error) {\n                console.error(\"Error deleting tour: \", error);\n              }\n            });\n          }\n          else {\n            tour.save(function(error){\n              if (error) {\n                console.error(\"Error saving tour: \", error);\n              }\n            });\n          }\n          tour.isDirty = false;\n        }\n      }\n\n      t.setDirty(false);\n      t.dialog.modal('hide');\n    },\n\n    addTour: function() {\n      var t = this,\n          tree = t.tv.model,\n          id = 1,\n          path = \"\" + id;\n\n      // Hide tips\n      UI.hideToolTips();\n\n      // Determine an unused tour ID\n      while (tree.getByPath(path)) {\n        path = \"\" + (++id);\n      }\n      var slashPath = \"/\" + path;\n\n      // Add the tree item\n      var item = new Backbone.Model({\n        id:path,\n        label: 'New tour'\n      });\n      tree.get('leaves').add(item);\n      t.tour = t.tours[slashPath] = new UI.Tour({\n        id:path,\n        title: 'New tour'\n      });\n      t.tour.id = null; // make 'new'\n      t.showTour(slashPath);\n    },\n\n    // Open the addPage dialog\n    openAddPage: function() {\n      var t = this,\n          modal = t.newTourPage.$('.modal');\n      UI.hideToolTips();\n      modal.centerBox().css({top:20, left:modal.css('left').replace(/px/,'') - 40}).modal('show');\n      $('.modal-backdrop:last-child').css({zIndex:1140});\n    },\n\n    // Add a page to the current tour\n    addPage: function(page) {\n      var t = this,\n          newPages = t.pages.slice(0);\n      newPages.push(page);\n      t.tour.set('pages', newPages);\n      t.tour.isDirty = true;\n      t.setDirty(true);\n      t.loadForm();\n    }\n\n  });\n\n  /**\n  * New Tour Page dialog\n  *\n  * @class NewTourPage\n  * @extends Backbone.View\n  * @constructor\n  */\n  var newTourPageTemplate = null;\n  var NewTourPage = UI.NewTourPage = Backbone.View.extend({\n\n    // Constructor\n    initialize: function(options) {\n      var t = this;\n      if (!newTourPageTemplate) {\n        newTourPageTemplate = Template.fromDOM('#nm-template-NewTourPage');\n      }\n    },\n\n    // Event declarations\n    events: {\n      \"click .leaf\"       : \"addPage\"\n    },\n\n    render: function() {\n      var t = this;\n      t.$el.append(newTourPageTemplate.apply({}));\n\n      // Build the page tree view\n      t.tv = new UI.TreeView({\n        preFetch: true,\n        monitorParams: {probeClass: 'PagesProbe'}\n      });\n      t.tv.render().appendTo(t.$('.nm-tv-page-browser'));\n    },\n\n    addPage: function(e) {\n      var t = this,\n          item = $(e.currentTarget),\n          path = item.attr('data-path'),\n          title = item.html();\n      modal = t.$('.modal').modal('hide');\n      t.options.tourSettings.addPage({url:path, title:title});\n    }\n\n  });\n\n}(this));\n","/home/travis/build/npmtest/node-npmtest-monitor-dashboard/node_modules/monitor-dashboard/lib/js/TourView.js":"/*global window document $ localStorage alert*/\n\n// TourView.js (c) 2010-2014 Loren West and other contributors\n// May be freely distributed under the MIT license.\n// For further details and documentation:\n// http://github.com/lorenwest/monitor-dashboard\n(function(root){\n\n  // Module loading\n  var Monitor = root.Monitor || require('monitor'),\n      UI = Monitor.UI,\n      Template = UI.Template,\n      Backbone = Monitor.Backbone,\n      _ = Monitor._,\n      tourTemplate = null,\n      pageTemplate = null;\n\n  // Constants\n  var ANIMATION_INTERVAL_MS = 50;\n\n  /**\n  * The page tour view\n  *\n  * @class TourView\n  * @extends Backbone.View\n  * @constructor\n  */\n  var TourView = UI.TourView = Backbone.View.extend({\n\n    // Constructor\n    initialize: function(options) {\n      var t = this;\n\n      // Build the template from the individual templates\n      if (!tourTemplate) {\n        tourTemplate = Template.fromDOM('#nm-template-TourView');\n        lineTemplate = new Template({\n          text: '<a class=\"nm-tv-page {{isCurrent}}\" data-index=\"{{index}}\" href=\"{{url}}\" title=\"{{title}}\"><div></div></a>'\n        });\n      }\n\n      // Determine the current tour page index\n      t.pages = t.model.get('pages'),\n      t.pageIndex = localStorage.tourPageIndex;\n      if (typeof t.pageIndex === 'undefined') {\n        // Compute the page index based on this URL\n        var url = location.href.toString().substr(location.origin.toString().length);\n        t.pageIndex = 0; // Default to first page\n        for (var i=0, l=t.pages.length; i < l; i++) {\n          var page = t.pages[i];\n          if (url === page.url) {\n            t.pageIndex = i;\n            break;\n          }\n        }\n      }\n      else {\n        delete localStorage.tourPageIndex;\n        t.pageIndex = parseInt(t.pageIndex);\n      }\n\n    },\n\n    // Event declarations\n    events: {\n      'click .nm-tv-prev'    : 'prev',\n      'click .nm-tv-next'    : 'next',\n      'click .nm-tv-play'    : 'play',\n      'click .nm-tv-pause'   : 'pause',\n      'click .nm-tv-stop'    : 'stop',\n      'click .nm-tv-page'    : 'select'\n    },\n\n    render: function() {\n\n      var t = this,\n          model = t.model,\n          tourPaused = parseInt(localStorage.tourPaused);\n\n      // Render the HTML from the template\n      t.$el.html(tourTemplate.apply(model.toJSON()));\n\n      // Place the pages\n      var $pages = t.$('.nm-tv-pages'),\n          i;\n      for (i=0; i < t.pages.length; i++) {\n        var attrs = {\n          index: i,\n          isCurrent: (i === t.pageIndex ? 'current' : ''),\n          url: t.pages[i].url,\n          title: t.pages[i].title\n        };\n        $(lineTemplate.apply(attrs)).appendTo($pages);\n      }\n\n      // Set the pages width manually for auto-centering\n      DOT_WIDTH = 22;\n      $pages.css({width: t.pages.length * DOT_WIDTH});\n\n      // Place all tooltips on the right\n      t.$('*[title]').attr('data-placement','right');\n\n      // Start the tour\n      t.progress = t.$('.nm-tv-progress');\n      t.playDuration = t.model.get('autoNextSec') * 1000;\n      t.playLeft = tourPaused ? tourPaused : t.playDuration; // Amount of play to go (in ms)\n      t.playWidth = t.$('.nm-tv-progress-shadow').width();\n\n      // Display the initial progress bar\n      t.setProgress();\n\n      // Start the player in the initial state\n      if (tourPaused) {\n        t.pause();\n      } else {\n        t.play();\n      }\n    },\n\n    setProgress: function() {\n      var t = this;\n      t.progress.css({width: Math.min(t.playWidth, t.playWidth - (t.playWidth * (t.playLeft / t.playDuration)))});\n    },\n\n    prev: function() {\n      var t = this;\n      t.pageIndex--;\n      if (t.pageIndex < 0) {\n        t.pageIndex = t.pages.length - 1;\n      }\n      localStorage.tourPageIndex = t.pageIndex;\n      UI.pageView.navigateTo(t.pages[t.pageIndex].url);\n    },\n\n    next: function() {\n      var t = this;\n      t.pageIndex++;\n      if (t.pageIndex >= t.pages.length) {\n        t.pageIndex = 0;\n      }\n      localStorage.tourPageIndex = t.pageIndex;\n      UI.pageView.navigateTo(t.pages[t.pageIndex].url);\n    },\n\n    play: function() {\n      var t = this;\n\n      // Return if already playing\n      if (t.timer) {\n        return;\n      }\n\n      // Erase a prior pause state\n      delete localStorage.tourPaused;\n\n      // Run at each animation interval\n      var anim = function() {\n        // Compute the amount of play left to go\n        t.playLeft = t.playEnd - Date.now();\n\n        // Done playing\n        if (t.playLeft <= 0) {\n          clearInterval(t.timer);\n          t.next();\n        }\n\n        // Set the progress bar width\n        t.setProgress();\n      };\n\n      // Kick off the player\n      t.playEnd = Date.now() + t.playLeft;\n      t.timer = setInterval(anim, ANIMATION_INTERVAL_MS);\n\n      // Swap play/pause buttons\n      UI.hideToolTips();\n      t.$('.nm-tv-play').css({display:'none'});\n      t.$('.nm-tv-pause').css({display:'inline'});\n    },\n\n    pause: function() {\n      var t = this;\n      if (t.timer) {\n        clearTimeout(t.timer);\n        t.timer = null;\n      }\n\n      // Persist the pause state\n      localStorage.tourPaused = \"\" + t.playLeft;\n\n      // Swap play/pause buttons\n      UI.hideToolTips();\n      t.$('.nm-tv-pause').css({display:'none'});\n      t.$('.nm-tv-play').css({display:'inline'});\n    },\n\n    stop: function() {\n      var t = this,\n          pageView = t.options.pageView;\n      delete localStorage.tourPageIndex;\n      delete localStorage.tourPaused;\n      delete localStorage.currentTour;\n      UI.hideToolTips();\n      pageView.tourView.remove();\n      pageView.tourView = null;\n      if (t.timer) {\n        clearTimeout(t.timer);\n        t.timer = null;\n      }\n    },\n\n    // Select a page\n    select: function(e) {\n      var t = this,\n          target = $(e.currentTarget),\n          index = target.attr('data-index');\n\n      // Save the index.  If a tour has many instances of the\n      // same page, it needs to know which instance.\n      localStorage.tourPageIndex = index;\n\n      // Navigate to the page\n      UI.pageView.navigateTo(target.attr('href'));\n    }\n\n  });\n\n}(this));\n","/home/travis/build/npmtest/node-npmtest-monitor-dashboard/node_modules/monitor-dashboard/lib/js/TreeView.js":"/*global window document $ localStorage alert*/\n\n// TreeView.js (c) 2010-2014 Loren West and other contributors\n// May be freely distributed under the MIT license.\n// For further details and documentation:\n// http://github.com/lorenwest/monitor-dashboard\n(function(root){\n\n  // Module loading\n  var Monitor = root.Monitor || require('monitor'),\n      UI = Monitor.UI,\n      Mustache = UI.Mustache,\n      Template = UI.Template,\n      Backbone = Monitor.Backbone,\n      _ = Monitor._;\n\n  /**\n  * Tree viewer\n  *\n  * Instances of TreeView represent one level in a tree.  Instances of this\n  * view are created and destroyed as the user navigates the tree, and as the\n  * underlying model changes.\n  *\n  * If monitorParams are specified in the constructor, the TreeView will be\n  * bound to an instance of a specific TreeProbe with those parameters.\n  *\n  * @class TreeView\n  * @extends Backbone.View\n  * @constructor\n  * @param options {Object} Initialization options (in addition to Backbone.View)\n  *     @param [options.path=''] {String} Path to this node\n  *     @param [options.pathSeparator='/'] {String} Path separator for sub-nodes\n  *     @param [options.parentView] {TreeView} Parent treeview (null=root)\n  *     @param [options.monitorParams] {Object} Monitor initialization parameters\n  *         if this TreeView is to be bound to a backend TreeProbe.\n  *         Must include probeClass, and can include connect and init params as well\n  *     @param [options.preFetch] {Boolean} If true, pre-fetch closed branches on open parents\n  *     @param [options.sortBy] {String} Fieldname of the leaves/branches to sort by.\n  *         Defaults to the visual element (Label or ID).  Specify '' for no sorting.\n  */\n  var TreeView = UI.TreeView = Backbone.View.extend({\n\n    // For Backbone.View\n    tagName:  \"ol\",\n    className:  \"nm-tr\",\n\n    template: {\n      branch: Mustache.compile('<li class=\"branch {{closed}}\" title=\"{{description}}\"><i class=\"{{{caret}}}\"></i><span>{{{label}}}</span></li>'),\n      leaf: Mustache.compile('<li class=\"leaf\" data-id=\"{{id}}\" data-path=\"{{path}}\" title=\"{{description}}\">{{{label}}}</li>'),\n      inner: Mustache.compile('<li class=\"inner\"></li>')\n    },\n\n    events: {\n      \"click .branch\":    \"onOpenClose\"\n    },\n\n    initialize: function(options) {\n      var t = this;\n\n      // A hash of sub-branch ID to branch TreeViews\n      t.branchViews = {};\n\n      // An array of handlers to call once connected\n      t.connectHandlers = [];\n\n      // Default to a relative filesystem type path\n      options.path = options.path || '';\n      options.pathSeparator = options.pathSeparator || '/';\n\n      // Build a tree model if not specified.  This happens when it's\n      // driven by a backend monitor only.\n      if (!t.model) {\n        t.model = new UI.Tree();\n      }\n\n      // Re-render on underlying model change\n      t.model.on('change', t.render, t);\n    },\n\n    // Render this level of the tree\n    render: function() {\n      var t = this,\n          branchId = null,\n          branches = t.model.get('branches'),\n          leaves = t.model.get('leaves'),\n          sortBy = _.isUndefined(t.options.sortBy) ? 'label' : t.options.sortBy,\n          ordered = t.orderedNodes = [],\n          elem,\n          params = {};\n\n      // Only render if something visual has changed.  The model\n      // gets change events propagated up from sub-branches which\n      // may not cause visual changes.\n      var visualHash = t.getVisualHash();\n      if (visualHash === t.visualHash) {\n        return;\n      }\n      t.visualHash = visualHash;\n\n      // Remove visual artifacts from this level down\n      for (branchId in t.branchViews) {\n        if (t.branchViews[branchId]) {\n          t.branchViews[branchId].remove();\n        }\n      }\n      t.branchViews = {};\n      t.$el.html('');\n\n      // Order the leaves & branches\n      if (branches) {\n        branches.forEach(function(node) {\n          ordered.push({\n            sortBy: node.get(sortBy) || node.get('id'),\n            type: 'branch',\n            node: node\n          });\n        });\n      }\n      if (leaves) {\n        leaves.forEach(function(node) {\n          ordered.push({\n            sortBy: (node.get(sortBy) || '').toLowerCase(),\n            type: 'leaf',\n            node: node\n          });\n        });\n      }\n      if (sortBy) {\n        ordered.sort(function(a,b) {\n          var aVal = a.sortBy.toLowerCase ? a.sortBy.toLowerCase() : a.sortBy,\n              bVal = b.sortBy.toLowerCase ? b.sortBy.toLowerCase() : b.sortBy;\n          return aVal > bVal ? 1 : (aVal < bVal ? -1 : 0);\n        });\n      }\n\n      // Output the ordered nodes\n      ordered.forEach(function(orderedNode) {\n\n        // Common parameters\n        var node = orderedNode.node;\n        params.id = node.get('id');\n        params.label = node.get('label') || params.id;\n        params.description = node.get('description');\n        params.path = t.options.path + t.options.pathSeparator + params.id;\n\n        // Leaves\n        if (orderedNode.type === 'leaf') {\n          elem = $(t.template.leaf(params)).appendTo(t.$el);\n        }\n\n        // Branches\n        if (orderedNode.type === 'branch') {\n\n          // Output the branch line\n          var isOpen = node.get('isOpen');\n          params.closed = isOpen ? '' : 'closed';\n          params.caret = 'icon-caret-' + (isOpen ? 'down' : 'right');\n          elem = $(t.template.branch(params))\n            .appendTo(t.$el)\n            .data('branch', node);\n\n          // Attach a sub-TreeView to the branch\n          var innerEl = $(t.template.inner({})).appendTo(t.$el);\n          var treeView = new TreeView({\n            model: node,\n            parentView:t,\n            monitorParams: t.options.monitorParams,\n            path: params.path,\n            pathSeparator: t.options.pathSeparator,\n            preFetch: t.options.preFetch\n          });\n          treeView.render().appendTo(innerEl);\n\n          // Remember inner branch view\n          t.branchViews[params.id] = treeView;\n        }\n\n        // Add a tooltip for the description\n        if (params.description) {\n          UI.tooltip(elem, {placement:'right'});\n        }\n      });\n\n      // Connect a monitor to this node\n      t.connectMonitor();\n\n      // For chaining\n      return t.$el;\n    },\n\n    // Return a hash code representing the visual state of the\n    // underlying data model.  This is compared with subsequent\n    // states to prevent too much re-rendering.\n    getVisualHash: function() {\n      var t = this,\n          branches = t.model.get('branches'),\n          leaves = t.model.get('leaves'),\n          hash = \"\";\n\n      // The hash is the text of the branches & leaves\n      branches && branches.forEach(function(node) {\n        var label = node.get('label') || node.id,\n            description = node.get('description');\n        hash += '|' + label;\n        if (description) {\n          hash += '|' + description;\n        }\n      });\n\n      // The hash is the text of the branches & leaves\n      leaves && leaves.forEach(function(node) {\n        var label = node.get('label') || node.id,\n            description = node.get('description');\n        hash += '|' + label;\n        if (description) {\n          hash += '|' + description;\n        }\n      });\n\n      // Return the hash\n      return hash;\n    },\n\n    // Determine if we should connect a monitor to the node, and\n    // connect if necessary.\n    connectMonitor: function() {\n      var t = this,\n          branches = t.model.get('branches'),\n          leaves = t.model.get('leaves');\n\n      // Determine if we should connect a monitor to this node\n      //\n      // Connect a monitor if:\n      // * There isn't one already connected, and\n      // * There's a monitor definition available, and\n      // * We're open, or\n      // *   preFetch is selected, and\n      // *     we have no parent or our parent is open\n      //\n      // ** Is there any way to make this logic simpler?\n      var shouldConnect = !t.model.hasMonitor()\n        && t.options.monitorParams\n        && (t.model.get('isOpen')\n          || (t.options.preFetch\n            && (!t.options.parentView\n              || t.options.parentView.model.get('isOpen'))));\n\n      // Connect to the monitor if we've determined we should\n      if (shouldConnect) {\n\n        // If there isn't any model data to display, show Loading...\n        if (!branches || !leaves) {\n          t.loading = $('<li>Loading...</li>').appendTo(t.$el);\n        }\n\n        // Build and connect the Monitor\n        var initParams = _.extend(\n          {},\n          t.options.monitorParams.initParams || {},\n          {path:t.options.path}\n        );\n        var monitorParams = _.extend(\n          {},\n          t.options.monitorParams,\n          {initParams: initParams}\n        );\n        t.monitor = new Monitor(monitorParams);\n        t.model.attachMonitor(t.monitor);\n\n        // Call our handlers once connected\n        t.monitor.on('connect', function(){\n          setTimeout(function(){\n            for (var i in t.connectHandlers) {\n              var handler = t.connectHandlers[i];\n              handler(t.monitor);\n            }\n          },10);\n        });\n\n        // Connect the monitor and process errors.  Successes will change\n        // the underlying data model (or not), causing a re-render.\n        t.monitor.connect(function(error) {\n\n          // Remove the Loading... message\n          if (t.loading) {\n            t.loading.remove();\n            t.loading = null;\n          }\n\n          // Handle errors\n          if (error) {\n            $('<li>(connection problem)</li>').appendTo(t.$el);\n            console.error('TreeView monitor connection problem:', error, t.monitor);\n\n            // Detach the problem monitor so it'll have another chance\n            // if the user opens/closes the branch.\n            t.model.detachMonitor();\n          }\n\n        });\n      }\n    },\n\n    // Call this handler(error, monitor) after the monitor is connected\n    // and the tree view has been rendered.\n    whenConnected: function(handler) {\n      var t = this;\n      if (t.monitor && t.monitor.isConnected()) {\n        setTimeout(function(){handler(t.monitor);},0);\n      }\n      else {\n        t.connectHandlers.push(handler);\n      }\n    },\n\n    // Called when the open/close icon is selected.\n    onOpenClose: function(e) {\n      var t = this,\n          branchElem = $(e.currentTarget),\n          icon = branchElem.find('i'),\n          subElem = branchElem.find('+li'),\n          wasClosed = branchElem.hasClass('closed'),\n          branchModel = $(e.currentTarget).data('branch'),\n          branchId = branchModel.get('id');\n\n      // Persist the open/closed state in the model\n      branchModel.set('isOpen', wasClosed);\n\n      // Animate the height.  Can't do CSS animations, because CSS\n      // requires specific start/end points, and can't animate from\n      // height:auto to height:0px.\n      if (wasClosed) {\n        var subElemHeight = subElem.css({height:'auto'}).height();\n        subElem.css({height:0});\n        branchElem.toggleClass('closed', false);\n        subElem.animate({height:subElemHeight}, 200, function(){\n          subElem.css({height:'auto'});\n\n          // Pre-fetch sub-branches after animation\n          if (t.options.preFetch) {\n            for (var subBranchId in t.branchViews[branchId].branchViews) {\n              t.branchViews[branchId].branchViews[subBranchId].connectMonitor();\n            }\n          }\n\n        });\n        icon.attr({class:\"icon-caret-down\"});\n\n        // Tell this branch view to connect the monitor if necessary\n        t.branchViews[branchId].connectMonitor();\n      } else {\n        subElem.animate({height:0}, 200, function() {\n          branchElem.toggleClass('closed', true);\n        });\n        icon.attr({class:\"icon-caret-right\"});\n      }\n      e.stopPropagation();\n    },\n\n    remove: function() {\n      var t = this;\n      t.model.off('change', t.render, t);\n\n      // Clear any prior elements\n      for (branchId in t.branchViews) {\n        t.branchViews[branchId].remove();\n      }\n      delete t.branchViews;\n    }\n\n  });\n\n}(this));\n","/home/travis/build/npmtest/node-npmtest-monitor-dashboard/node_modules/monitor-dashboard/lib/ext/socket.io/socket.io.js":"/*! Socket.IO.js build:0.9.10, development. Copyright(c) 2011 LearnBoost <dev@learnboost.com> MIT Licensed */\n\nvar io = ('undefined' === typeof module ? {} : module.exports);\n(function() {\n\n/**\n * socket.io\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n(function (exports, global) {\n\n  /**\n   * IO namespace.\n   *\n   * @namespace\n   */\n\n  var io = exports;\n\n  /**\n   * Socket.IO version\n   *\n   * @api public\n   */\n\n  io.version = '0.9.10';\n\n  /**\n   * Protocol implemented.\n   *\n   * @api public\n   */\n\n  io.protocol = 1;\n\n  /**\n   * Available transports, these will be populated with the available transports\n   *\n   * @api public\n   */\n\n  io.transports = [];\n\n  /**\n   * Keep track of jsonp callbacks.\n   *\n   * @api private\n   */\n\n  io.j = [];\n\n  /**\n   * Keep track of our io.Sockets\n   *\n   * @api private\n   */\n  io.sockets = {};\n\n\n  /**\n   * Manages connections to hosts.\n   *\n   * @param {String} uri\n   * @Param {Boolean} force creation of new socket (defaults to false)\n   * @api public\n   */\n\n  io.connect = function (host, details) {\n    var uri = io.util.parseUri(host)\n      , uuri\n      , socket;\n\n    if (global && global.location) {\n      uri.protocol = uri.protocol || global.location.protocol.slice(0, -1);\n      uri.host = uri.host || (global.document\n        ? global.document.domain : global.location.hostname);\n      uri.port = uri.port || global.location.port;\n    }\n\n    uuri = io.util.uniqueUri(uri);\n\n    var options = {\n        host: uri.host\n      , secure: 'https' == uri.protocol\n      , port: uri.port || ('https' == uri.protocol ? 443 : 80)\n      , query: uri.query || ''\n    };\n\n    io.util.merge(options, details);\n\n    if (options['force new connection'] || !io.sockets[uuri]) {\n      socket = new io.Socket(options);\n    }\n\n    if (!options['force new connection'] && socket) {\n      io.sockets[uuri] = socket;\n    }\n\n    socket = socket || io.sockets[uuri];\n\n    // if path is different from '' or /\n    return socket.of(uri.path.length > 1 ? uri.path : '');\n  };\n\n})('object' === typeof module ? module.exports : (this.io = {}), this);\n/**\n * socket.io\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n(function (exports, global) {\n\n  /**\n   * Utilities namespace.\n   *\n   * @namespace\n   */\n\n  var util = exports.util = {};\n\n  /**\n   * Parses an URI\n   *\n   * @author Steven Levithan <stevenlevithan.com> (MIT license)\n   * @api public\n   */\n\n  var re = /^(?:(?![^:@]+:[^:@\\/]*@)([^:\\/?#.]+):)?(?:\\/\\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\\/?#]*)(?::(\\d*))?)(((\\/(?:[^?#](?![^?#\\/]*\\.[^?#\\/.]+(?:[?#]|$)))*\\/?)?([^?#\\/]*))(?:\\?([^#]*))?(?:#(.*))?)/;\n\n  var parts = ['source', 'protocol', 'authority', 'userInfo', 'user', 'password',\n               'host', 'port', 'relative', 'path', 'directory', 'file', 'query',\n               'anchor'];\n\n  util.parseUri = function (str) {\n    var m = re.exec(str || '')\n      , uri = {}\n      , i = 14;\n\n    while (i--) {\n      uri[parts[i]] = m[i] || '';\n    }\n\n    return uri;\n  };\n\n  /**\n   * Produces a unique url that identifies a Socket.IO connection.\n   *\n   * @param {Object} uri\n   * @api public\n   */\n\n  util.uniqueUri = function (uri) {\n    var protocol = uri.protocol\n      , host = uri.host\n      , port = uri.port;\n\n    if ('document' in global) {\n      host = host || document.domain;\n      port = port || (protocol == 'https'\n        && document.location.protocol !== 'https:' ? 443 : document.location.port);\n    } else {\n      host = host || 'localhost';\n\n      if (!port && protocol == 'https') {\n        port = 443;\n      }\n    }\n\n    return (protocol || 'http') + '://' + host + ':' + (port || 80);\n  };\n\n  /**\n   * Mergest 2 query strings in to once unique query string\n   *\n   * @param {String} base\n   * @param {String} addition\n   * @api public\n   */\n\n  util.query = function (base, addition) {\n    var query = util.chunkQuery(base || '')\n      , components = [];\n\n    util.merge(query, util.chunkQuery(addition || ''));\n    for (var part in query) {\n      if (query.hasOwnProperty(part)) {\n        components.push(part + '=' + query[part]);\n      }\n    }\n\n    return components.length ? '?' + components.join('&') : '';\n  };\n\n  /**\n   * Transforms a querystring in to an object\n   *\n   * @param {String} qs\n   * @api public\n   */\n\n  util.chunkQuery = function (qs) {\n    var query = {}\n      , params = qs.split('&')\n      , i = 0\n      , l = params.length\n      , kv;\n\n    for (; i < l; ++i) {\n      kv = params[i].split('=');\n      if (kv[0]) {\n        query[kv[0]] = kv[1];\n      }\n    }\n\n    return query;\n  };\n\n  /**\n   * Executes the given function when the page is loaded.\n   *\n   *     io.util.load(function () { console.log('page loaded'); });\n   *\n   * @param {Function} fn\n   * @api public\n   */\n\n  var pageLoaded = false;\n\n  util.load = function (fn) {\n    if ('document' in global && document.readyState === 'complete' || pageLoaded) {\n      return fn();\n    }\n\n    util.on(global, 'load', fn, false);\n  };\n\n  /**\n   * Adds an event.\n   *\n   * @api private\n   */\n\n  util.on = function (element, event, fn, capture) {\n    if (element.attachEvent) {\n      element.attachEvent('on' + event, fn);\n    } else if (element.addEventListener) {\n      element.addEventListener(event, fn, capture);\n    }\n  };\n\n  /**\n   * Generates the correct `XMLHttpRequest` for regular and cross domain requests.\n   *\n   * @param {Boolean} [xdomain] Create a request that can be used cross domain.\n   * @returns {XMLHttpRequest|false} If we can create a XMLHttpRequest.\n   * @api private\n   */\n\n  util.request = function (xdomain) {\n\n    if (xdomain && 'undefined' != typeof XDomainRequest) {\n      return new XDomainRequest();\n    }\n\n    if ('undefined' != typeof XMLHttpRequest && (!xdomain || util.ua.hasCORS)) {\n      return new XMLHttpRequest();\n    }\n\n    if (!xdomain) {\n      try {\n        return new window[(['Active'].concat('Object').join('X'))]('Microsoft.XMLHTTP');\n      } catch(e) { }\n    }\n\n    return null;\n  };\n\n  /**\n   * XHR based transport constructor.\n   *\n   * @constructor\n   * @api public\n   */\n\n  /**\n   * Change the internal pageLoaded value.\n   */\n\n  if ('undefined' != typeof window) {\n    util.load(function () {\n      pageLoaded = true;\n    });\n  }\n\n  /**\n   * Defers a function to ensure a spinner is not displayed by the browser\n   *\n   * @param {Function} fn\n   * @api public\n   */\n\n  util.defer = function (fn) {\n    if (!util.ua.webkit || 'undefined' != typeof importScripts) {\n      return fn();\n    }\n\n    util.load(function () {\n      setTimeout(fn, 100);\n    });\n  };\n\n  /**\n   * Merges two objects.\n   *\n   * @api public\n   */\n  \n  util.merge = function merge (target, additional, deep, lastseen) {\n    var seen = lastseen || []\n      , depth = typeof deep == 'undefined' ? 2 : deep\n      , prop;\n\n    for (prop in additional) {\n      if (additional.hasOwnProperty(prop) && util.indexOf(seen, prop) < 0) {\n        if (typeof target[prop] !== 'object' || !depth) {\n          target[prop] = additional[prop];\n          seen.push(additional[prop]);\n        } else {\n          util.merge(target[prop], additional[prop], depth - 1, seen);\n        }\n      }\n    }\n\n    return target;\n  };\n\n  /**\n   * Merges prototypes from objects\n   *\n   * @api public\n   */\n  \n  util.mixin = function (ctor, ctor2) {\n    util.merge(ctor.prototype, ctor2.prototype);\n  };\n\n  /**\n   * Shortcut for prototypical and static inheritance.\n   *\n   * @api private\n   */\n\n  util.inherit = function (ctor, ctor2) {\n    function f() {};\n    f.prototype = ctor2.prototype;\n    ctor.prototype = new f;\n  };\n\n  /**\n   * Checks if the given object is an Array.\n   *\n   *     io.util.isArray([]); // true\n   *     io.util.isArray({}); // false\n   *\n   * @param Object obj\n   * @api public\n   */\n\n  util.isArray = Array.isArray || function (obj) {\n    return Object.prototype.toString.call(obj) === '[object Array]';\n  };\n\n  /**\n   * Intersects values of two arrays into a third\n   *\n   * @api public\n   */\n\n  util.intersect = function (arr, arr2) {\n    var ret = []\n      , longest = arr.length > arr2.length ? arr : arr2\n      , shortest = arr.length > arr2.length ? arr2 : arr;\n\n    for (var i = 0, l = shortest.length; i < l; i++) {\n      if (~util.indexOf(longest, shortest[i]))\n        ret.push(shortest[i]);\n    }\n\n    return ret;\n  }\n\n  /**\n   * Array indexOf compatibility.\n   *\n   * @see bit.ly/a5Dxa2\n   * @api public\n   */\n\n  util.indexOf = function (arr, o, i) {\n    \n    for (var j = arr.length, i = i < 0 ? i + j < 0 ? 0 : i + j : i || 0; \n         i < j && arr[i] !== o; i++) {}\n\n    return j <= i ? -1 : i;\n  };\n\n  /**\n   * Converts enumerables to array.\n   *\n   * @api public\n   */\n\n  util.toArray = function (enu) {\n    var arr = [];\n\n    for (var i = 0, l = enu.length; i < l; i++)\n      arr.push(enu[i]);\n\n    return arr;\n  };\n\n  /**\n   * UA / engines detection namespace.\n   *\n   * @namespace\n   */\n\n  util.ua = {};\n\n  /**\n   * Whether the UA supports CORS for XHR.\n   *\n   * @api public\n   */\n\n  util.ua.hasCORS = 'undefined' != typeof XMLHttpRequest && (function () {\n    try {\n      var a = new XMLHttpRequest();\n    } catch (e) {\n      return false;\n    }\n\n    return a.withCredentials != undefined;\n  })();\n\n  /**\n   * Detect webkit.\n   *\n   * @api public\n   */\n\n  util.ua.webkit = 'undefined' != typeof navigator\n    && /webkit/i.test(navigator.userAgent);\n\n   /**\n   * Detect iPad/iPhone/iPod.\n   *\n   * @api public\n   */\n\n  util.ua.iDevice = 'undefined' != typeof navigator\n      && /iPad|iPhone|iPod/i.test(navigator.userAgent);\n\n})('undefined' != typeof io ? io : module.exports, this);\n/**\n * socket.io\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n(function (exports, io) {\n\n  /**\n   * Expose constructor.\n   */\n\n  exports.EventEmitter = EventEmitter;\n\n  /**\n   * Event emitter constructor.\n   *\n   * @api public.\n   */\n\n  function EventEmitter () {};\n\n  /**\n   * Adds a listener\n   *\n   * @api public\n   */\n\n  EventEmitter.prototype.on = function (name, fn) {\n    if (!this.$events) {\n      this.$events = {};\n    }\n\n    if (!this.$events[name]) {\n      this.$events[name] = fn;\n    } else if (io.util.isArray(this.$events[name])) {\n      this.$events[name].push(fn);\n    } else {\n      this.$events[name] = [this.$events[name], fn];\n    }\n\n    return this;\n  };\n\n  EventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n  /**\n   * Adds a volatile listener.\n   *\n   * @api public\n   */\n\n  EventEmitter.prototype.once = function (name, fn) {\n    var self = this;\n\n    function on () {\n      self.removeListener(name, on);\n      fn.apply(this, arguments);\n    };\n\n    on.listener = fn;\n    this.on(name, on);\n\n    return this;\n  };\n\n  /**\n   * Removes a listener.\n   *\n   * @api public\n   */\n\n  EventEmitter.prototype.removeListener = function (name, fn) {\n    if (this.$events && this.$events[name]) {\n      var list = this.$events[name];\n\n      if (io.util.isArray(list)) {\n        var pos = -1;\n\n        for (var i = 0, l = list.length; i < l; i++) {\n          if (list[i] === fn || (list[i].listener && list[i].listener === fn)) {\n            pos = i;\n            break;\n          }\n        }\n\n        if (pos < 0) {\n          return this;\n        }\n\n        list.splice(pos, 1);\n\n        if (!list.length) {\n          delete this.$events[name];\n        }\n      } else if (list === fn || (list.listener && list.listener === fn)) {\n        delete this.$events[name];\n      }\n    }\n\n    return this;\n  };\n\n  /**\n   * Removes all listeners for an event.\n   *\n   * @api public\n   */\n\n  EventEmitter.prototype.removeAllListeners = function (name) {\n    if (name === undefined) {\n      this.$events = {};\n      return this;\n    }\n\n    if (this.$events && this.$events[name]) {\n      this.$events[name] = null;\n    }\n\n    return this;\n  };\n\n  /**\n   * Gets all listeners for a certain event.\n   *\n   * @api publci\n   */\n\n  EventEmitter.prototype.listeners = function (name) {\n    if (!this.$events) {\n      this.$events = {};\n    }\n\n    if (!this.$events[name]) {\n      this.$events[name] = [];\n    }\n\n    if (!io.util.isArray(this.$events[name])) {\n      this.$events[name] = [this.$events[name]];\n    }\n\n    return this.$events[name];\n  };\n\n  /**\n   * Emits an event.\n   *\n   * @api public\n   */\n\n  EventEmitter.prototype.emit = function (name) {\n    if (!this.$events) {\n      return false;\n    }\n\n    var handler = this.$events[name];\n\n    if (!handler) {\n      return false;\n    }\n\n    var args = Array.prototype.slice.call(arguments, 1);\n\n    if ('function' == typeof handler) {\n      handler.apply(this, args);\n    } else if (io.util.isArray(handler)) {\n      var listeners = handler.slice();\n\n      for (var i = 0, l = listeners.length; i < l; i++) {\n        listeners[i].apply(this, args);\n      }\n    } else {\n      return false;\n    }\n\n    return true;\n  };\n\n})(\n    'undefined' != typeof io ? io : module.exports\n  , 'undefined' != typeof io ? io : module.parent.exports\n);\n\n/**\n * socket.io\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n/**\n * Based on JSON2 (http://www.JSON.org/js.html).\n */\n\n(function (exports, nativeJSON) {\n  \"use strict\";\n\n  // use native JSON if it's available\n  if (nativeJSON && nativeJSON.parse){\n    return exports.JSON = {\n      parse: nativeJSON.parse\n    , stringify: nativeJSON.stringify\n    }\n  }\n\n  var JSON = exports.JSON = {};\n\n  function f(n) {\n      // Format integers to have at least two digits.\n      return n < 10 ? '0' + n : n;\n  }\n\n  function date(d, key) {\n    return isFinite(d.valueOf()) ?\n        d.getUTCFullYear()     + '-' +\n        f(d.getUTCMonth() + 1) + '-' +\n        f(d.getUTCDate())      + 'T' +\n        f(d.getUTCHours())     + ':' +\n        f(d.getUTCMinutes())   + ':' +\n        f(d.getUTCSeconds())   + 'Z' : null;\n  };\n\n  var cx = /[\\u0000\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,\n      escapable = /[\\\\\\\"\\x00-\\x1f\\x7f-\\x9f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,\n      gap,\n      indent,\n      meta = {    // table of character substitutions\n          '\\b': '\\\\b',\n          '\\t': '\\\\t',\n          '\\n': '\\\\n',\n          '\\f': '\\\\f',\n          '\\r': '\\\\r',\n          '\"' : '\\\\\"',\n          '\\\\': '\\\\\\\\'\n      },\n      rep;\n\n\n  function quote(string) {\n\n// If the string contains no control characters, no quote characters, and no\n// backslash characters, then we can safely slap some quotes around it.\n// Otherwise we must also replace the offending characters with safe escape\n// sequences.\n\n      escapable.lastIndex = 0;\n      return escapable.test(string) ? '\"' + string.replace(escapable, function (a) {\n          var c = meta[a];\n          return typeof c === 'string' ? c :\n              '\\\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);\n      }) + '\"' : '\"' + string + '\"';\n  }\n\n\n  function str(key, holder) {\n\n// Produce a string from holder[key].\n\n      var i,          // The loop counter.\n          k,          // The member key.\n          v,          // The member value.\n          length,\n          mind = gap,\n          partial,\n          value = holder[key];\n\n// If the value has a toJSON method, call it to obtain a replacement value.\n\n      if (value instanceof Date) {\n          value = date(key);\n      }\n\n// If we were called with a replacer function, then call the replacer to\n// obtain a replacement value.\n\n      if (typeof rep === 'function') {\n          value = rep.call(holder, key, value);\n      }\n\n// What happens next depends on the value's type.\n\n      switch (typeof value) {\n      case 'string':\n          return quote(value);\n\n      case 'number':\n\n// JSON numbers must be finite. Encode non-finite numbers as null.\n\n          return isFinite(value) ? String(value) : 'null';\n\n      case 'boolean':\n      case 'null':\n\n// If the value is a boolean or null, convert it to a string. Note:\n// typeof null does not produce 'null'. The case is included here in\n// the remote chance that this gets fixed someday.\n\n          return String(value);\n\n// If the type is 'object', we might be dealing with an object or an array or\n// null.\n\n      case 'object':\n\n// Due to a specification blunder in ECMAScript, typeof null is 'object',\n// so watch out for that case.\n\n          if (!value) {\n              return 'null';\n          }\n\n// Make an array to hold the partial results of stringifying this object value.\n\n          gap += indent;\n          partial = [];\n\n// Is the value an array?\n\n          if (Object.prototype.toString.apply(value) === '[object Array]') {\n\n// The value is an array. Stringify every element. Use null as a placeholder\n// for non-JSON values.\n\n              length = value.length;\n              for (i = 0; i < length; i += 1) {\n                  partial[i] = str(i, value) || 'null';\n              }\n\n// Join all of the elements together, separated with commas, and wrap them in\n// brackets.\n\n              v = partial.length === 0 ? '[]' : gap ?\n                  '[\\n' + gap + partial.join(',\\n' + gap) + '\\n' + mind + ']' :\n                  '[' + partial.join(',') + ']';\n              gap = mind;\n              return v;\n          }\n\n// If the replacer is an array, use it to select the members to be stringified.\n\n          if (rep && typeof rep === 'object') {\n              length = rep.length;\n              for (i = 0; i < length; i += 1) {\n                  if (typeof rep[i] === 'string') {\n                      k = rep[i];\n                      v = str(k, value);\n                      if (v) {\n                          partial.push(quote(k) + (gap ? ': ' : ':') + v);\n                      }\n                  }\n              }\n          } else {\n\n// Otherwise, iterate through all of the keys in the object.\n\n              for (k in value) {\n                  if (Object.prototype.hasOwnProperty.call(value, k)) {\n                      v = str(k, value);\n                      if (v) {\n                          partial.push(quote(k) + (gap ? ': ' : ':') + v);\n                      }\n                  }\n              }\n          }\n\n// Join all of the member texts together, separated with commas,\n// and wrap them in braces.\n\n          v = partial.length === 0 ? '{}' : gap ?\n              '{\\n' + gap + partial.join(',\\n' + gap) + '\\n' + mind + '}' :\n              '{' + partial.join(',') + '}';\n          gap = mind;\n          return v;\n      }\n  }\n\n// If the JSON object does not yet have a stringify method, give it one.\n\n  JSON.stringify = function (value, replacer, space) {\n\n// The stringify method takes a value and an optional replacer, and an optional\n// space parameter, and returns a JSON text. The replacer can be a function\n// that can replace values, or an array of strings that will select the keys.\n// A default replacer method can be provided. Use of the space parameter can\n// produce text that is more easily readable.\n\n      var i;\n      gap = '';\n      indent = '';\n\n// If the space parameter is a number, make an indent string containing that\n// many spaces.\n\n      if (typeof space === 'number') {\n          for (i = 0; i < space; i += 1) {\n              indent += ' ';\n          }\n\n// If the space parameter is a string, it will be used as the indent string.\n\n      } else if (typeof space === 'string') {\n          indent = space;\n      }\n\n// If there is a replacer, it must be a function or an array.\n// Otherwise, throw an error.\n\n      rep = replacer;\n      if (replacer && typeof replacer !== 'function' &&\n              (typeof replacer !== 'object' ||\n              typeof replacer.length !== 'number')) {\n          throw new Error('JSON.stringify');\n      }\n\n// Make a fake root object containing our value under the key of ''.\n// Return the result of stringifying the value.\n\n      return str('', {'': value});\n  };\n\n// If the JSON object does not yet have a parse method, give it one.\n\n  JSON.parse = function (text, reviver) {\n  // The parse method takes a text and an optional reviver function, and returns\n  // a JavaScript value if the text is a valid JSON text.\n\n      var j;\n\n      function walk(holder, key) {\n\n  // The walk method is used to recursively walk the resulting structure so\n  // that modifications can be made.\n\n          var k, v, value = holder[key];\n          if (value && typeof value === 'object') {\n              for (k in value) {\n                  if (Object.prototype.hasOwnProperty.call(value, k)) {\n                      v = walk(value, k);\n                      if (v !== undefined) {\n                          value[k] = v;\n                      } else {\n                          delete value[k];\n                      }\n                  }\n              }\n          }\n          return reviver.call(holder, key, value);\n      }\n\n\n  // Parsing happens in four stages. In the first stage, we replace certain\n  // Unicode characters with escape sequences. JavaScript handles many characters\n  // incorrectly, either silently deleting them, or treating them as line endings.\n\n      text = String(text);\n      cx.lastIndex = 0;\n      if (cx.test(text)) {\n          text = text.replace(cx, function (a) {\n              return '\\\\u' +\n                  ('0000' + a.charCodeAt(0).toString(16)).slice(-4);\n          });\n      }\n\n  // In the second stage, we run the text against regular expressions that look\n  // for non-JSON patterns. We are especially concerned with '()' and 'new'\n  // because they can cause invocation, and '=' because it can cause mutation.\n  // But just to be safe, we want to reject all unexpected forms.\n\n  // We split the second stage into 4 regexp operations in order to work around\n  // crippling inefficiencies in IE's and Safari's regexp engines. First we\n  // replace the JSON backslash pairs with '@' (a non-JSON character). Second, we\n  // replace all simple value tokens with ']' characters. Third, we delete all\n  // open brackets that follow a colon or comma or that begin the text. Finally,\n  // we look to see that the remaining characters are only whitespace or ']' or\n  // ',' or ':' or '{' or '}'. If that is so, then the text is safe for eval.\n\n      if (/^[\\],:{}\\s]*$/\n              .test(text.replace(/\\\\(?:[\"\\\\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@')\n                  .replace(/\"[^\"\\\\\\n\\r]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g, ']')\n                  .replace(/(?:^|:|,)(?:\\s*\\[)+/g, ''))) {\n\n  // In the third stage we use the eval function to compile the text into a\n  // JavaScript structure. The '{' operator is subject to a syntactic ambiguity\n  // in JavaScript: it can begin a block or an object literal. We wrap the text\n  // in parens to eliminate the ambiguity.\n\n          j = eval('(' + text + ')');\n\n  // In the optional fourth stage, we recursively walk the new structure, passing\n  // each name/value pair to a reviver function for possible transformation.\n\n          return typeof reviver === 'function' ?\n              walk({'': j}, '') : j;\n      }\n\n  // If the text is not JSON parseable, then a SyntaxError is thrown.\n\n      throw new SyntaxError('JSON.parse');\n  };\n\n})(\n    'undefined' != typeof io ? io : module.exports\n  , typeof JSON !== 'undefined' ? JSON : undefined\n);\n\n/**\n * socket.io\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n(function (exports, io) {\n\n  /**\n   * Parser namespace.\n   *\n   * @namespace\n   */\n\n  var parser = exports.parser = {};\n\n  /**\n   * Packet types.\n   */\n\n  var packets = parser.packets = [\n      'disconnect'\n    , 'connect'\n    , 'heartbeat'\n    , 'message'\n    , 'json'\n    , 'event'\n    , 'ack'\n    , 'error'\n    , 'noop'\n  ];\n\n  /**\n   * Errors reasons.\n   */\n\n  var reasons = parser.reasons = [\n      'transport not supported'\n    , 'client not handshaken'\n    , 'unauthorized'\n  ];\n\n  /**\n   * Errors advice.\n   */\n\n  var advice = parser.advice = [\n      'reconnect'\n  ];\n\n  /**\n   * Shortcuts.\n   */\n\n  var JSON = io.JSON\n    , indexOf = io.util.indexOf;\n\n  /**\n   * Encodes a packet.\n   *\n   * @api private\n   */\n\n  parser.encodePacket = function (packet) {\n    var type = indexOf(packets, packet.type)\n      , id = packet.id || ''\n      , endpoint = packet.endpoint || ''\n      , ack = packet.ack\n      , data = null;\n\n    switch (packet.type) {\n      case 'error':\n        var reason = packet.reason ? indexOf(reasons, packet.reason) : ''\n          , adv = packet.advice ? indexOf(advice, packet.advice) : '';\n\n        if (reason !== '' || adv !== '')\n          data = reason + (adv !== '' ? ('+' + adv) : '');\n\n        break;\n\n      case 'message':\n        if (packet.data !== '')\n          data = packet.data;\n        break;\n\n      case 'event':\n        var ev = { name: packet.name };\n\n        if (packet.args && packet.args.length) {\n          ev.args = packet.args;\n        }\n\n        data = JSON.stringify(ev);\n        break;\n\n      case 'json':\n        data = JSON.stringify(packet.data);\n        break;\n\n      case 'connect':\n        if (packet.qs)\n          data = packet.qs;\n        break;\n\n      case 'ack':\n        data = packet.ackId\n          + (packet.args && packet.args.length\n              ? '+' + JSON.stringify(packet.args) : '');\n        break;\n    }\n\n    // construct packet with required fragments\n    var encoded = [\n        type\n      , id + (ack == 'data' ? '+' : '')\n      , endpoint\n    ];\n\n    // data fragment is optional\n    if (data !== null && data !== undefined)\n      encoded.push(data);\n\n    return encoded.join(':');\n  };\n\n  /**\n   * Encodes multiple messages (payload).\n   *\n   * @param {Array} messages\n   * @api private\n   */\n\n  parser.encodePayload = function (packets) {\n    var decoded = '';\n\n    if (packets.length == 1)\n      return packets[0];\n\n    for (var i = 0, l = packets.length; i < l; i++) {\n      var packet = packets[i];\n      decoded += '\\ufffd' + packet.length + '\\ufffd' + packets[i];\n    }\n\n    return decoded;\n  };\n\n  /**\n   * Decodes a packet\n   *\n   * @api private\n   */\n\n  var regexp = /([^:]+):([0-9]+)?(\\+)?:([^:]+)?:?([\\s\\S]*)?/;\n\n  parser.decodePacket = function (data) {\n    var pieces = data.match(regexp);\n\n    if (!pieces) return {};\n\n    var id = pieces[2] || ''\n      , data = pieces[5] || ''\n      , packet = {\n            type: packets[pieces[1]]\n          , endpoint: pieces[4] || ''\n        };\n\n    // whether we need to acknowledge the packet\n    if (id) {\n      packet.id = id;\n      if (pieces[3])\n        packet.ack = 'data';\n      else\n        packet.ack = true;\n    }\n\n    // handle different packet types\n    switch (packet.type) {\n      case 'error':\n        var pieces = data.split('+');\n        packet.reason = reasons[pieces[0]] || '';\n        packet.advice = advice[pieces[1]] || '';\n        break;\n\n      case 'message':\n        packet.data = data || '';\n        break;\n\n      case 'event':\n        try {\n          var opts = JSON.parse(data);\n          packet.name = opts.name;\n          packet.args = opts.args;\n        } catch (e) { }\n\n        packet.args = packet.args || [];\n        break;\n\n      case 'json':\n        try {\n          packet.data = JSON.parse(data);\n        } catch (e) { }\n        break;\n\n      case 'connect':\n        packet.qs = data || '';\n        break;\n\n      case 'ack':\n        var pieces = data.match(/^([0-9]+)(\\+)?(.*)/);\n        if (pieces) {\n          packet.ackId = pieces[1];\n          packet.args = [];\n\n          if (pieces[3]) {\n            try {\n              packet.args = pieces[3] ? JSON.parse(pieces[3]) : [];\n            } catch (e) { }\n          }\n        }\n        break;\n\n      case 'disconnect':\n      case 'heartbeat':\n        break;\n    };\n\n    return packet;\n  };\n\n  /**\n   * Decodes data payload. Detects multiple messages\n   *\n   * @return {Array} messages\n   * @api public\n   */\n\n  parser.decodePayload = function (data) {\n    // IE doesn't like data[i] for unicode chars, charAt works fine\n    if (data.charAt(0) == '\\ufffd') {\n      var ret = [];\n\n      for (var i = 1, length = ''; i < data.length; i++) {\n        if (data.charAt(i) == '\\ufffd') {\n          ret.push(parser.decodePacket(data.substr(i + 1).substr(0, length)));\n          i += Number(length) + 1;\n          length = '';\n        } else {\n          length += data.charAt(i);\n        }\n      }\n\n      return ret;\n    } else {\n      return [parser.decodePacket(data)];\n    }\n  };\n\n})(\n    'undefined' != typeof io ? io : module.exports\n  , 'undefined' != typeof io ? io : module.parent.exports\n);\n/**\n * socket.io\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n(function (exports, io) {\n\n  /**\n   * Expose constructor.\n   */\n\n  exports.Transport = Transport;\n\n  /**\n   * This is the transport template for all supported transport methods.\n   *\n   * @constructor\n   * @api public\n   */\n\n  function Transport (socket, sessid) {\n    this.socket = socket;\n    this.sessid = sessid;\n  };\n\n  /**\n   * Apply EventEmitter mixin.\n   */\n\n  io.util.mixin(Transport, io.EventEmitter);\n\n\n  /**\n   * Indicates whether heartbeats is enabled for this transport\n   *\n   * @api private\n   */\n\n  Transport.prototype.heartbeats = function () {\n    return true;\n  }\n\n  /**\n   * Handles the response from the server. When a new response is received\n   * it will automatically update the timeout, decode the message and\n   * forwards the response to the onMessage function for further processing.\n   *\n   * @param {String} data Response from the server.\n   * @api private\n   */\n\n  Transport.prototype.onData = function (data) {\n    this.clearCloseTimeout();\n    \n    // If the connection in currently open (or in a reopening state) reset the close \n    // timeout since we have just received data. This check is necessary so\n    // that we don't reset the timeout on an explicitly disconnected connection.\n    if (this.socket.connected || this.socket.connecting || this.socket.reconnecting) {\n      this.setCloseTimeout();\n    }\n\n    if (data !== '') {\n      // todo: we should only do decodePayload for xhr transports\n      var msgs = io.parser.decodePayload(data);\n\n      if (msgs && msgs.length) {\n        for (var i = 0, l = msgs.length; i < l; i++) {\n          this.onPacket(msgs[i]);\n        }\n      }\n    }\n\n    return this;\n  };\n\n  /**\n   * Handles packets.\n   *\n   * @api private\n   */\n\n  Transport.prototype.onPacket = function (packet) {\n    this.socket.setHeartbeatTimeout();\n\n    if (packet.type == 'heartbeat') {\n      return this.onHeartbeat();\n    }\n\n    if (packet.type == 'connect' && packet.endpoint == '') {\n      this.onConnect();\n    }\n\n    if (packet.type == 'error' && packet.advice == 'reconnect') {\n      this.isOpen = false;\n    }\n\n    this.socket.onPacket(packet);\n\n    return this;\n  };\n\n  /**\n   * Sets close timeout\n   *\n   * @api private\n   */\n  \n  Transport.prototype.setCloseTimeout = function () {\n    if (!this.closeTimeout) {\n      var self = this;\n\n      this.closeTimeout = setTimeout(function () {\n        self.onDisconnect();\n      }, this.socket.closeTimeout);\n    }\n  };\n\n  /**\n   * Called when transport disconnects.\n   *\n   * @api private\n   */\n\n  Transport.prototype.onDisconnect = function () {\n    if (this.isOpen) this.close();\n    this.clearTimeouts();\n    this.socket.onDisconnect();\n    return this;\n  };\n\n  /**\n   * Called when transport connects\n   *\n   * @api private\n   */\n\n  Transport.prototype.onConnect = function () {\n    this.socket.onConnect();\n    return this;\n  }\n\n  /**\n   * Clears close timeout\n   *\n   * @api private\n   */\n\n  Transport.prototype.clearCloseTimeout = function () {\n    if (this.closeTimeout) {\n      clearTimeout(this.closeTimeout);\n      this.closeTimeout = null;\n    }\n  };\n\n  /**\n   * Clear timeouts\n   *\n   * @api private\n   */\n\n  Transport.prototype.clearTimeouts = function () {\n    this.clearCloseTimeout();\n\n    if (this.reopenTimeout) {\n      clearTimeout(this.reopenTimeout);\n    }\n  };\n\n  /**\n   * Sends a packet\n   *\n   * @param {Object} packet object.\n   * @api private\n   */\n\n  Transport.prototype.packet = function (packet) {\n    this.send(io.parser.encodePacket(packet));\n  };\n\n  /**\n   * Send the received heartbeat message back to server. So the server\n   * knows we are still connected.\n   *\n   * @param {String} heartbeat Heartbeat response from the server.\n   * @api private\n   */\n\n  Transport.prototype.onHeartbeat = function (heartbeat) {\n    this.packet({ type: 'heartbeat' });\n  };\n \n  /**\n   * Called when the transport opens.\n   *\n   * @api private\n   */\n\n  Transport.prototype.onOpen = function () {\n    this.isOpen = true;\n    this.clearCloseTimeout();\n    this.socket.onOpen();\n  };\n\n  /**\n   * Notifies the base when the connection with the Socket.IO server\n   * has been disconnected.\n   *\n   * @api private\n   */\n\n  Transport.prototype.onClose = function () {\n    var self = this;\n\n    /* FIXME: reopen delay causing a infinit loop\n    this.reopenTimeout = setTimeout(function () {\n      self.open();\n    }, this.socket.options['reopen delay']);*/\n\n    this.isOpen = false;\n    this.socket.onClose();\n    this.onDisconnect();\n  };\n\n  /**\n   * Generates a connection url based on the Socket.IO URL Protocol.\n   * See <https://github.com/learnboost/socket.io-node/> for more details.\n   *\n   * @returns {String} Connection url\n   * @api private\n   */\n\n  Transport.prototype.prepareUrl = function () {\n    var options = this.socket.options;\n\n    return this.scheme() + '://'\n      + options.host + ':' + options.port + '/'\n      + options.resource + '/' + io.protocol\n      + '/' + this.name + '/' + this.sessid;\n  };\n\n  /**\n   * Checks if the transport is ready to start a connection.\n   *\n   * @param {Socket} socket The socket instance that needs a transport\n   * @param {Function} fn The callback\n   * @api private\n   */\n\n  Transport.prototype.ready = function (socket, fn) {\n    fn.call(this);\n  };\n})(\n    'undefined' != typeof io ? io : module.exports\n  , 'undefined' != typeof io ? io : module.parent.exports\n);\n/**\n * socket.io\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n(function (exports, io, global) {\n\n  /**\n   * Expose constructor.\n   */\n\n  exports.Socket = Socket;\n\n  /**\n   * Create a new `Socket.IO client` which can establish a persistent\n   * connection with a Socket.IO enabled server.\n   *\n   * @api public\n   */\n\n  function Socket (options) {\n    this.options = {\n        port: 80\n      , secure: false\n      , document: 'document' in global ? document : false\n      , resource: 'socket.io'\n      , transports: io.transports\n      , 'connect timeout': 10000\n      , 'try multiple transports': true\n      , 'reconnect': true\n      , 'reconnection delay': 500\n      , 'reconnection limit': Infinity\n      , 'reopen delay': 3000\n      , 'max reconnection attempts': 10\n      , 'sync disconnect on unload': false\n      , 'auto connect': true\n      , 'flash policy port': 10843\n      , 'manualFlush': false\n    };\n\n    io.util.merge(this.options, options);\n\n    this.connected = false;\n    this.open = false;\n    this.connecting = false;\n    this.reconnecting = false;\n    this.namespaces = {};\n    this.buffer = [];\n    this.doBuffer = false;\n\n    if (this.options['sync disconnect on unload'] &&\n        (!this.isXDomain() || io.util.ua.hasCORS)) {\n      var self = this;\n      io.util.on(global, 'beforeunload', function () {\n        self.disconnectSync();\n      }, false);\n    }\n\n    if (this.options['auto connect']) {\n      this.connect();\n    }\n};\n\n  /**\n   * Apply EventEmitter mixin.\n   */\n\n  io.util.mixin(Socket, io.EventEmitter);\n\n  /**\n   * Returns a namespace listener/emitter for this socket\n   *\n   * @api public\n   */\n\n  Socket.prototype.of = function (name) {\n    if (!this.namespaces[name]) {\n      this.namespaces[name] = new io.SocketNamespace(this, name);\n\n      if (name !== '') {\n        this.namespaces[name].packet({ type: 'connect' });\n      }\n    }\n\n    return this.namespaces[name];\n  };\n\n  /**\n   * Emits the given event to the Socket and all namespaces\n   *\n   * @api private\n   */\n\n  Socket.prototype.publish = function () {\n    this.emit.apply(this, arguments);\n\n    var nsp;\n\n    for (var i in this.namespaces) {\n      if (this.namespaces.hasOwnProperty(i)) {\n        nsp = this.of(i);\n        nsp.$emit.apply(nsp, arguments);\n      }\n    }\n  };\n\n  /**\n   * Performs the handshake\n   *\n   * @api private\n   */\n\n  function empty () { };\n\n  Socket.prototype.handshake = function (fn) {\n    var self = this\n      , options = this.options;\n\n    function complete (data) {\n      if (data instanceof Error) {\n        self.connecting = false;\n        self.onError(data.message);\n      } else {\n        fn.apply(null, data.split(':'));\n      }\n    };\n\n    var url = [\n          'http' + (options.secure ? 's' : '') + ':/'\n        , options.host + ':' + options.port\n        , options.resource\n        , io.protocol\n        , io.util.query(this.options.query, 't=' + +new Date)\n      ].join('/');\n\n    if (this.isXDomain() && !io.util.ua.hasCORS) {\n      var insertAt = document.getElementsByTagName('script')[0]\n        , script = document.createElement('script');\n\n      script.src = url + '&jsonp=' + io.j.length;\n      insertAt.parentNode.insertBefore(script, insertAt);\n\n      io.j.push(function (data) {\n        complete(data);\n        script.parentNode.removeChild(script);\n      });\n    } else {\n      var xhr = io.util.request();\n\n      xhr.open('GET', url, true);\n      if (this.isXDomain()) {\n        xhr.withCredentials = true;\n      }\n      xhr.onreadystatechange = function () {\n        if (xhr.readyState == 4) {\n          xhr.onreadystatechange = empty;\n\n          if (xhr.status == 200) {\n            complete(xhr.responseText);\n          } else if (xhr.status == 403) {\n            self.onError(xhr.responseText);\n          } else {\n            self.connecting = false;            \n            !self.reconnecting && self.onError(xhr.responseText);\n          }\n        }\n      };\n      xhr.send(null);\n    }\n  };\n\n  /**\n   * Find an available transport based on the options supplied in the constructor.\n   *\n   * @api private\n   */\n\n  Socket.prototype.getTransport = function (override) {\n    var transports = override || this.transports, match;\n\n    for (var i = 0, transport; transport = transports[i]; i++) {\n      if (io.Transport[transport]\n        && io.Transport[transport].check(this)\n        && (!this.isXDomain() || io.Transport[transport].xdomainCheck(this))) {\n        return new io.Transport[transport](this, this.sessionid);\n      }\n    }\n\n    return null;\n  };\n\n  /**\n   * Connects to the server.\n   *\n   * @param {Function} [fn] Callback.\n   * @returns {io.Socket}\n   * @api public\n   */\n\n  Socket.prototype.connect = function (fn) {\n    if (this.connecting) {\n      return this;\n    }\n\n    var self = this;\n    self.connecting = true;\n    \n    this.handshake(function (sid, heartbeat, close, transports) {\n      self.sessionid = sid;\n      self.closeTimeout = close * 1000;\n      self.heartbeatTimeout = heartbeat * 1000;\n      if(!self.transports)\n          self.transports = self.origTransports = (transports ? io.util.intersect(\n              transports.split(',')\n            , self.options.transports\n          ) : self.options.transports);\n\n      self.setHeartbeatTimeout();\n\n      function connect (transports){\n        if (self.transport) self.transport.clearTimeouts();\n\n        self.transport = self.getTransport(transports);\n        if (!self.transport) return self.publish('connect_failed');\n\n        // once the transport is ready\n        self.transport.ready(self, function () {\n          self.connecting = true;\n          self.publish('connecting', self.transport.name);\n          self.transport.open();\n\n          if (self.options['connect timeout']) {\n            self.connectTimeoutTimer = setTimeout(function () {\n              if (!self.connected) {\n                self.connecting = false;\n\n                if (self.options['try multiple transports']) {\n                  var remaining = self.transports;\n\n                  while (remaining.length > 0 && remaining.splice(0,1)[0] !=\n                         self.transport.name) {}\n\n                    if (remaining.length){\n                      connect(remaining);\n                    } else {\n                      self.publish('connect_failed');\n                    }\n                }\n              }\n            }, self.options['connect timeout']);\n          }\n        });\n      }\n\n      connect(self.transports);\n\n      self.once('connect', function (){\n        clearTimeout(self.connectTimeoutTimer);\n\n        fn && typeof fn == 'function' && fn();\n      });\n    });\n\n    return this;\n  };\n\n  /**\n   * Clears and sets a new heartbeat timeout using the value given by the\n   * server during the handshake.\n   *\n   * @api private\n   */\n\n  Socket.prototype.setHeartbeatTimeout = function () {\n    clearTimeout(this.heartbeatTimeoutTimer);\n    if(this.transport && !this.transport.heartbeats()) return;\n\n    var self = this;\n    this.heartbeatTimeoutTimer = setTimeout(function () {\n      self.transport.onClose();\n    }, this.heartbeatTimeout);\n  };\n\n  /**\n   * Sends a message.\n   *\n   * @param {Object} data packet.\n   * @returns {io.Socket}\n   * @api public\n   */\n\n  Socket.prototype.packet = function (data) {\n    if (this.connected && !this.doBuffer) {\n      this.transport.packet(data);\n    } else {\n      this.buffer.push(data);\n    }\n\n    return this;\n  };\n\n  /**\n   * Sets buffer state\n   *\n   * @api private\n   */\n\n  Socket.prototype.setBuffer = function (v) {\n    this.doBuffer = v;\n\n    if (!v && this.connected && this.buffer.length) {\n      if (!this.options['manualFlush']) {\n        this.flushBuffer();\n      }\n    }\n  };\n\n  /**\n   * Flushes the buffer data over the wire.\n   * To be invoked manually when 'manualFlush' is set to true.\n   *\n   * @api public\n   */\n\n  Socket.prototype.flushBuffer = function() {\n    this.transport.payload(this.buffer);\n    this.buffer = [];\n  };\n  \n\n  /**\n   * Disconnect the established connect.\n   *\n   * @returns {io.Socket}\n   * @api public\n   */\n\n  Socket.prototype.disconnect = function () {\n    if (this.connected || this.connecting) {\n      if (this.open) {\n        this.of('').packet({ type: 'disconnect' });\n      }\n\n      // handle disconnection immediately\n      this.onDisconnect('booted');\n    }\n\n    return this;\n  };\n\n  /**\n   * Disconnects the socket with a sync XHR.\n   *\n   * @api private\n   */\n\n  Socket.prototype.disconnectSync = function () {\n    // ensure disconnection\n    var xhr = io.util.request();\n    var uri = [\n        'http' + (this.options.secure ? 's' : '') + ':/'\n      , this.options.host + ':' + this.options.port\n      , this.options.resource\n      , io.protocol\n      , ''\n      , this.sessionid\n    ].join('/') + '/?disconnect=1';\n\n    xhr.open('GET', uri, false);\n    xhr.send(null);\n\n    // handle disconnection immediately\n    this.onDisconnect('booted');\n  };\n\n  /**\n   * Check if we need to use cross domain enabled transports. Cross domain would\n   * be a different port or different domain name.\n   *\n   * @returns {Boolean}\n   * @api private\n   */\n\n  Socket.prototype.isXDomain = function () {\n\n    var port = global.location.port ||\n      ('https:' == global.location.protocol ? 443 : 80);\n\n    return this.options.host !== global.location.hostname \n      || this.options.port != port;\n  };\n\n  /**\n   * Called upon handshake.\n   *\n   * @api private\n   */\n\n  Socket.prototype.onConnect = function () {\n    if (!this.connected) {\n      this.connected = true;\n      this.connecting = false;\n      if (!this.doBuffer) {\n        // make sure to flush the buffer\n        this.setBuffer(false);\n      }\n      this.emit('connect');\n    }\n  };\n\n  /**\n   * Called when the transport opens\n   *\n   * @api private\n   */\n\n  Socket.prototype.onOpen = function () {\n    this.open = true;\n  };\n\n  /**\n   * Called when the transport closes.\n   *\n   * @api private\n   */\n\n  Socket.prototype.onClose = function () {\n    this.open = false;\n    clearTimeout(this.heartbeatTimeoutTimer);\n  };\n\n  /**\n   * Called when the transport first opens a connection\n   *\n   * @param text\n   */\n\n  Socket.prototype.onPacket = function (packet) {\n    this.of(packet.endpoint).onPacket(packet);\n  };\n\n  /**\n   * Handles an error.\n   *\n   * @api private\n   */\n\n  Socket.prototype.onError = function (err) {\n    if (err && err.advice) {\n      if (err.advice === 'reconnect' && (this.connected || this.connecting)) {\n        this.disconnect();\n        if (this.options.reconnect) {\n          this.reconnect();\n        }\n      }\n    }\n\n    this.publish('error', err && err.reason ? err.reason : err);\n  };\n\n  /**\n   * Called when the transport disconnects.\n   *\n   * @api private\n   */\n\n  Socket.prototype.onDisconnect = function (reason) {\n    var wasConnected = this.connected\n      , wasConnecting = this.connecting;\n\n    this.connected = false;\n    this.connecting = false;\n    this.open = false;\n\n    if (wasConnected || wasConnecting) {\n      this.transport.close();\n      this.transport.clearTimeouts();\n      if (wasConnected) {\n        this.publish('disconnect', reason);\n\n        if ('booted' != reason && this.options.reconnect && !this.reconnecting) {\n          this.reconnect();\n        }\n      }\n    }\n  };\n\n  /**\n   * Called upon reconnection.\n   *\n   * @api private\n   */\n\n  Socket.prototype.reconnect = function () {\n    this.reconnecting = true;\n    this.reconnectionAttempts = 0;\n    this.reconnectionDelay = this.options['reconnection delay'];\n\n    var self = this\n      , maxAttempts = this.options['max reconnection attempts']\n      , tryMultiple = this.options['try multiple transports']\n      , limit = this.options['reconnection limit'];\n\n    function reset () {\n      if (self.connected) {\n        for (var i in self.namespaces) {\n          if (self.namespaces.hasOwnProperty(i) && '' !== i) {\n              self.namespaces[i].packet({ type: 'connect' });\n          }\n        }\n        self.publish('reconnect', self.transport.name, self.reconnectionAttempts);\n      }\n\n      clearTimeout(self.reconnectionTimer);\n\n      self.removeListener('connect_failed', maybeReconnect);\n      self.removeListener('connect', maybeReconnect);\n\n      self.reconnecting = false;\n\n      delete self.reconnectionAttempts;\n      delete self.reconnectionDelay;\n      delete self.reconnectionTimer;\n      delete self.redoTransports;\n\n      self.options['try multiple transports'] = tryMultiple;\n    };\n\n    function maybeReconnect () {\n      if (!self.reconnecting) {\n        return;\n      }\n\n      if (self.connected) {\n        return reset();\n      };\n\n      if (self.connecting && self.reconnecting) {\n        return self.reconnectionTimer = setTimeout(maybeReconnect, 1000);\n      }\n\n      if (self.reconnectionAttempts++ >= maxAttempts) {\n        if (!self.redoTransports) {\n          self.on('connect_failed', maybeReconnect);\n          self.options['try multiple transports'] = true;\n          self.transports = self.origTransports;\n          self.transport = self.getTransport();\n          self.redoTransports = true;\n          self.connect();\n        } else {\n          self.publish('reconnect_failed');\n          reset();\n        }\n      } else {\n        if (self.reconnectionDelay < limit) {\n          self.reconnectionDelay *= 2; // exponential back off\n        }\n\n        self.connect();\n        self.publish('reconnecting', self.reconnectionDelay, self.reconnectionAttempts);\n        self.reconnectionTimer = setTimeout(maybeReconnect, self.reconnectionDelay);\n      }\n    };\n\n    this.options['try multiple transports'] = false;\n    this.reconnectionTimer = setTimeout(maybeReconnect, this.reconnectionDelay);\n\n    this.on('connect', maybeReconnect);\n  };\n\n})(\n    'undefined' != typeof io ? io : module.exports\n  , 'undefined' != typeof io ? io : module.parent.exports\n  , this\n);\n/**\n * socket.io\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n(function (exports, io) {\n\n  /**\n   * Expose constructor.\n   */\n\n  exports.SocketNamespace = SocketNamespace;\n\n  /**\n   * Socket namespace constructor.\n   *\n   * @constructor\n   * @api public\n   */\n\n  function SocketNamespace (socket, name) {\n    this.socket = socket;\n    this.name = name || '';\n    this.flags = {};\n    this.json = new Flag(this, 'json');\n    this.ackPackets = 0;\n    this.acks = {};\n  };\n\n  /**\n   * Apply EventEmitter mixin.\n   */\n\n  io.util.mixin(SocketNamespace, io.EventEmitter);\n\n  /**\n   * Copies emit since we override it\n   *\n   * @api private\n   */\n\n  SocketNamespace.prototype.$emit = io.EventEmitter.prototype.emit;\n\n  /**\n   * Creates a new namespace, by proxying the request to the socket. This\n   * allows us to use the synax as we do on the server.\n   *\n   * @api public\n   */\n\n  SocketNamespace.prototype.of = function () {\n    return this.socket.of.apply(this.socket, arguments);\n  };\n\n  /**\n   * Sends a packet.\n   *\n   * @api private\n   */\n\n  SocketNamespace.prototype.packet = function (packet) {\n    packet.endpoint = this.name;\n    this.socket.packet(packet);\n    this.flags = {};\n    return this;\n  };\n\n  /**\n   * Sends a message\n   *\n   * @api public\n   */\n\n  SocketNamespace.prototype.send = function (data, fn) {\n    var packet = {\n        type: this.flags.json ? 'json' : 'message'\n      , data: data\n    };\n\n    if ('function' == typeof fn) {\n      packet.id = ++this.ackPackets;\n      packet.ack = true;\n      this.acks[packet.id] = fn;\n    }\n\n    return this.packet(packet);\n  };\n\n  /**\n   * Emits an event\n   *\n   * @api public\n   */\n  \n  SocketNamespace.prototype.emit = function (name) {\n    var args = Array.prototype.slice.call(arguments, 1)\n      , lastArg = args[args.length - 1]\n      , packet = {\n            type: 'event'\n          , name: name\n        };\n\n    if ('function' == typeof lastArg) {\n      packet.id = ++this.ackPackets;\n      packet.ack = 'data';\n      this.acks[packet.id] = lastArg;\n      args = args.slice(0, args.length - 1);\n    }\n\n    packet.args = args;\n\n    return this.packet(packet);\n  };\n\n  /**\n   * Disconnects the namespace\n   *\n   * @api private\n   */\n\n  SocketNamespace.prototype.disconnect = function () {\n    if (this.name === '') {\n      this.socket.disconnect();\n    } else {\n      this.packet({ type: 'disconnect' });\n      this.$emit('disconnect');\n    }\n\n    return this;\n  };\n\n  /**\n   * Handles a packet\n   *\n   * @api private\n   */\n\n  SocketNamespace.prototype.onPacket = function (packet) {\n    var self = this;\n\n    function ack () {\n      self.packet({\n          type: 'ack'\n        , args: io.util.toArray(arguments)\n        , ackId: packet.id\n      });\n    };\n\n    switch (packet.type) {\n      case 'connect':\n        this.$emit('connect');\n        break;\n\n      case 'disconnect':\n        if (this.name === '') {\n          this.socket.onDisconnect(packet.reason || 'booted');\n        } else {\n          this.$emit('disconnect', packet.reason);\n        }\n        break;\n\n      case 'message':\n      case 'json':\n        var params = ['message', packet.data];\n\n        if (packet.ack == 'data') {\n          params.push(ack);\n        } else if (packet.ack) {\n          this.packet({ type: 'ack', ackId: packet.id });\n        }\n\n        this.$emit.apply(this, params);\n        break;\n\n      case 'event':\n        var params = [packet.name].concat(packet.args);\n\n        if (packet.ack == 'data')\n          params.push(ack);\n\n        this.$emit.apply(this, params);\n        break;\n\n      case 'ack':\n        if (this.acks[packet.ackId]) {\n          this.acks[packet.ackId].apply(this, packet.args);\n          delete this.acks[packet.ackId];\n        }\n        break;\n\n      case 'error':\n        if (packet.advice){\n          this.socket.onError(packet);\n        } else {\n          if (packet.reason == 'unauthorized') {\n            this.$emit('connect_failed', packet.reason);\n          } else {\n            this.$emit('error', packet.reason);\n          }\n        }\n        break;\n    }\n  };\n\n  /**\n   * Flag interface.\n   *\n   * @api private\n   */\n\n  function Flag (nsp, name) {\n    this.namespace = nsp;\n    this.name = name;\n  };\n\n  /**\n   * Send a message\n   *\n   * @api public\n   */\n\n  Flag.prototype.send = function () {\n    this.namespace.flags[this.name] = true;\n    this.namespace.send.apply(this.namespace, arguments);\n  };\n\n  /**\n   * Emit an event\n   *\n   * @api public\n   */\n\n  Flag.prototype.emit = function () {\n    this.namespace.flags[this.name] = true;\n    this.namespace.emit.apply(this.namespace, arguments);\n  };\n\n})(\n    'undefined' != typeof io ? io : module.exports\n  , 'undefined' != typeof io ? io : module.parent.exports\n);\n\n/**\n * socket.io\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n(function (exports, io, global) {\n\n  /**\n   * Expose constructor.\n   */\n\n  exports.websocket = WS;\n\n  /**\n   * The WebSocket transport uses the HTML5 WebSocket API to establish an\n   * persistent connection with the Socket.IO server. This transport will also\n   * be inherited by the FlashSocket fallback as it provides a API compatible\n   * polyfill for the WebSockets.\n   *\n   * @constructor\n   * @extends {io.Transport}\n   * @api public\n   */\n\n  function WS (socket) {\n    io.Transport.apply(this, arguments);\n  };\n\n  /**\n   * Inherits from Transport.\n   */\n\n  io.util.inherit(WS, io.Transport);\n\n  /**\n   * Transport name\n   *\n   * @api public\n   */\n\n  WS.prototype.name = 'websocket';\n\n  /**\n   * Initializes a new `WebSocket` connection with the Socket.IO server. We attach\n   * all the appropriate listeners to handle the responses from the server.\n   *\n   * @returns {Transport}\n   * @api public\n   */\n\n  WS.prototype.open = function () {\n    var query = io.util.query(this.socket.options.query)\n      , self = this\n      , Socket\n\n\n    if (!Socket) {\n      Socket = global.MozWebSocket || global.WebSocket;\n    }\n\n    this.websocket = new Socket(this.prepareUrl() + query);\n\n    this.websocket.onopen = function () {\n      self.onOpen();\n      self.socket.setBuffer(false);\n    };\n    this.websocket.onmessage = function (ev) {\n      self.onData(ev.data);\n    };\n    this.websocket.onclose = function () {\n      self.onClose();\n      self.socket.setBuffer(true);\n    };\n    this.websocket.onerror = function (e) {\n      self.onError(e);\n    };\n\n    return this;\n  };\n\n  /**\n   * Send a message to the Socket.IO server. The message will automatically be\n   * encoded in the correct message format.\n   *\n   * @returns {Transport}\n   * @api public\n   */\n\n  // Do to a bug in the current IDevices browser, we need to wrap the send in a \n  // setTimeout, when they resume from sleeping the browser will crash if \n  // we don't allow the browser time to detect the socket has been closed\n  if (io.util.ua.iDevice) {\n    WS.prototype.send = function (data) {\n      var self = this;\n      setTimeout(function() {\n         self.websocket.send(data);\n      },0);\n      return this;\n    };\n  } else {\n    WS.prototype.send = function (data) {\n      this.websocket.send(data);\n      return this;\n    };\n  }\n\n  /**\n   * Payload\n   *\n   * @api private\n   */\n\n  WS.prototype.payload = function (arr) {\n    for (var i = 0, l = arr.length; i < l; i++) {\n      this.packet(arr[i]);\n    }\n    return this;\n  };\n\n  /**\n   * Disconnect the established `WebSocket` connection.\n   *\n   * @returns {Transport}\n   * @api public\n   */\n\n  WS.prototype.close = function () {\n    this.websocket.close();\n    return this;\n  };\n\n  /**\n   * Handle the errors that `WebSocket` might be giving when we\n   * are attempting to connect or send messages.\n   *\n   * @param {Error} e The error.\n   * @api private\n   */\n\n  WS.prototype.onError = function (e) {\n    this.socket.onError(e);\n  };\n\n  /**\n   * Returns the appropriate scheme for the URI generation.\n   *\n   * @api private\n   */\n  WS.prototype.scheme = function () {\n    return this.socket.options.secure ? 'wss' : 'ws';\n  };\n\n  /**\n   * Checks if the browser has support for native `WebSockets` and that\n   * it's not the polyfill created for the FlashSocket transport.\n   *\n   * @return {Boolean}\n   * @api public\n   */\n\n  WS.check = function () {\n    return ('WebSocket' in global && !('__addTask' in WebSocket))\n          || 'MozWebSocket' in global;\n  };\n\n  /**\n   * Check if the `WebSocket` transport support cross domain communications.\n   *\n   * @returns {Boolean}\n   * @api public\n   */\n\n  WS.xdomainCheck = function () {\n    return true;\n  };\n\n  /**\n   * Add the transport to your public io.transports array.\n   *\n   * @api private\n   */\n\n  io.transports.push('websocket');\n\n})(\n    'undefined' != typeof io ? io.Transport : module.exports\n  , 'undefined' != typeof io ? io : module.parent.exports\n  , this\n);\n\n/**\n * socket.io\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n(function (exports, io) {\n\n  /**\n   * Expose constructor.\n   */\n\n  exports.flashsocket = Flashsocket;\n\n  /**\n   * The FlashSocket transport. This is a API wrapper for the HTML5 WebSocket\n   * specification. It uses a .swf file to communicate with the server. If you want\n   * to serve the .swf file from a other server than where the Socket.IO script is\n   * coming from you need to use the insecure version of the .swf. More information\n   * about this can be found on the github page.\n   *\n   * @constructor\n   * @extends {io.Transport.websocket}\n   * @api public\n   */\n\n  function Flashsocket () {\n    io.Transport.websocket.apply(this, arguments);\n  };\n\n  /**\n   * Inherits from Transport.\n   */\n\n  io.util.inherit(Flashsocket, io.Transport.websocket);\n\n  /**\n   * Transport name\n   *\n   * @api public\n   */\n\n  Flashsocket.prototype.name = 'flashsocket';\n\n  /**\n   * Disconnect the established `FlashSocket` connection. This is done by adding a \n   * new task to the FlashSocket. The rest will be handled off by the `WebSocket` \n   * transport.\n   *\n   * @returns {Transport}\n   * @api public\n   */\n\n  Flashsocket.prototype.open = function () {\n    var self = this\n      , args = arguments;\n\n    WebSocket.__addTask(function () {\n      io.Transport.websocket.prototype.open.apply(self, args);\n    });\n    return this;\n  };\n  \n  /**\n   * Sends a message to the Socket.IO server. This is done by adding a new\n   * task to the FlashSocket. The rest will be handled off by the `WebSocket` \n   * transport.\n   *\n   * @returns {Transport}\n   * @api public\n   */\n\n  Flashsocket.prototype.send = function () {\n    var self = this, args = arguments;\n    WebSocket.__addTask(function () {\n      io.Transport.websocket.prototype.send.apply(self, args);\n    });\n    return this;\n  };\n\n  /**\n   * Disconnects the established `FlashSocket` connection.\n   *\n   * @returns {Transport}\n   * @api public\n   */\n\n  Flashsocket.prototype.close = function () {\n    WebSocket.__tasks.length = 0;\n    io.Transport.websocket.prototype.close.call(this);\n    return this;\n  };\n\n  /**\n   * The WebSocket fall back needs to append the flash container to the body\n   * element, so we need to make sure we have access to it. Or defer the call\n   * until we are sure there is a body element.\n   *\n   * @param {Socket} socket The socket instance that needs a transport\n   * @param {Function} fn The callback\n   * @api private\n   */\n\n  Flashsocket.prototype.ready = function (socket, fn) {\n    function init () {\n      var options = socket.options\n        , port = options['flash policy port']\n        , path = [\n              'http' + (options.secure ? 's' : '') + ':/'\n            , options.host + ':' + options.port\n            , options.resource\n            , 'static/flashsocket'\n            , 'WebSocketMain' + (socket.isXDomain() ? 'Insecure' : '') + '.swf'\n          ];\n\n      // Only start downloading the swf file when the checked that this browser\n      // actually supports it\n      if (!Flashsocket.loaded) {\n        if (typeof WEB_SOCKET_SWF_LOCATION === 'undefined') {\n          // Set the correct file based on the XDomain settings\n          WEB_SOCKET_SWF_LOCATION = path.join('/');\n        }\n\n        if (port !== 843) {\n          WebSocket.loadFlashPolicyFile('xmlsocket://' + options.host + ':' + port);\n        }\n\n        WebSocket.__initialize();\n        Flashsocket.loaded = true;\n      }\n\n      fn.call(self);\n    }\n\n    var self = this;\n    if (document.body) return init();\n\n    io.util.load(init);\n  };\n\n  /**\n   * Check if the FlashSocket transport is supported as it requires that the Adobe\n   * Flash Player plug-in version `10.0.0` or greater is installed. And also check if\n   * the polyfill is correctly loaded.\n   *\n   * @returns {Boolean}\n   * @api public\n   */\n\n  Flashsocket.check = function () {\n    if (\n        typeof WebSocket == 'undefined'\n      || !('__initialize' in WebSocket) || !swfobject\n    ) return false;\n\n    return swfobject.getFlashPlayerVersion().major >= 10;\n  };\n\n  /**\n   * Check if the FlashSocket transport can be used as cross domain / cross origin \n   * transport. Because we can't see which type (secure or insecure) of .swf is used\n   * we will just return true.\n   *\n   * @returns {Boolean}\n   * @api public\n   */\n\n  Flashsocket.xdomainCheck = function () {\n    return true;\n  };\n\n  /**\n   * Disable AUTO_INITIALIZATION\n   */\n\n  if (typeof window != 'undefined') {\n    WEB_SOCKET_DISABLE_AUTO_INITIALIZATION = true;\n  }\n\n  /**\n   * Add the transport to your public io.transports array.\n   *\n   * @api private\n   */\n\n  io.transports.push('flashsocket');\n})(\n    'undefined' != typeof io ? io.Transport : module.exports\n  , 'undefined' != typeof io ? io : module.parent.exports\n);\n/*\tSWFObject v2.2 <http://code.google.com/p/swfobject/> \n\tis released under the MIT License <http://www.opensource.org/licenses/mit-license.php> \n*/\nif ('undefined' != typeof window) {\nvar swfobject=function(){var D=\"undefined\",r=\"object\",S=\"Shockwave Flash\",W=\"ShockwaveFlash.ShockwaveFlash\",q=\"application/x-shockwave-flash\",R=\"SWFObjectExprInst\",x=\"onreadystatechange\",O=window,j=document,t=navigator,T=false,U=[h],o=[],N=[],I=[],l,Q,E,B,J=false,a=false,n,G,m=true,M=function(){var aa=typeof j.getElementById!=D&&typeof j.getElementsByTagName!=D&&typeof j.createElement!=D,ah=t.userAgent.toLowerCase(),Y=t.platform.toLowerCase(),ae=Y?/win/.test(Y):/win/.test(ah),ac=Y?/mac/.test(Y):/mac/.test(ah),af=/webkit/.test(ah)?parseFloat(ah.replace(/^.*webkit\\/(\\d+(\\.\\d+)?).*$/,\"$1\")):false,X=!+\"\\v1\",ag=[0,0,0],ab=null;if(typeof t.plugins!=D&&typeof t.plugins[S]==r){ab=t.plugins[S].description;if(ab&&!(typeof t.mimeTypes!=D&&t.mimeTypes[q]&&!t.mimeTypes[q].enabledPlugin)){T=true;X=false;ab=ab.replace(/^.*\\s+(\\S+\\s+\\S+$)/,\"$1\");ag[0]=parseInt(ab.replace(/^(.*)\\..*$/,\"$1\"),10);ag[1]=parseInt(ab.replace(/^.*\\.(.*)\\s.*$/,\"$1\"),10);ag[2]=/[a-zA-Z]/.test(ab)?parseInt(ab.replace(/^.*[a-zA-Z]+(.*)$/,\"$1\"),10):0}}else{if(typeof O[(['Active'].concat('Object').join('X'))]!=D){try{var ad=new window[(['Active'].concat('Object').join('X'))](W);if(ad){ab=ad.GetVariable(\"$version\");if(ab){X=true;ab=ab.split(\" \")[1].split(\",\");ag=[parseInt(ab[0],10),parseInt(ab[1],10),parseInt(ab[2],10)]}}}catch(Z){}}}return{w3:aa,pv:ag,wk:af,ie:X,win:ae,mac:ac}}(),k=function(){if(!M.w3){return}if((typeof j.readyState!=D&&j.readyState==\"complete\")||(typeof j.readyState==D&&(j.getElementsByTagName(\"body\")[0]||j.body))){f()}if(!J){if(typeof j.addEventListener!=D){j.addEventListener(\"DOMContentLoaded\",f,false)}if(M.ie&&M.win){j.attachEvent(x,function(){if(j.readyState==\"complete\"){j.detachEvent(x,arguments.callee);f()}});if(O==top){(function(){if(J){return}try{j.documentElement.doScroll(\"left\")}catch(X){setTimeout(arguments.callee,0);return}f()})()}}if(M.wk){(function(){if(J){return}if(!/loaded|complete/.test(j.readyState)){setTimeout(arguments.callee,0);return}f()})()}s(f)}}();function f(){if(J){return}try{var Z=j.getElementsByTagName(\"body\")[0].appendChild(C(\"span\"));Z.parentNode.removeChild(Z)}catch(aa){return}J=true;var X=U.length;for(var Y=0;Y<X;Y++){U[Y]()}}function K(X){if(J){X()}else{U[U.length]=X}}function s(Y){if(typeof O.addEventListener!=D){O.addEventListener(\"load\",Y,false)}else{if(typeof j.addEventListener!=D){j.addEventListener(\"load\",Y,false)}else{if(typeof O.attachEvent!=D){i(O,\"onload\",Y)}else{if(typeof O.onload==\"function\"){var X=O.onload;O.onload=function(){X();Y()}}else{O.onload=Y}}}}}function h(){if(T){V()}else{H()}}function V(){var X=j.getElementsByTagName(\"body\")[0];var aa=C(r);aa.setAttribute(\"type\",q);var Z=X.appendChild(aa);if(Z){var Y=0;(function(){if(typeof Z.GetVariable!=D){var ab=Z.GetVariable(\"$version\");if(ab){ab=ab.split(\" \")[1].split(\",\");M.pv=[parseInt(ab[0],10),parseInt(ab[1],10),parseInt(ab[2],10)]}}else{if(Y<10){Y++;setTimeout(arguments.callee,10);return}}X.removeChild(aa);Z=null;H()})()}else{H()}}function H(){var ag=o.length;if(ag>0){for(var af=0;af<ag;af++){var Y=o[af].id;var ab=o[af].callbackFn;var aa={success:false,id:Y};if(M.pv[0]>0){var ae=c(Y);if(ae){if(F(o[af].swfVersion)&&!(M.wk&&M.wk<312)){w(Y,true);if(ab){aa.success=true;aa.ref=z(Y);ab(aa)}}else{if(o[af].expressInstall&&A()){var ai={};ai.data=o[af].expressInstall;ai.width=ae.getAttribute(\"width\")||\"0\";ai.height=ae.getAttribute(\"height\")||\"0\";if(ae.getAttribute(\"class\")){ai.styleclass=ae.getAttribute(\"class\")}if(ae.getAttribute(\"align\")){ai.align=ae.getAttribute(\"align\")}var ah={};var X=ae.getElementsByTagName(\"param\");var ac=X.length;for(var ad=0;ad<ac;ad++){if(X[ad].getAttribute(\"name\").toLowerCase()!=\"movie\"){ah[X[ad].getAttribute(\"name\")]=X[ad].getAttribute(\"value\")}}P(ai,ah,Y,ab)}else{p(ae);if(ab){ab(aa)}}}}}else{w(Y,true);if(ab){var Z=z(Y);if(Z&&typeof Z.SetVariable!=D){aa.success=true;aa.ref=Z}ab(aa)}}}}}function z(aa){var X=null;var Y=c(aa);if(Y&&Y.nodeName==\"OBJECT\"){if(typeof Y.SetVariable!=D){X=Y}else{var Z=Y.getElementsByTagName(r)[0];if(Z){X=Z}}}return X}function A(){return !a&&F(\"6.0.65\")&&(M.win||M.mac)&&!(M.wk&&M.wk<312)}function P(aa,ab,X,Z){a=true;E=Z||null;B={success:false,id:X};var ae=c(X);if(ae){if(ae.nodeName==\"OBJECT\"){l=g(ae);Q=null}else{l=ae;Q=X}aa.id=R;if(typeof aa.width==D||(!/%$/.test(aa.width)&&parseInt(aa.width,10)<310)){aa.width=\"310\"}if(typeof aa.height==D||(!/%$/.test(aa.height)&&parseInt(aa.height,10)<137)){aa.height=\"137\"}j.title=j.title.slice(0,47)+\" - Flash Player Installation\";var ad=M.ie&&M.win?(['Active'].concat('').join('X')):\"PlugIn\",ac=\"MMredirectURL=\"+O.location.toString().replace(/&/g,\"%26\")+\"&MMplayerType=\"+ad+\"&MMdoctitle=\"+j.title;if(typeof ab.flashvars!=D){ab.flashvars+=\"&\"+ac}else{ab.flashvars=ac}if(M.ie&&M.win&&ae.readyState!=4){var Y=C(\"div\");X+=\"SWFObjectNew\";Y.setAttribute(\"id\",X);ae.parentNode.insertBefore(Y,ae);ae.style.display=\"none\";(function(){if(ae.readyState==4){ae.parentNode.removeChild(ae)}else{setTimeout(arguments.callee,10)}})()}u(aa,ab,X)}}function p(Y){if(M.ie&&M.win&&Y.readyState!=4){var X=C(\"div\");Y.parentNode.insertBefore(X,Y);X.parentNode.replaceChild(g(Y),X);Y.style.display=\"none\";(function(){if(Y.readyState==4){Y.parentNode.removeChild(Y)}else{setTimeout(arguments.callee,10)}})()}else{Y.parentNode.replaceChild(g(Y),Y)}}function g(ab){var aa=C(\"div\");if(M.win&&M.ie){aa.innerHTML=ab.innerHTML}else{var Y=ab.getElementsByTagName(r)[0];if(Y){var ad=Y.childNodes;if(ad){var X=ad.length;for(var Z=0;Z<X;Z++){if(!(ad[Z].nodeType==1&&ad[Z].nodeName==\"PARAM\")&&!(ad[Z].nodeType==8)){aa.appendChild(ad[Z].cloneNode(true))}}}}}return aa}function u(ai,ag,Y){var X,aa=c(Y);if(M.wk&&M.wk<312){return X}if(aa){if(typeof ai.id==D){ai.id=Y}if(M.ie&&M.win){var ah=\"\";for(var ae in ai){if(ai[ae]!=Object.prototype[ae]){if(ae.toLowerCase()==\"data\"){ag.movie=ai[ae]}else{if(ae.toLowerCase()==\"styleclass\"){ah+=' class=\"'+ai[ae]+'\"'}else{if(ae.toLowerCase()!=\"classid\"){ah+=\" \"+ae+'=\"'+ai[ae]+'\"'}}}}}var af=\"\";for(var ad in ag){if(ag[ad]!=Object.prototype[ad]){af+='<param name=\"'+ad+'\" value=\"'+ag[ad]+'\" />'}}aa.outerHTML='<object classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\"'+ah+\">\"+af+\"</object>\";N[N.length]=ai.id;X=c(ai.id)}else{var Z=C(r);Z.setAttribute(\"type\",q);for(var ac in ai){if(ai[ac]!=Object.prototype[ac]){if(ac.toLowerCase()==\"styleclass\"){Z.setAttribute(\"class\",ai[ac])}else{if(ac.toLowerCase()!=\"classid\"){Z.setAttribute(ac,ai[ac])}}}}for(var ab in ag){if(ag[ab]!=Object.prototype[ab]&&ab.toLowerCase()!=\"movie\"){e(Z,ab,ag[ab])}}aa.parentNode.replaceChild(Z,aa);X=Z}}return X}function e(Z,X,Y){var aa=C(\"param\");aa.setAttribute(\"name\",X);aa.setAttribute(\"value\",Y);Z.appendChild(aa)}function y(Y){var X=c(Y);if(X&&X.nodeName==\"OBJECT\"){if(M.ie&&M.win){X.style.display=\"none\";(function(){if(X.readyState==4){b(Y)}else{setTimeout(arguments.callee,10)}})()}else{X.parentNode.removeChild(X)}}}function b(Z){var Y=c(Z);if(Y){for(var X in Y){if(typeof Y[X]==\"function\"){Y[X]=null}}Y.parentNode.removeChild(Y)}}function c(Z){var X=null;try{X=j.getElementById(Z)}catch(Y){}return X}function C(X){return j.createElement(X)}function i(Z,X,Y){Z.attachEvent(X,Y);I[I.length]=[Z,X,Y]}function F(Z){var Y=M.pv,X=Z.split(\".\");X[0]=parseInt(X[0],10);X[1]=parseInt(X[1],10)||0;X[2]=parseInt(X[2],10)||0;return(Y[0]>X[0]||(Y[0]==X[0]&&Y[1]>X[1])||(Y[0]==X[0]&&Y[1]==X[1]&&Y[2]>=X[2]))?true:false}function v(ac,Y,ad,ab){if(M.ie&&M.mac){return}var aa=j.getElementsByTagName(\"head\")[0];if(!aa){return}var X=(ad&&typeof ad==\"string\")?ad:\"screen\";if(ab){n=null;G=null}if(!n||G!=X){var Z=C(\"style\");Z.setAttribute(\"type\",\"text/css\");Z.setAttribute(\"media\",X);n=aa.appendChild(Z);if(M.ie&&M.win&&typeof j.styleSheets!=D&&j.styleSheets.length>0){n=j.styleSheets[j.styleSheets.length-1]}G=X}if(M.ie&&M.win){if(n&&typeof n.addRule==r){n.addRule(ac,Y)}}else{if(n&&typeof j.createTextNode!=D){n.appendChild(j.createTextNode(ac+\" {\"+Y+\"}\"))}}}function w(Z,X){if(!m){return}var Y=X?\"visible\":\"hidden\";if(J&&c(Z)){c(Z).style.visibility=Y}else{v(\"#\"+Z,\"visibility:\"+Y)}}function L(Y){var Z=/[\\\\\\\"<>\\.;]/;var X=Z.exec(Y)!=null;return X&&typeof encodeURIComponent!=D?encodeURIComponent(Y):Y}var d=function(){if(M.ie&&M.win){window.attachEvent(\"onunload\",function(){var ac=I.length;for(var ab=0;ab<ac;ab++){I[ab][0].detachEvent(I[ab][1],I[ab][2])}var Z=N.length;for(var aa=0;aa<Z;aa++){y(N[aa])}for(var Y in M){M[Y]=null}M=null;for(var X in swfobject){swfobject[X]=null}swfobject=null})}}();return{registerObject:function(ab,X,aa,Z){if(M.w3&&ab&&X){var Y={};Y.id=ab;Y.swfVersion=X;Y.expressInstall=aa;Y.callbackFn=Z;o[o.length]=Y;w(ab,false)}else{if(Z){Z({success:false,id:ab})}}},getObjectById:function(X){if(M.w3){return z(X)}},embedSWF:function(ab,ah,ae,ag,Y,aa,Z,ad,af,ac){var X={success:false,id:ah};if(M.w3&&!(M.wk&&M.wk<312)&&ab&&ah&&ae&&ag&&Y){w(ah,false);K(function(){ae+=\"\";ag+=\"\";var aj={};if(af&&typeof af===r){for(var al in af){aj[al]=af[al]}}aj.data=ab;aj.width=ae;aj.height=ag;var am={};if(ad&&typeof ad===r){for(var ak in ad){am[ak]=ad[ak]}}if(Z&&typeof Z===r){for(var ai in Z){if(typeof am.flashvars!=D){am.flashvars+=\"&\"+ai+\"=\"+Z[ai]}else{am.flashvars=ai+\"=\"+Z[ai]}}}if(F(Y)){var an=u(aj,am,ah);if(aj.id==ah){w(ah,true)}X.success=true;X.ref=an}else{if(aa&&A()){aj.data=aa;P(aj,am,ah,ac);return}else{w(ah,true)}}if(ac){ac(X)}})}else{if(ac){ac(X)}}},switchOffAutoHideShow:function(){m=false},ua:M,getFlashPlayerVersion:function(){return{major:M.pv[0],minor:M.pv[1],release:M.pv[2]}},hasFlashPlayerVersion:F,createSWF:function(Z,Y,X){if(M.w3){return u(Z,Y,X)}else{return undefined}},showExpressInstall:function(Z,aa,X,Y){if(M.w3&&A()){P(Z,aa,X,Y)}},removeSWF:function(X){if(M.w3){y(X)}},createCSS:function(aa,Z,Y,X){if(M.w3){v(aa,Z,Y,X)}},addDomLoadEvent:K,addLoadEvent:s,getQueryParamValue:function(aa){var Z=j.location.search||j.location.hash;if(Z){if(/\\?/.test(Z)){Z=Z.split(\"?\")[1]}if(aa==null){return L(Z)}var Y=Z.split(\"&\");for(var X=0;X<Y.length;X++){if(Y[X].substring(0,Y[X].indexOf(\"=\"))==aa){return L(Y[X].substring((Y[X].indexOf(\"=\")+1)))}}}return\"\"},expressInstallCallback:function(){if(a){var X=c(R);if(X&&l){X.parentNode.replaceChild(l,X);if(Q){w(Q,true);if(M.ie&&M.win){l.style.display=\"block\"}}if(E){E(B)}}a=false}}}}();\n}\n// Copyright: Hiroshi Ichikawa <http://gimite.net/en/>\n// License: New BSD License\n// Reference: http://dev.w3.org/html5/websockets/\n// Reference: http://tools.ietf.org/html/draft-hixie-thewebsocketprotocol\n\n(function() {\n  \n  if ('undefined' == typeof window || window.WebSocket) return;\n\n  var console = window.console;\n  if (!console || !console.log || !console.error) {\n    console = {log: function(){ }, error: function(){ }};\n  }\n  \n  if (!swfobject.hasFlashPlayerVersion(\"10.0.0\")) {\n    console.error(\"Flash Player >= 10.0.0 is required.\");\n    return;\n  }\n  if (location.protocol == \"file:\") {\n    console.error(\n      \"WARNING: web-socket-js doesn't work in file:///... URL \" +\n      \"unless you set Flash Security Settings properly. \" +\n      \"Open the page via Web server i.e. http://...\");\n  }\n\n  /**\n   * This class represents a faux web socket.\n   * @param {string} url\n   * @param {array or string} protocols\n   * @param {string} proxyHost\n   * @param {int} proxyPort\n   * @param {string} headers\n   */\n  WebSocket = function(url, protocols, proxyHost, proxyPort, headers) {\n    var self = this;\n    self.__id = WebSocket.__nextId++;\n    WebSocket.__instances[self.__id] = self;\n    self.readyState = WebSocket.CONNECTING;\n    self.bufferedAmount = 0;\n    self.__events = {};\n    if (!protocols) {\n      protocols = [];\n    } else if (typeof protocols == \"string\") {\n      protocols = [protocols];\n    }\n    // Uses setTimeout() to make sure __createFlash() runs after the caller sets ws.onopen etc.\n    // Otherwise, when onopen fires immediately, onopen is called before it is set.\n    setTimeout(function() {\n      WebSocket.__addTask(function() {\n        WebSocket.__flash.create(\n            self.__id, url, protocols, proxyHost || null, proxyPort || 0, headers || null);\n      });\n    }, 0);\n  };\n\n  /**\n   * Send data to the web socket.\n   * @param {string} data  The data to send to the socket.\n   * @return {boolean}  True for success, false for failure.\n   */\n  WebSocket.prototype.send = function(data) {\n    if (this.readyState == WebSocket.CONNECTING) {\n      throw \"INVALID_STATE_ERR: Web Socket connection has not been established\";\n    }\n    // We use encodeURIComponent() here, because FABridge doesn't work if\n    // the argument includes some characters. We don't use escape() here\n    // because of this:\n    // https://developer.mozilla.org/en/Core_JavaScript_1.5_Guide/Functions#escape_and_unescape_Functions\n    // But it looks decodeURIComponent(encodeURIComponent(s)) doesn't\n    // preserve all Unicode characters either e.g. \"\\uffff\" in Firefox.\n    // Note by wtritch: Hopefully this will not be necessary using ExternalInterface.  Will require\n    // additional testing.\n    var result = WebSocket.__flash.send(this.__id, encodeURIComponent(data));\n    if (result < 0) { // success\n      return true;\n    } else {\n      this.bufferedAmount += result;\n      return false;\n    }\n  };\n\n  /**\n   * Close this web socket gracefully.\n   */\n  WebSocket.prototype.close = function() {\n    if (this.readyState == WebSocket.CLOSED || this.readyState == WebSocket.CLOSING) {\n      return;\n    }\n    this.readyState = WebSocket.CLOSING;\n    WebSocket.__flash.close(this.__id);\n  };\n\n  /**\n   * Implementation of {@link <a href=\"http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-registration\">DOM 2 EventTarget Interface</a>}\n   *\n   * @param {string} type\n   * @param {function} listener\n   * @param {boolean} useCapture\n   * @return void\n   */\n  WebSocket.prototype.addEventListener = function(type, listener, useCapture) {\n    if (!(type in this.__events)) {\n      this.__events[type] = [];\n    }\n    this.__events[type].push(listener);\n  };\n\n  /**\n   * Implementation of {@link <a href=\"http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-registration\">DOM 2 EventTarget Interface</a>}\n   *\n   * @param {string} type\n   * @param {function} listener\n   * @param {boolean} useCapture\n   * @return void\n   */\n  WebSocket.prototype.removeEventListener = function(type, listener, useCapture) {\n    if (!(type in this.__events)) return;\n    var events = this.__events[type];\n    for (var i = events.length - 1; i >= 0; --i) {\n      if (events[i] === listener) {\n        events.splice(i, 1);\n        break;\n      }\n    }\n  };\n\n  /**\n   * Implementation of {@link <a href=\"http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-registration\">DOM 2 EventTarget Interface</a>}\n   *\n   * @param {Event} event\n   * @return void\n   */\n  WebSocket.prototype.dispatchEvent = function(event) {\n    var events = this.__events[event.type] || [];\n    for (var i = 0; i < events.length; ++i) {\n      events[i](event);\n    }\n    var handler = this[\"on\" + event.type];\n    if (handler) handler(event);\n  };\n\n  /**\n   * Handles an event from Flash.\n   * @param {Object} flashEvent\n   */\n  WebSocket.prototype.__handleEvent = function(flashEvent) {\n    if (\"readyState\" in flashEvent) {\n      this.readyState = flashEvent.readyState;\n    }\n    if (\"protocol\" in flashEvent) {\n      this.protocol = flashEvent.protocol;\n    }\n    \n    var jsEvent;\n    if (flashEvent.type == \"open\" || flashEvent.type == \"error\") {\n      jsEvent = this.__createSimpleEvent(flashEvent.type);\n    } else if (flashEvent.type == \"close\") {\n      // TODO implement jsEvent.wasClean\n      jsEvent = this.__createSimpleEvent(\"close\");\n    } else if (flashEvent.type == \"message\") {\n      var data = decodeURIComponent(flashEvent.message);\n      jsEvent = this.__createMessageEvent(\"message\", data);\n    } else {\n      throw \"unknown event type: \" + flashEvent.type;\n    }\n    \n    this.dispatchEvent(jsEvent);\n  };\n  \n  WebSocket.prototype.__createSimpleEvent = function(type) {\n    if (document.createEvent && window.Event) {\n      var event = document.createEvent(\"Event\");\n      event.initEvent(type, false, false);\n      return event;\n    } else {\n      return {type: type, bubbles: false, cancelable: false};\n    }\n  };\n  \n  WebSocket.prototype.__createMessageEvent = function(type, data) {\n    if (document.createEvent && window.MessageEvent && !window.opera) {\n      var event = document.createEvent(\"MessageEvent\");\n      event.initMessageEvent(\"message\", false, false, data, null, null, window, null);\n      return event;\n    } else {\n      // IE and Opera, the latter one truncates the data parameter after any 0x00 bytes.\n      return {type: type, data: data, bubbles: false, cancelable: false};\n    }\n  };\n  \n  /**\n   * Define the WebSocket readyState enumeration.\n   */\n  WebSocket.CONNECTING = 0;\n  WebSocket.OPEN = 1;\n  WebSocket.CLOSING = 2;\n  WebSocket.CLOSED = 3;\n\n  WebSocket.__flash = null;\n  WebSocket.__instances = {};\n  WebSocket.__tasks = [];\n  WebSocket.__nextId = 0;\n  \n  /**\n   * Load a new flash security policy file.\n   * @param {string} url\n   */\n  WebSocket.loadFlashPolicyFile = function(url){\n    WebSocket.__addTask(function() {\n      WebSocket.__flash.loadManualPolicyFile(url);\n    });\n  };\n\n  /**\n   * Loads WebSocketMain.swf and creates WebSocketMain object in Flash.\n   */\n  WebSocket.__initialize = function() {\n    if (WebSocket.__flash) return;\n    \n    if (WebSocket.__swfLocation) {\n      // For backword compatibility.\n      window.WEB_SOCKET_SWF_LOCATION = WebSocket.__swfLocation;\n    }\n    if (!window.WEB_SOCKET_SWF_LOCATION) {\n      console.error(\"[WebSocket] set WEB_SOCKET_SWF_LOCATION to location of WebSocketMain.swf\");\n      return;\n    }\n    var container = document.createElement(\"div\");\n    container.id = \"webSocketContainer\";\n    // Hides Flash box. We cannot use display: none or visibility: hidden because it prevents\n    // Flash from loading at least in IE. So we move it out of the screen at (-100, -100).\n    // But this even doesn't work with Flash Lite (e.g. in Droid Incredible). So with Flash\n    // Lite, we put it at (0, 0). This shows 1x1 box visible at left-top corner but this is\n    // the best we can do as far as we know now.\n    container.style.position = \"absolute\";\n    if (WebSocket.__isFlashLite()) {\n      container.style.left = \"0px\";\n      container.style.top = \"0px\";\n    } else {\n      container.style.left = \"-100px\";\n      container.style.top = \"-100px\";\n    }\n    var holder = document.createElement(\"div\");\n    holder.id = \"webSocketFlash\";\n    container.appendChild(holder);\n    document.body.appendChild(container);\n    // See this article for hasPriority:\n    // http://help.adobe.com/en_US/as3/mobile/WS4bebcd66a74275c36cfb8137124318eebc6-7ffd.html\n    swfobject.embedSWF(\n      WEB_SOCKET_SWF_LOCATION,\n      \"webSocketFlash\",\n      \"1\" /* width */,\n      \"1\" /* height */,\n      \"10.0.0\" /* SWF version */,\n      null,\n      null,\n      {hasPriority: true, swliveconnect : true, allowScriptAccess: \"always\"},\n      null,\n      function(e) {\n        if (!e.success) {\n          console.error(\"[WebSocket] swfobject.embedSWF failed\");\n        }\n      });\n  };\n  \n  /**\n   * Called by Flash to notify JS that it's fully loaded and ready\n   * for communication.\n   */\n  WebSocket.__onFlashInitialized = function() {\n    // We need to set a timeout here to avoid round-trip calls\n    // to flash during the initialization process.\n    setTimeout(function() {\n      WebSocket.__flash = document.getElementById(\"webSocketFlash\");\n      WebSocket.__flash.setCallerUrl(location.href);\n      WebSocket.__flash.setDebug(!!window.WEB_SOCKET_DEBUG);\n      for (var i = 0; i < WebSocket.__tasks.length; ++i) {\n        WebSocket.__tasks[i]();\n      }\n      WebSocket.__tasks = [];\n    }, 0);\n  };\n  \n  /**\n   * Called by Flash to notify WebSockets events are fired.\n   */\n  WebSocket.__onFlashEvent = function() {\n    setTimeout(function() {\n      try {\n        // Gets events using receiveEvents() instead of getting it from event object\n        // of Flash event. This is to make sure to keep message order.\n        // It seems sometimes Flash events don't arrive in the same order as they are sent.\n        var events = WebSocket.__flash.receiveEvents();\n        for (var i = 0; i < events.length; ++i) {\n          WebSocket.__instances[events[i].webSocketId].__handleEvent(events[i]);\n        }\n      } catch (e) {\n        console.error(e);\n      }\n    }, 0);\n    return true;\n  };\n  \n  // Called by Flash.\n  WebSocket.__log = function(message) {\n    console.log(decodeURIComponent(message));\n  };\n  \n  // Called by Flash.\n  WebSocket.__error = function(message) {\n    console.error(decodeURIComponent(message));\n  };\n  \n  WebSocket.__addTask = function(task) {\n    if (WebSocket.__flash) {\n      task();\n    } else {\n      WebSocket.__tasks.push(task);\n    }\n  };\n  \n  /**\n   * Test if the browser is running flash lite.\n   * @return {boolean} True if flash lite is running, false otherwise.\n   */\n  WebSocket.__isFlashLite = function() {\n    if (!window.navigator || !window.navigator.mimeTypes) {\n      return false;\n    }\n    var mimeType = window.navigator.mimeTypes[\"application/x-shockwave-flash\"];\n    if (!mimeType || !mimeType.enabledPlugin || !mimeType.enabledPlugin.filename) {\n      return false;\n    }\n    return mimeType.enabledPlugin.filename.match(/flashlite/i) ? true : false;\n  };\n  \n  if (!window.WEB_SOCKET_DISABLE_AUTO_INITIALIZATION) {\n    if (window.addEventListener) {\n      window.addEventListener(\"load\", function(){\n        WebSocket.__initialize();\n      }, false);\n    } else {\n      window.attachEvent(\"onload\", function(){\n        WebSocket.__initialize();\n      });\n    }\n  }\n  \n})();\n\n/**\n * socket.io\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n(function (exports, io, global) {\n\n  /**\n   * Expose constructor.\n   *\n   * @api public\n   */\n\n  exports.XHR = XHR;\n\n  /**\n   * XHR constructor\n   *\n   * @costructor\n   * @api public\n   */\n\n  function XHR (socket) {\n    if (!socket) return;\n\n    io.Transport.apply(this, arguments);\n    this.sendBuffer = [];\n  };\n\n  /**\n   * Inherits from Transport.\n   */\n\n  io.util.inherit(XHR, io.Transport);\n\n  /**\n   * Establish a connection\n   *\n   * @returns {Transport}\n   * @api public\n   */\n\n  XHR.prototype.open = function () {\n    this.socket.setBuffer(false);\n    this.onOpen();\n    this.get();\n\n    // we need to make sure the request succeeds since we have no indication\n    // whether the request opened or not until it succeeded.\n    this.setCloseTimeout();\n\n    return this;\n  };\n\n  /**\n   * Check if we need to send data to the Socket.IO server, if we have data in our\n   * buffer we encode it and forward it to the `post` method.\n   *\n   * @api private\n   */\n\n  XHR.prototype.payload = function (payload) {\n    var msgs = [];\n\n    for (var i = 0, l = payload.length; i < l; i++) {\n      msgs.push(io.parser.encodePacket(payload[i]));\n    }\n\n    this.send(io.parser.encodePayload(msgs));\n  };\n\n  /**\n   * Send data to the Socket.IO server.\n   *\n   * @param data The message\n   * @returns {Transport}\n   * @api public\n   */\n\n  XHR.prototype.send = function (data) {\n    this.post(data);\n    return this;\n  };\n\n  /**\n   * Posts a encoded message to the Socket.IO server.\n   *\n   * @param {String} data A encoded message.\n   * @api private\n   */\n\n  function empty () { };\n\n  XHR.prototype.post = function (data) {\n    var self = this;\n    this.socket.setBuffer(true);\n\n    function stateChange () {\n      if (this.readyState == 4) {\n        this.onreadystatechange = empty;\n        self.posting = false;\n\n        if (this.status == 200){\n          self.socket.setBuffer(false);\n        } else {\n          self.onClose();\n        }\n      }\n    }\n\n    function onload () {\n      this.onload = empty;\n      self.socket.setBuffer(false);\n    };\n\n    this.sendXHR = this.request('POST');\n\n    if (global.XDomainRequest && this.sendXHR instanceof XDomainRequest) {\n      this.sendXHR.onload = this.sendXHR.onerror = onload;\n    } else {\n      this.sendXHR.onreadystatechange = stateChange;\n    }\n\n    this.sendXHR.send(data);\n  };\n\n  /**\n   * Disconnects the established `XHR` connection.\n   *\n   * @returns {Transport}\n   * @api public\n   */\n\n  XHR.prototype.close = function () {\n    this.onClose();\n    return this;\n  };\n\n  /**\n   * Generates a configured XHR request\n   *\n   * @param {String} url The url that needs to be requested.\n   * @param {String} method The method the request should use.\n   * @returns {XMLHttpRequest}\n   * @api private\n   */\n\n  XHR.prototype.request = function (method) {\n    var req = io.util.request(this.socket.isXDomain())\n      , query = io.util.query(this.socket.options.query, 't=' + +new Date);\n\n    req.open(method || 'GET', this.prepareUrl() + query, true);\n\n    if (method == 'POST') {\n      try {\n        if (req.setRequestHeader) {\n          req.setRequestHeader('Content-type', 'text/plain;charset=UTF-8');\n        } else {\n          // XDomainRequest\n          req.contentType = 'text/plain';\n        }\n      } catch (e) {}\n    }\n\n    return req;\n  };\n\n  /**\n   * Returns the scheme to use for the transport URLs.\n   *\n   * @api private\n   */\n\n  XHR.prototype.scheme = function () {\n    return this.socket.options.secure ? 'https' : 'http';\n  };\n\n  /**\n   * Check if the XHR transports are supported\n   *\n   * @param {Boolean} xdomain Check if we support cross domain requests.\n   * @returns {Boolean}\n   * @api public\n   */\n\n  XHR.check = function (socket, xdomain) {\n    try {\n      var request = io.util.request(xdomain),\n          usesXDomReq = (global.XDomainRequest && request instanceof XDomainRequest),\n          socketProtocol = (socket && socket.options && socket.options.secure ? 'https:' : 'http:'),\n          isXProtocol = (socketProtocol != global.location.protocol);\n      if (request && !(usesXDomReq && isXProtocol)) {\n        return true;\n      }\n    } catch(e) {}\n\n    return false;\n  };\n\n  /**\n   * Check if the XHR transport supports cross domain requests.\n   *\n   * @returns {Boolean}\n   * @api public\n   */\n\n  XHR.xdomainCheck = function (socket) {\n    return XHR.check(socket, true);\n  };\n\n})(\n    'undefined' != typeof io ? io.Transport : module.exports\n  , 'undefined' != typeof io ? io : module.parent.exports\n  , this\n);\n/**\n * socket.io\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n(function (exports, io) {\n\n  /**\n   * Expose constructor.\n   */\n\n  exports.htmlfile = HTMLFile;\n\n  /**\n   * The HTMLFile transport creates a `forever iframe` based transport\n   * for Internet Explorer. Regular forever iframe implementations will \n   * continuously trigger the browsers buzy indicators. If the forever iframe\n   * is created inside a `htmlfile` these indicators will not be trigged.\n   *\n   * @constructor\n   * @extends {io.Transport.XHR}\n   * @api public\n   */\n\n  function HTMLFile (socket) {\n    io.Transport.XHR.apply(this, arguments);\n  };\n\n  /**\n   * Inherits from XHR transport.\n   */\n\n  io.util.inherit(HTMLFile, io.Transport.XHR);\n\n  /**\n   * Transport name\n   *\n   * @api public\n   */\n\n  HTMLFile.prototype.name = 'htmlfile';\n\n  /**\n   * Creates a new Ac...eX `htmlfile` with a forever loading iframe\n   * that can be used to listen to messages. Inside the generated\n   * `htmlfile` a reference will be made to the HTMLFile transport.\n   *\n   * @api private\n   */\n\n  HTMLFile.prototype.get = function () {\n    this.doc = new window[(['Active'].concat('Object').join('X'))]('htmlfile');\n    this.doc.open();\n    this.doc.write('<html></html>');\n    this.doc.close();\n    this.doc.parentWindow.s = this;\n\n    var iframeC = this.doc.createElement('div');\n    iframeC.className = 'socketio';\n\n    this.doc.body.appendChild(iframeC);\n    this.iframe = this.doc.createElement('iframe');\n\n    iframeC.appendChild(this.iframe);\n\n    var self = this\n      , query = io.util.query(this.socket.options.query, 't='+ +new Date);\n\n    this.iframe.src = this.prepareUrl() + query;\n\n    io.util.on(window, 'unload', function () {\n      self.destroy();\n    });\n  };\n\n  /**\n   * The Socket.IO server will write script tags inside the forever\n   * iframe, this function will be used as callback for the incoming\n   * information.\n   *\n   * @param {String} data The message\n   * @param {document} doc Reference to the context\n   * @api private\n   */\n\n  HTMLFile.prototype._ = function (data, doc) {\n    this.onData(data);\n    try {\n      var script = doc.getElementsByTagName('script')[0];\n      script.parentNode.removeChild(script);\n    } catch (e) { }\n  };\n\n  /**\n   * Destroy the established connection, iframe and `htmlfile`.\n   * And calls the `CollectGarbage` function of Internet Explorer\n   * to release the memory.\n   *\n   * @api private\n   */\n\n  HTMLFile.prototype.destroy = function () {\n    if (this.iframe){\n      try {\n        this.iframe.src = 'about:blank';\n      } catch(e){}\n\n      this.doc = null;\n      this.iframe.parentNode.removeChild(this.iframe);\n      this.iframe = null;\n\n      CollectGarbage();\n    }\n  };\n\n  /**\n   * Disconnects the established connection.\n   *\n   * @returns {Transport} Chaining.\n   * @api public\n   */\n\n  HTMLFile.prototype.close = function () {\n    this.destroy();\n    return io.Transport.XHR.prototype.close.call(this);\n  };\n\n  /**\n   * Checks if the browser supports this transport. The browser\n   * must have an `Ac...eXObject` implementation.\n   *\n   * @return {Boolean}\n   * @api public\n   */\n\n  HTMLFile.check = function (socket) {\n    if (typeof window != \"undefined\" && (['Active'].concat('Object').join('X')) in window){\n      try {\n        var a = new window[(['Active'].concat('Object').join('X'))]('htmlfile');\n        return a && io.Transport.XHR.check(socket);\n      } catch(e){}\n    }\n    return false;\n  };\n\n  /**\n   * Check if cross domain requests are supported.\n   *\n   * @returns {Boolean}\n   * @api public\n   */\n\n  HTMLFile.xdomainCheck = function () {\n    // we can probably do handling for sub-domains, we should\n    // test that it's cross domain but a subdomain here\n    return false;\n  };\n\n  /**\n   * Add the transport to your public io.transports array.\n   *\n   * @api private\n   */\n\n  io.transports.push('htmlfile');\n\n})(\n    'undefined' != typeof io ? io.Transport : module.exports\n  , 'undefined' != typeof io ? io : module.parent.exports\n);\n\n/**\n * socket.io\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n(function (exports, io, global) {\n\n  /**\n   * Expose constructor.\n   */\n\n  exports['xhr-polling'] = XHRPolling;\n\n  /**\n   * The XHR-polling transport uses long polling XHR requests to create a\n   * \"persistent\" connection with the server.\n   *\n   * @constructor\n   * @api public\n   */\n\n  function XHRPolling () {\n    io.Transport.XHR.apply(this, arguments);\n  };\n\n  /**\n   * Inherits from XHR transport.\n   */\n\n  io.util.inherit(XHRPolling, io.Transport.XHR);\n\n  /**\n   * Merge the properties from XHR transport\n   */\n\n  io.util.merge(XHRPolling, io.Transport.XHR);\n\n  /**\n   * Transport name\n   *\n   * @api public\n   */\n\n  XHRPolling.prototype.name = 'xhr-polling';\n\n  /**\n   * Indicates whether heartbeats is enabled for this transport\n   *\n   * @api private\n   */\n\n  XHRPolling.prototype.heartbeats = function () {\n    return false;\n  };\n\n  /** \n   * Establish a connection, for iPhone and Android this will be done once the page\n   * is loaded.\n   *\n   * @returns {Transport} Chaining.\n   * @api public\n   */\n\n  XHRPolling.prototype.open = function () {\n    var self = this;\n\n    io.Transport.XHR.prototype.open.call(self);\n    return false;\n  };\n\n  /**\n   * Starts a XHR request to wait for incoming messages.\n   *\n   * @api private\n   */\n\n  function empty () {};\n\n  XHRPolling.prototype.get = function () {\n    if (!this.isOpen) return;\n\n    var self = this;\n\n    function stateChange () {\n      if (this.readyState == 4) {\n        this.onreadystatechange = empty;\n\n        if (this.status == 200) {\n          self.onData(this.responseText);\n          self.get();\n        } else {\n          self.onClose();\n        }\n      }\n    };\n\n    function onload () {\n      this.onload = empty;\n      this.onerror = empty;\n      self.onData(this.responseText);\n      self.get();\n    };\n\n    function onerror () {\n      self.onClose();\n    };\n\n    this.xhr = this.request();\n\n    if (global.XDomainRequest && this.xhr instanceof XDomainRequest) {\n      this.xhr.onload = onload;\n      this.xhr.onerror = onerror;\n    } else {\n      this.xhr.onreadystatechange = stateChange;\n    }\n\n    this.xhr.send(null);\n  };\n\n  /**\n   * Handle the unclean close behavior.\n   *\n   * @api private\n   */\n\n  XHRPolling.prototype.onClose = function () {\n    io.Transport.XHR.prototype.onClose.call(this);\n\n    if (this.xhr) {\n      this.xhr.onreadystatechange = this.xhr.onload = this.xhr.onerror = empty;\n      try {\n        this.xhr.abort();\n      } catch(e){}\n      this.xhr = null;\n    }\n  };\n\n  /**\n   * Webkit based browsers show a infinit spinner when you start a XHR request\n   * before the browsers onload event is called so we need to defer opening of\n   * the transport until the onload event is called. Wrapping the cb in our\n   * defer method solve this.\n   *\n   * @param {Socket} socket The socket instance that needs a transport\n   * @param {Function} fn The callback\n   * @api private\n   */\n\n  XHRPolling.prototype.ready = function (socket, fn) {\n    var self = this;\n\n    io.util.defer(function () {\n      fn.call(self);\n    });\n  };\n\n  /**\n   * Add the transport to your public io.transports array.\n   *\n   * @api private\n   */\n\n  io.transports.push('xhr-polling');\n\n})(\n    'undefined' != typeof io ? io.Transport : module.exports\n  , 'undefined' != typeof io ? io : module.parent.exports\n  , this\n);\n\n/**\n * socket.io\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n(function (exports, io, global) {\n  /**\n   * There is a way to hide the loading indicator in Firefox. If you create and\n   * remove a iframe it will stop showing the current loading indicator.\n   * Unfortunately we can't feature detect that and UA sniffing is evil.\n   *\n   * @api private\n   */\n\n  var indicator = global.document && \"MozAppearance\" in\n    global.document.documentElement.style;\n\n  /**\n   * Expose constructor.\n   */\n\n  exports['jsonp-polling'] = JSONPPolling;\n\n  /**\n   * The JSONP transport creates an persistent connection by dynamically\n   * inserting a script tag in the page. This script tag will receive the\n   * information of the Socket.IO server. When new information is received\n   * it creates a new script tag for the new data stream.\n   *\n   * @constructor\n   * @extends {io.Transport.xhr-polling}\n   * @api public\n   */\n\n  function JSONPPolling (socket) {\n    io.Transport['xhr-polling'].apply(this, arguments);\n\n    this.index = io.j.length;\n\n    var self = this;\n\n    io.j.push(function (msg) {\n      self._(msg);\n    });\n  };\n\n  /**\n   * Inherits from XHR polling transport.\n   */\n\n  io.util.inherit(JSONPPolling, io.Transport['xhr-polling']);\n\n  /**\n   * Transport name\n   *\n   * @api public\n   */\n\n  JSONPPolling.prototype.name = 'jsonp-polling';\n\n  /**\n   * Posts a encoded message to the Socket.IO server using an iframe.\n   * The iframe is used because script tags can create POST based requests.\n   * The iframe is positioned outside of the view so the user does not\n   * notice it's existence.\n   *\n   * @param {String} data A encoded message.\n   * @api private\n   */\n\n  JSONPPolling.prototype.post = function (data) {\n    var self = this\n      , query = io.util.query(\n             this.socket.options.query\n          , 't='+ (+new Date) + '&i=' + this.index\n        );\n\n    if (!this.form) {\n      var form = document.createElement('form')\n        , area = document.createElement('textarea')\n        , id = this.iframeId = 'socketio_iframe_' + this.index\n        , iframe;\n\n      form.className = 'socketio';\n      form.style.position = 'absolute';\n      form.style.top = '0px';\n      form.style.left = '0px';\n      form.style.display = 'none';\n      form.target = id;\n      form.method = 'POST';\n      form.setAttribute('accept-charset', 'utf-8');\n      area.name = 'd';\n      form.appendChild(area);\n      document.body.appendChild(form);\n\n      this.form = form;\n      this.area = area;\n    }\n\n    this.form.action = this.prepareUrl() + query;\n\n    function complete () {\n      initIframe();\n      self.socket.setBuffer(false);\n    };\n\n    function initIframe () {\n      if (self.iframe) {\n        self.form.removeChild(self.iframe);\n      }\n\n      try {\n        // ie6 dynamic iframes with target=\"\" support (thanks Chris Lambacher)\n        iframe = document.createElement('<iframe name=\"'+ self.iframeId +'\">');\n      } catch (e) {\n        iframe = document.createElement('iframe');\n        iframe.name = self.iframeId;\n      }\n\n      iframe.id = self.iframeId;\n\n      self.form.appendChild(iframe);\n      self.iframe = iframe;\n    };\n\n    initIframe();\n\n    // we temporarily stringify until we figure out how to prevent\n    // browsers from turning `\\n` into `\\r\\n` in form inputs\n    this.area.value = io.JSON.stringify(data);\n\n    try {\n      this.form.submit();\n    } catch(e) {}\n\n    if (this.iframe.attachEvent) {\n      iframe.onreadystatechange = function () {\n        if (self.iframe.readyState == 'complete') {\n          complete();\n        }\n      };\n    } else {\n      this.iframe.onload = complete;\n    }\n\n    this.socket.setBuffer(true);\n  };\n  \n  /**\n   * Creates a new JSONP poll that can be used to listen\n   * for messages from the Socket.IO server.\n   *\n   * @api private\n   */\n\n  JSONPPolling.prototype.get = function () {\n    var self = this\n      , script = document.createElement('script')\n      , query = io.util.query(\n             this.socket.options.query\n          , 't='+ (+new Date) + '&i=' + this.index\n        );\n\n    if (this.script) {\n      this.script.parentNode.removeChild(this.script);\n      this.script = null;\n    }\n\n    script.async = true;\n    script.src = this.prepareUrl() + query;\n    script.onerror = function () {\n      self.onClose();\n    };\n\n    var insertAt = document.getElementsByTagName('script')[0]\n    insertAt.parentNode.insertBefore(script, insertAt);\n    this.script = script;\n\n    if (indicator) {\n      setTimeout(function () {\n        var iframe = document.createElement('iframe');\n        document.body.appendChild(iframe);\n        document.body.removeChild(iframe);\n      }, 100);\n    }\n  };\n\n  /**\n   * Callback function for the incoming message stream from the Socket.IO server.\n   *\n   * @param {String} data The message\n   * @api private\n   */\n\n  JSONPPolling.prototype._ = function (msg) {\n    this.onData(msg);\n    if (this.isOpen) {\n      this.get();\n    }\n    return this;\n  };\n\n  /**\n   * The indicator hack only works after onload\n   *\n   * @param {Socket} socket The socket instance that needs a transport\n   * @param {Function} fn The callback\n   * @api private\n   */\n\n  JSONPPolling.prototype.ready = function (socket, fn) {\n    var self = this;\n    if (!indicator) return fn.call(this);\n\n    io.util.load(function () {\n      fn.call(self);\n    });\n  };\n\n  /**\n   * Checks if browser supports this transport.\n   *\n   * @return {Boolean}\n   * @api public\n   */\n\n  JSONPPolling.check = function () {\n    return 'document' in global;\n  };\n\n  /**\n   * Check if cross domain requests are supported\n   *\n   * @returns {Boolean}\n   * @api public\n   */\n\n  JSONPPolling.xdomainCheck = function () {\n    return true;\n  };\n\n  /**\n   * Add the transport to your public io.transports array.\n   *\n   * @api private\n   */\n\n  io.transports.push('jsonp-polling');\n\n})(\n    'undefined' != typeof io ? io.Transport : module.exports\n  , 'undefined' != typeof io ? io : module.parent.exports\n  , this\n);\n\n})();"}